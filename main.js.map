{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;AAKM,MAAOA,cAAc;EAH3BC;IAKE,YAAO,GAAG,CACR;MAAEC,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,oBAAoB;MAAEC,MAAM,EAAE,cAAc;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAC,2BAA2B;MACxHC,WAAW,EAAE;;;KAGd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,gBAAgB;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAGC,KAAK,EAAC,0BAA0B;MACnHC,WAAW,EAAE;;;;KAId,EAED;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,mCAAmC;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAC,2BAA2B;MACtIC,WAAW,EAAE;KACd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,UAAU;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAC,0BAA0B;MAC5GC,WAAW,EAAE;KACd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,kBAAkB;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAC,2BAA2B;MACrHC,WAAW,EAAE;;;KAGd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,sCAAsC;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAGC,KAAK,EAAC,2BAA2B;MAC1IC,WAAW,EAAE;;;KAGd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,2BAA2B;MAAEC,MAAM,EAAE,cAAc;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAGC,KAAK,EAAC,0BAA0B;MAC/HC,WAAW,EAAE;;;KAGd,EACD;MAAEN,EAAE,EAAC,GAAG;MAAEC,IAAI,EAAC,6BAA6B;MAAEC,MAAM,EAAE,aAAa;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAC,2BAA2B;MAClIC,WAAW,EAAE;;;;IAIf;IACA;IACA;IAAA,CACD;;;EAGDC,aAAa;IACX,MAAMC,UAAU,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAG;MAChDC,UAAU,CAAC,MAAI;QACbF,OAAO,CAAC,IAAI,CAACG,OAAO,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;IAEF,OAAOL,UAAU;EACnB;;SAvDWV,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAgB,SAAdhB,MAAc;EAAAiB,YAFb;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFmC;AACQ;AACA;AACK;AACA;AACA;AACA;AACA;AACA;AACA;AACX;AACH;AACM;;;AAE5D,MAAMc,QAAQ,GAAU,CACtB;EAACC,IAAI,EAAE,EAAE;EAACC,UAAU,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAM,CAAC,EAChD;EAACF,IAAI,EAAE,MAAM;EAACG,SAAS,EAAEN,gEAAaA;AAAA,CAAC,EACvC;EAACG,IAAI,EAAE,SAAS;EAACG,SAAS,EAAEhB,wEAAgBA;AAAA,CAAC,EAC7C;EAACa,IAAI,EAAE,SAAS;EAACG,SAAS,EAAEf,wEAAgBA;AAAA,CAAC,EAC7C;EAACY,IAAI,EAAE,QAAQ;EAAEG,SAAS,EAAEL,sEAAeA;AAAA,CAAC,EAC5C;EAACE,IAAI,EAAC,SAAS;EAACI,QAAQ,EAAC,CACvB;IAACJ,IAAI,EAAC,YAAY;IAAEG,SAAS,EAAGd,6EAAeA;EAAA,CAAC,EAChD;IAACW,IAAI,EAAE,YAAY;IAAEG,SAAS,EAAEb,6EAAeA;EAAA,CAAC,EAChD;IAACU,IAAI,EAAE,YAAY;IAACG,SAAS,EAAGZ,6EAAeA;EAAA,CAAC,EAChD;IAACS,IAAI,EAAE,YAAY;IAACG,SAAS,EAAGX,6EAAeA;EAAA,CAAC,EAChD;IAACQ,IAAI,EAAE,YAAY;IAACG,SAAS,EAAGV,6EAAeA;EAAA,CAAC,EAChD;IAACO,IAAI,EAAE,YAAY;IAACG,SAAS,EAAGT,6EAAeA;EAAA,CAAC,EAChD;IAACM,IAAI,EAAE,YAAY;IAACG,SAAS,EAAGR,6EAAeA;EAAA,CAAC;AACjD,CAAC,EACF;EAACK,IAAI,EAAE,IAAI;EAAEG,SAAS,EAAEP,kEAAcA;AAAA,CAAC,CACxC;AAMK,MAAOS,gBAAgB;SAAhBA,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA;AAAgB;;YAHjBnB,kEAAoB,CAACa,QAAQ,EAAC;IAACQ,aAAa,EAAC;EAAI,CAAC,CAAC,EACnDrB,0DAAY;AAAA;;uHAEXmB,gBAAgB;IAAAG,UAAAA,0DAAAA;IAAAC,UAFjBvB,0DAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACjCxB;AAOM,MAAOwB,YAAY;EALzBzC;IAME,UAAK,GAAG,cAAc;;EAEtB0C,KAAK,IAEL;EAEAC,MAAM,IAEN;;SATWF,YAAY;;mBAAZA,MAAY;AAAA;;QAAZA,MAAY;EAAAG;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTzBC,uDAAAA,cAA2D;MAM3DA,4DAAAA,aAA4B;MAGqCA,oDAAAA,YAAI;MAAAA,0DAAAA,EAAI;MAC/DA,4DAAAA,aAAkC;MAA8BA,oDAAAA,eAAO;MAAAA,0DAAAA,EAAI;MAC3EA,4DAAAA,aAAkC;MAAwBA,oDAAAA,eAAO;MAAAA,0DAAAA,EAAI;MACrEA,4DAAAA,aAAkC;MAAuBA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAI;MAC7EA,4DAAAA,gBAA0B;MAClBA,wDAAAA;QAAA,OAAWC,WAAO;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,aAAK;MAAAA,0DAAAA,EAAI;MACpCA,4DAAAA,cAAyB;MAArBA,wDAAAA;QAAA,OAAWC,YAAQ;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,cAAM;MAAAA,0DAAAA,EAAI;MAE1CA,4DAAAA,eAA6B;MAC3BA,uDAAAA,eAAoE;MACtEA,0DAAAA,EAAM;MAGdA,4DAAAA,eAAiC;MAC7BA,uDAAAA,yBAA2C;MAC/CA,0DAAAA,EAAM;;;MAfMA,uDAAAA,GAA6B;MAA7BA,wDAAAA,8BAA6B;MAC7BA,uDAAAA,GAA6B;MAA7BA,wDAAAA,8BAA6B;MAAIA,uDAAAA,GAA0B;MAA1BA,wDAAAA,eAAAA,6DAAAA,SAA0B;MAC3DA,uDAAAA,GAA6B;MAA7BA,wDAAAA,8BAA6B;MAC7BA,uDAAAA,GAA6B;MAA7BA,wDAAAA,8BAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXe;AAEF;AACT;AACa;AACN;AACS;AACA;AACN;AACG;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACd;AACmC;AACA;AACV;AACmB;AACA;AAClG;AACA;AAC8E;AACZ;AACA;AAC6B;AACjB;AACM;AACN;AAClB;AACS;AACqB;;AA4CpF,MAAOmB,SAAS;SAATA,SAAS;;mBAATA,MAAS;AAAA;;QAATA,MAAS;EAAAC,YAFR5B,wDAAY;AAAA;;aADb,CAAC1C,qEAAc,EAAEmE,+EAAgB,CAAC;EAAA3B,UAL3CY,qEAAa,EACbf,iEAAgB,EAChBiB,wDAAW,EACXG,0FAAuB;AAAA;;uHAKdY,SAAS;IAAAE,eAvClB7B,wDAAY,EACZb,+DAAa,EACbV,wEAAgB,EAChBC,wEAAgB,EAChBQ,kEAAc,EACdP,6EAAe,EACfC,6EAAe,EACfC,8EAAe,EACfC,8EAAe,EACfC,8EAAe,EACfC,8EAAe,EACfC,8EAAe,EACf4B,mGAAmB,EACnBC,mGAAmB,EACnBE,4GAAsB,EACtBC,4GAAsB,EACtBN,qEAAe;IACf;IACA;IACAO,wFAAgB,EAChBC,4EAAY,EACZA,4EAAY,EACZC,4EAAY,EACZC,yGAAqB,EACrBC,wFAAgB,EAChBC,8FAAkB,EAClBC,wFAAgB,EAChBpC,sEAAe,EACfsC,oGAAoB;IAAA5B,UAGpBY,qEAAa,EACbf,iEAAgB,EAChBiB,wDAAW,EACXG,0FAAuB;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ICtErBP,4DAAAA,SAA2C;IAEvCA,uDAAAA,aAA8D;IAC9DA,oDAAAA,GACF;IAAAA,0DAAAA,EAAI;;;;IAHDA,uDAAAA,GAA0B;IAA1BA,mEAAAA,6BAAAA,2DAAAA,CAA0B;IACtBA,uDAAAA,GAA6B;IAA7BA,mEAAAA,gCAAAA,2DAAAA,CAA6B;IAACA,mEAAAA,4BAA0B;IAC7DA,uDAAAA,GACF;IADEA,gEAAAA,+BACF;;;ACQF,MAAOpB,eAAe;EAL5B7B;IAOE,gBAAW,GAAiB,CAC1B;MACEuE,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,2BAA2B;MACjCC,QAAQ,EAAE;KACX,EACD;MACEF,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE,uBAAuB;MAC7BC,QAAQ,EAAE;KACX,EACD;MACEF,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE,4BAA4B;MAClCC,QAAQ,EAAE;KACX,CACF;;;SAlBU5C,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDhB5BC,4DAAAA,aAA6B;MACrBA,oDAAAA,sBAAe;MAAAA,0DAAAA,EAAK;MAExBA,4DAAAA,SAAI;MACFA,wDAAAA,iDAKK;MACPA,0DAAAA,EAAK;;;MANwBA,uDAAAA,GAAc;MAAdA,wDAAAA,4BAAc;;;;;;;;;;;;;;;;;;;;;;AEGzC,MAAO/B,gBAAgB;SAAhBA,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA,MAAgB;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP7BC,4DAAAA,aAAuB;MAGPA,oDAAAA,4BAAqB;MAAAA,0DAAAA,EAAK;MAC9BA,4DAAAA,aAA0B;MACtBA,uDAAAA,aAAyD;MAC7DA,0DAAAA,EAAM;MAENA,4DAAAA,aAA2B;MAGfA,oDAAAA,gGACA;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,uGACA;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,yFACA;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,0EACJ;MAAAA,0DAAAA,EAAI;MAIRA,4DAAAA,cAAkB;MAEHA,oDAAAA,eAAO;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,kCAA0B;MAAAA,0DAAAA,EAAK;MACjDA,4DAAAA,UAAI;MAAAA,oDAAAA,iBAAS;MAAAA,uDAAAA,eAAkF;MAACA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAK;MAOrIA,4DAAAA,cAAoB;MACZA,oDAAAA,uBAAe;MAAAA,0DAAAA,EAAK;MACxBA,4DAAAA,cAA0B;MACtBA,uDAAAA,eAAyD;MAC7DA,0DAAAA,EAAM;MACNA,4DAAAA,cAA2B;MACnBA,oDAAAA,0DAAiD;MAAAA,uDAAAA,UAAI;MACrDA,oDAAAA,uDAA8C;MAAAA,uDAAAA,UAAI;MAClDA,oDAAAA,0DACJ;MAAAA,0DAAAA,EAAI;MACJA,4DAAAA,cAAkB;MAENA,oDAAAA,4CAAoC;MAAAA,0DAAAA,EAAK;MAC7CA,4DAAAA,UAAI;MAAAA,oDAAAA,yBAAiB;MAAAA,0DAAAA,EAAK;MAM1CA,4DAAAA,eAAgC;MACxBA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAK;MACvBA,4DAAAA,cAA0B;MACtBA,uDAAAA,eAAyD;MAC7DA,0DAAAA,EAAM;MAENA,4DAAAA,cAA2B;MACpBA,oDAAAA,6CAAqC;MAAAA,uDAAAA,UAAI;MACxCA,oDAAAA,wDAA+C;MAAAA,uDAAAA,UAAI;MACnDA,oDAAAA,+CAAsC;MAAAA,0DAAAA,EAAI;MAG9CA,4DAAAA,cAAkB;MAENA,oDAAAA,qCAA6B;MAAAA,0DAAAA,EAAK;MACtCA,4DAAAA,UAAI;MAAAA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IChE7CA,qEAAAA,GAA6C;IACzCA,4DAAAA,aAA8B;IAGlBA,uDAAAA,aAAuD;IAC3DA,0DAAAA,EAAM;IACNA,4DAAAA,aAAyB;IAAIA,oDAAAA,GAAgB;IAAAA,uDAAAA,SAAI;IAAAA,oDAAAA,GAAqB;IAAAA,0DAAAA,EAAK;IAC3EA,4DAAAA,cAAgC;IAAGA,oDAAAA,IAAsB;IAAAA,0DAAAA,EAAI;IAC7DA,4DAAAA,cAA4B;IACgDA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;IAI7GA,mEAAAA,EAAe;;;;IATMA,uDAAAA,GAAoB;IAApBA,wDAAAA,yBAAAA,2DAAAA,CAAoB;IAEAA,uDAAAA,GAAgB;IAAhBA,+DAAAA,gBAAgB;IAAIA,uDAAAA,GAAqB;IAArBA,gEAAAA,8BAAqB;IACnCA,uDAAAA,GAAsB;IAAtBA,+DAAAA,uBAAsB;IAExBA,uDAAAA,GAA0C;IAA1CA,oEAAAA,oDAA0C;;;ACFrF,MAAO9B,gBAAgB;EAG3BnB,YAAoB0E,cAA8B,EAAUC,KAAqB;IAA7D,mBAAc,GAAdD,cAAc;IAA0B,UAAK,GAALC,KAAK;IAEjE,YAAO,GAAsH,EAAE;EAF1C;EAIrFC,QAAQ;IACN,IAAI,CAAC9D,OAAO,GAAG,IAAI,CAAC4D,cAAc,CAAC5D,OAAO;IAC1C,IAAI,CAAC4D,cAAc,CAAClE,aAAa,EAAE,CAACqE,IAAI,CAAEC,IAAuH,IAAG;MAClK,IAAI,CAAChE,OAAO,GAAGgE,IAAI;IACrB,CAAC,CAAC;IACF;EAGF;;SAfW3D,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA,MAAgB;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT7BC,4DAAAA,aAAuB;MACfA,oDAAAA,kBAAW;MAAAA,0DAAAA,EAAK;MACpBA,wDAAAA,uEAae;MACfA,uDAAAA,oBAA+B;MACnCA,0DAAAA,EAAM;;;MAf+BA,uDAAAA,GAAU;MAAVA,wDAAAA,wBAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AEDkC;;;;;;;;;;;ICazEA,4DAAAA,aAAoL;IAChLA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IAF+DA,yDAAAA,mCAAgC;IAArDA,wDAAAA,wBAAoB;IAChEA,uDAAAA,GACJ;IADIA,gEAAAA,yBACJ;;;;;IA0BIA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAAyD;IACrDA,oDAAAA;IAAAA,wDAAAA,sEAEM;IACNA,oDAAAA;IAAAA,wDAAAA,sEAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;;;;IAxBzDA,4DAAAA,cAAiD;IAE7CA,oDAAAA;IAAAA,4DAAAA,cAAsB;IAClBA,oDAAAA;IAAAA,4DAAAA,cAAkB;IACdA,oDAAAA;IAAAA,4DAAAA,WAAM;IAClBA,oDAAAA,8EACA;IAAAA,uDAAAA,SAAI;IACJA,oDAAAA,IACiB;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,oBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IAE5E;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,8BACnG;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,kBAAU;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,8BAC1L;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IAKlG;IAAAA,0DAAAA,EAAO;IACPA,oDAAAA;IAAAA,0DAAAA,EAAM;IAENA,oDAAAA;IAAAA,wDAAAA,iEAOM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;IACNA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAtBVA,uDAAAA,IACiB;IADjBA,gEAAAA,yEACiB;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GAE5E;IAF4EA,gEAAAA,mHAE5E;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAC/BA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAA8EA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IACtHA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GAKlG;IALkGA,gEAAAA,sEAKlG;IAGuBA,uDAAAA,GAAgC;IAAhCA,wDAAAA,yDAAgC;;;ADVzD,MAAOM,mBAAmB;EApBhCvD;IAqBE,UAAK,GAAU,EAAE;IACjB,UAAK,GAAG,GAAG;IACX,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,KAAK;IAChB,kBAAa,GAAG,KAAK;IA6CrB,YAAO,GAAY,KAAK;;EA3CxB4E,QAAQ;IACN,IAAI,CAACQ,aAAa,EAAE;IACpBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;EACzB;EAEAH,aAAa;IACX,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;QACdC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;QAC1CC,KAAK,EAAE,WAAW;QAClBd,KAAK,EAAE,UAAU;QACjBe,CAAC,EAAEP,CAAC,GAAC,IAAI,CAACQ;OACX,CAAC;;EAEN;EAEMC,UAAU;IAAA;IAAA;MACd,KAAI,CAACC,OAAO,GAAG,KAAK;MACpB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAI,CAACD,KAAK,CAACY,MAAM,EAAEX,CAAC,EAAE,EAAE;QAC1C,KAAK,IAAIY,CAAC,GAAGZ,CAAC,GAAC,CAAC,EAAEY,CAAC,GAAG,KAAI,CAACb,KAAK,CAACY,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC5C,IAAG,KAAI,CAACF,OAAO,IAAE,KAAK,EAAC;YACrB,MAAM,IAAIxF,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;YACtD,KAAI,CAAC4E,KAAK,CAACa,CAAC,CAAC,CAACpB,KAAK,GAAG,QAAQ;YAC9B,KAAI,CAACO,KAAK,CAACC,CAAC,CAAC,CAACR,KAAK,GAAG,QAAQ;YAC9B,MAAM,IAAItE,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;YACtD,IAAI,KAAI,CAAC4E,KAAK,CAACC,CAAC,CAAC,CAACE,KAAK,GAAG,KAAI,CAACH,KAAK,CAACa,CAAC,CAAC,CAACV,KAAK,EAAE;cAC7C,MAAMW,IAAI,GAAG,KAAI,CAACd,KAAK,CAACa,CAAC,CAAC;cAC1B,KAAI,CAACb,KAAK,CAACa,CAAC,CAAC,GAAG,KAAI,CAACb,KAAK,CAACC,CAAC,CAAC;cAC7B,KAAI,CAACD,KAAK,CAACC,CAAC,CAAC,GAAGa,IAAI;;YAEtBxF,UAAU,CAAC,MAAK;cACd,KAAI,CAAC0E,KAAK,CAACa,CAAC,CAAC,CAACpB,KAAK,GAAG,UAAU;cAChC,KAAI,CAACO,KAAK,CAACC,CAAC,CAAC,CAACR,KAAK,GAAG,UAAU;YAClC,CAAC,EAAE,GAAG,CAAC;WACR,MACG;YACF;;;;IAIL;EACH;EAGAsB,QAAQ;IACN,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEAK,UAAU;IACR,IAAI,IAAI,CAACC,MAAM,IAAI,KAAK,IAAI,IAAI,CAACA,MAAM,IAAI,SAAS,IAAK,IAAI,CAACA,MAAM,IAAI,OAAO,IAAK,IAAI,CAACA,MAAM,IAAI,MAAM,EAAC;MACxG,IAAG,IAAI,CAACC,MAAM,IAAI,GAAG,IAAI,IAAI,CAACC,MAAM,IAAI,GAAG,EAAC;QAC1C,IAAI,CAACC,QAAQ,GAAG,IAAI;OACrB,MACI,IAAG,IAAI,CAACF,MAAM,IAAI,GAAG,IAAI,IAAI,CAACC,MAAM,IAAI,GAAG,EAAC;QAC/C,IAAI,CAACC,QAAQ,GAAG,IAAI;;KAEvB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;EAEAC,YAAY;IACV,IAAI,CAACC,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;EAC1C;;SA1EWtD,mBAAmB;;mBAAnBA,MAAmB;AAAA;;QAAnBA,MAAmB;EAAAX;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC9BhCC,4DAAAA,aAA4B;MAIhBA,oDAAAA,8BACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAAgD;MAAvBA,wDAAAA;QAAA,OAASC,gBAAY;MAAA,EAAC;MAACD,oDAAAA,kBAAW;MAAAA,0DAAAA,EAAS;MACpEA,4DAAAA,gBAAwD;MAA1BA,wDAAAA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,oDAAAA,yBAAkB;MAAAA,0DAAAA,EAAS;MACnFA,4DAAAA,gBAAoD;MAArBA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,oDAAAA,WAAI;MAAAA,0DAAAA,EAAS;MACjEA,4DAAAA,iBAAwD;MAAzBA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAS;MAGlFA,4DAAAA,cAAuB;MACnBA,wDAAAA,yDAEM;MACVA,0DAAAA,EAAM;MAIVA,wDAAAA,2DA8BM;;;MArCwCA,uDAAAA,IAAQ;MAARA,wDAAAA,sBAAQ;MAO1BA,uDAAAA,GAAmB;MAAnBA,wDAAAA,2BAAmB;;;;;;eDNjC,CACVkC,4DAAO,CAAC,MAAM,EAAE,CACdH,0DAAK,CAAC,UAAU,EAAEC,0DAAK,CAAC;MACtB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EACH9B,0DAAK,CAAC,QAAQ,EAAEC,0DAAK,CAAC;MACpB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EAEH5B,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,EAC/CG,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,CAChD,CAAC;EACH;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEyHO9B,4DAAAA,cAA2E;IAEvEA,oDAAAA,GACF;IAAAA,0DAAAA,EAAM;;;;;;IAFDA,uDAAAA,GAAgG;IAAhGA,wDAAAA,YAAAA,6DAAAA,+FAAgG;IACnGA,uDAAAA,GACF;IADEA,gEAAAA,mBACF;;;;;;IAaVA,4DAAAA,cAA0E;IAElDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,YAAO;IAAAA,oDAAAA,yDAAkD;IAAAA,0DAAAA,EAAQ;IACjEA,4DAAAA,gBAA6E;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAA3EA,0DAAAA,EAA6E;IAC7EA,uDAAAA,SAAM;IACNA,4DAAAA,iBAAmE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,yBAAgB;IAAA,EAAC;IAACA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;;;;IAFpCA,uDAAAA,GAAuB;IAAvBA,wDAAAA,6BAAuB;;;;;;IAM/EA,4DAAAA,cAAkE;IAE1CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,YAAO;IAAAA,oDAAAA,sEAA+D;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,oBAAa;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,8CACnE;IAAAA,uDAAAA,SAAI;IAACA,oDAAAA,sBAAa;IAAAA,uDAAAA,UAAI;IAAAA,0DAAAA,EAAQ;IACtDA,uDAAAA,UAAM;IACNA,4DAAAA,SAAG;IAAAA,oDAAAA,gCAAwB;IAAAA,0DAAAA,EAAI;IAC/BA,4DAAAA,iBAA6D;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAA3DA,0DAAAA,EAA6D;IAC7DA,uDAAAA,UAAM;IACNA,4DAAAA,kBAA8D;IAAvBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,qBAAY;IAAA,EAAC;IAACA,oDAAAA,iBAAS;IAAAA,0DAAAA,EAAS;;;;IAF5CA,uDAAAA,IAAuB;IAAvBA,wDAAAA,6BAAuB;;;;;;IAO/DA,4DAAAA,cAAgE;IAExCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,YAAO;IAACA,oDAAAA,+DAAuD;IAAAA,0DAAAA,EAAQ;IACvEA,4DAAAA,QAAG;IAAAA,oDAAAA,uCAAgC;IAAAA,0DAAAA,EAAI;IACvCA,uDAAAA,YAAwB;IAC1BA,0DAAAA,EAAM;;;;;;IAKRA,4DAAAA,cAAsE;IAE9CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,YAAO;IAAAA,oDAAAA,oDAA6C;IAAAA,0DAAAA,EAAQ;IAC5DA,4DAAAA,gBAAmE;IAA1BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAwB;IAAjEA,0DAAAA,EAAmE;IACnEA,uDAAAA,SAAI;IACJA,4DAAAA,YAAO;IAAAA,oDAAAA,oCAA4B;IAAAA,0DAAAA,EAAQ;IAC3CA,4DAAAA,iBAAgE;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAA9DA,0DAAAA,EAAgE;IAChEA,uDAAAA,UAAI;IACJA,4DAAAA,kBAAoE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,yBAAgB;IAAA,EAAC;IAACA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;;;;IALhDA,uDAAAA,GAAwB;IAAxBA,wDAAAA,8BAAwB;IAG1BA,uDAAAA,GAAuB;IAAvBA,wDAAAA,6BAAuB;;;;;;IAchEA,4DAAAA,cAAgF;IAG1DA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,cAAuB;IACIA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,iBAAQ;IAAA,EAAC;IAACA,oDAAAA,WAAI;IAAAA,0DAAAA,EAAS;IAAAA,uDAAAA,SAAI;IAE7DA,4DAAAA,cAAqB;IAAGA,oDAAAA,oCAA6B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAgB;IAAAA,0DAAAA,EAAM;IAC/EA,uDAAAA,UAAI;IACJA,4DAAAA,eAAwB;IAAGA,oDAAAA,sCAA8B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAc;IAAAA,0DAAAA,EAAM;IACjFA,4DAAAA,eAAwB;IAAGA,oDAAAA,mCAA2B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAW;IAAAA,0DAAAA,EAAM;IAC3EA,4DAAAA,eAAwB;IAAGA,oDAAAA,qBAAa;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAW;IAAAA,0DAAAA,EAAM;IAE7DA,uDAAAA,UAAI;IACJA,4DAAAA,kBAAkD;IAAxBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,sBAAa;IAAA,EAAC;IAACA,oDAAAA,wBAAgB;IAAAA,0DAAAA,EAAS;IAG7EA,4DAAAA,cAAgC;IAAAA,oDAAAA,4BAAoB;IAAAA,0DAAAA,EAAK;IACzDA,4DAAAA,WAAK;IAEDA,oDAAAA,qEAA4D;IAAAA,uDAAAA,UAAI;IAChEA,oDAAAA,yEAAgE;IAAAA,uDAAAA,UAAI;IACpEA,oDAAAA,0CAAiC;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,6BAEpC;IAAAA,0DAAAA,EAAI;IAAAA,uDAAAA,UAAI;IAERA,oDAAAA,0EAAiE;IAAAA,uDAAAA,UAAI;IAErEA,oDAAAA,gFAAuE;IAAAA,uDAAAA,UAAI;IAC7EA,0DAAAA,EAAI;IAEJA,4DAAAA,gBAAoB;IAAAA,oDAAAA,iBAAS;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,0CAAkC;IAAAA,0DAAAA,EAAI;IACtEA,uDAAAA,UAAI;IAEJA,4DAAAA,UAAI;IAAGA,oDAAAA,eAAO;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,mCAA0B;IAAAA,0DAAAA,EAAK;IAClDA,uDAAAA,UAAI;IACJA,4DAAAA,UAAI;IAAGA,oDAAAA,sBAAc;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uLAC2B;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,4CAAoC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uCAA8B;IAAAA,uDAAAA,UAAI;IAAAA,0DAAAA,EAAK;IACxIA,4DAAAA,UAAI;IAAGA,oDAAAA,WAAG;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAAIA,0DAAAA,EAAK;IAE/FA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,SAAC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,6BAAoB;IAAAA,uDAAAA,UAAI;IACzCA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,cAAM;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uDAA8C;IAAAA,uDAAAA,UAAI;IACxEA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAEzEA,0DAAAA,EAAM;;;;IArCqDA,uDAAAA,IAAgB;IAAhBA,+DAAAA,qBAAgB;IAEZA,uDAAAA,GAAc;IAAdA,+DAAAA,mBAAc;IACjBA,uDAAAA,GAAW;IAAXA,+DAAAA,gBAAW;IACzBA,uDAAAA,GAAW;IAAXA,+DAAAA,gBAAW;;;;;;IA+C7DA,4DAAAA,eAA6D;IAAzCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAAwBA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;;;;;;IAC3EA,4DAAAA,aAAkD;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,oBAAW;IAAA,EAAC;IAC/CA,oDAAAA,oCACF;IAAAA,0DAAAA,EAAK;;;;;IACLA,uDAAAA,kBAAkD;;;;;;IAKlDA,4DAAAA,eAA6D;IAAzCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAAwBA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;;;;;;IAC3EA,4DAAAA,aAAkD;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,oBAAW;IAAA,EAAC;IAC/CA,oDAAAA,uBACF;IAAAA,0DAAAA,EAAK;;;;;IACLA,uDAAAA,oBAAsD;;;;;;IAKtDA,4DAAAA,eAA6D;IAAzCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAAwBA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;;;;;;IAC3EA,4DAAAA,aAAkD;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,oBAAW;IAAA,EAAC;IAC/CA,oDAAAA,2BACF;IAAAA,0DAAAA,EAAK;;;;;IACLA,uDAAAA,kBAAkD;;;;;;IAKlDA,4DAAAA,eAA6D;IAAzCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAAwBA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;;;;;;IAC3EA,4DAAAA,aAAkD;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,oBAAW;IAAA,EAAC;IAC/CA,oDAAAA,kCACF;IAAAA,0DAAAA,EAAK;;;;;IACLA,uDAAAA,kBAAkD;;;;;;IAKlDA,4DAAAA,eAA6D;IAAzCA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAAwBA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;;;;;;IAC3EA,4DAAAA,aAAkD;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,oBAAW;IAAA,EAAC;IAC/CA,oDAAAA,wBACF;IAAAA,0DAAAA,EAAK;;;;;IACLA,uDAAAA,kBAAkD;;;ACvT9C,MAAO7B,eAAe;EAqB1BpB;IApBA,iBAAY,GAAa,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACpC,eAAU,GAAW,0BAA0B;IAC/C,gBAAW,GAAW,IAAI,CAAC+G,YAAY,CAACZ,MAAM;IAE9C,iBAAY,GAAW,CAAC;IACxB,eAAU,GAAW,CAAC;IACtB,YAAO,GAAQ,CAAC;IAChB,YAAO,GAAW,CAAC;IAEnB,kBAAa,GAAY,KAAK;IAC9B,WAAM,GAAY,KAAK;IACvB,UAAK,GAAY,KAAK;IACtB,WAAM,GAAY,KAAK;IACvB,aAAQ,GAAY,KAAK;IACzB,YAAO,GAAY,IAAI;IACvB,cAAS,GAAW,EAAE;IACtB,mBAAc,GAAG,KAAK;IACtB,mBAAc,GAAG,KAAK;IACtB,mBAAc,GAAG,KAAK;IACtB,eAAU,GAAW,EAAE;EAGvB;EAIAa,UAAU,CAACC,MAAe;IACxB,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAI,IAAIC,GAAG,IAAI,IAAI,CAACJ,YAAY,EAAC;MAC/B,IAAIK,SAAS,GAAGD,GAAG,CAACE,QAAQ,EAAE;MAC9BH,OAAO,IAAIE,SAAS,GAAG,IAAI;;IAG7B,IAAIE,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;IACpD,OAAON,OAAO;EAChB;EAEAO,WAAW;IACT,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzBtC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsC,SAAS,CAAC;IAC3B,IAAIC,QAAQ,GAAG,IAAI,CAACD,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC;IACxCzC,OAAO,CAACC,GAAG,CAACuC,QAAQ,CAAC;IACrB,IAAIE,QAAQ,GAAY,EAAE;IAC1B,KAAI,IAAIZ,GAAG,IAAIU,QAAQ,EAAC;MACtB,IAAIG,QAAQ,GAAGC,UAAU,CAACd,GAAG,CAAC;MAC9BY,QAAQ,CAACtC,IAAI,CAACuC,QAAQ,CAAC;;IAEzB,OAAOD,QAAQ;EACjB;EAEAG,KAAK;IACH,IAAI,CAACR,OAAO,GAAG,IAAI;IACnB,IAAI,CAACS,KAAK,GAAG,KAAK;IAClB,IAAI,CAACR,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACS,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB,IAAI,CAACC,OAAO,GAAG,CAAC;EAElB;EAEAC,cAAc;IACZ,IAAIxB,KAAK,GAAG,IAAI,CAACG,WAAW,EAAE;IAC9B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACX,YAAY,GAAGO,KAAK;IACzB,IAAI,CAACyB,WAAW,GAAGzB,KAAK,CAACnB,MAAM;IAC/B,IAAI,CAACwB,aAAa,GAAG,KAAK;EAC5B;EAEAqB,WAAW;IACT,IAAI,CAACtB,OAAO,GAAG,KAAK;IACpB,IAAI,CAACU,MAAM,GAAG,IAAI;IAClB,IAAIa,MAAM,GAAGhB,UAAU,CAAC,IAAI,CAACL,SAAS,CAAC;IACvC,OAAOqB,MAAM;EACf;EAEAC,UAAU;IACR,IAAIC,MAAM,GAAG,IAAI,CAACH,WAAW,EAAE;IAC/B,IAAI,CAACjC,YAAY,CAACtB,IAAI,CAAC0D,MAAM,CAAC;IAC9B,IAAI,CAACJ,WAAW,IAAI,CAAC;IACrB,IAAI,CAACrB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACU,MAAM,GAAE,KAAK;EACpB;EAEAgB,YAAY;IACV,IAAI,CAAC1B,OAAO,GAAG,KAAK;IACpB,IAAI,CAACS,KAAK,GAAG,IAAI;IACjB,IAAI,CAACpB,YAAY,CAACsC,GAAG,EAAE;EACzB;EAEAC,WAAW;IACT,IAAI,CAAC5B,OAAO,GAAG,KAAK;IACpB,IAAI,CAACW,QAAQ,GAAG,IAAI;IACpB,IAAIkB,OAAO,GAAGtB,UAAU,CAAC,IAAI,CAACuB,UAAU,CAAC;IACzC,IAAIP,MAAM,GAAIhB,UAAU,CAAC,IAAI,CAACL,SAAS,CAAC;IACxC,IAAI6B,KAAK,GAAY,EAAE;IACvB,KAAI,IAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACuB,YAAY,CAACZ,MAAM,EAACX,CAAC,EAAE,EAAC;MAC9C,IAAG,IAAI,CAACuB,YAAY,CAACvB,CAAC,CAAC,IAAI+D,OAAO,EAAC;QACjCE,KAAK,CAAChE,IAAI,CAACD,CAAC,CAAC;;;IAGjBiE,KAAK,CAAChE,IAAI,CAACwD,MAAM,CAAC;IAClB5D,OAAO,CAACC,GAAG,CAACmE,KAAK,CAAC;IAClB,OAAOA,KAAK;EACd;EAEAC,cAAc;IACZ,IAAIrD,IAAI,GAAG,IAAI,CAACiD,WAAW,EAAE;IAC7B,KAAI,IAAI9D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,IAAI,CAACF,MAAM,GAAC,CAAC,EAACX,CAAC,EAAE,EAAC;MACnC,IAAI,CAACuB,YAAY,CAACV,IAAI,CAACb,CAAC,CAAC,CAAC,GAAGa,IAAI,CAACA,IAAI,CAACF,MAAM,GAAC,CAAC,CAAC;;IAElD,IAAI,CAACuB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACW,QAAQ,GAAG,KAAK;EACvB;EAEAsB,YAAY;IACV,IAAI,CAACjC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACY,MAAM,GAAG,IAAI;IAClB,IAAG,IAAI,CAACvB,YAAY,CAACZ,MAAM,IAAI,CAAC,EAAC;MAC/B,IAAI,CAACwC,UAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACD,YAAY,GAAG,CAAC,CAAC;MACtB,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC;KACjB,MACG;MACF,IAAI,CAACF,UAAU,GAAG,IAAI,CAAC5B,YAAY,CAAC,CAAC,CAAC;MACtC,IAAI,CAAC2B,YAAY,GAAG,CAAC;MACrB,IAAG,IAAI,CAAC3B,YAAY,CAACZ,MAAM,IAAI,CAAC,EAAC;QAC/B,IAAI,CAACyC,OAAO,GAAG,CAAC,CAAC;OAClB,MACG;QACF,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC7B,YAAY,CAAC,CAAC,CAAC;;MAErC,IAAI,CAAC8B,OAAO,IAAI,IAAI,CAACF,UAAU;;EAEnC;EAEAiB,MAAM;IACJ,IAAG,IAAI,CAAClB,YAAY,GAAG,IAAI,CAAC3B,YAAY,CAACZ,MAAM,EAAC;MAC9C,IAAI,CAACuC,YAAY,IAAI,CAAC;MACtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAAC5B,YAAY,CAAC,IAAI,CAAC2B,YAAY,CAAC;MACtD,IAAI,CAACG,OAAO,IAAI,IAAI,CAACF,UAAU;MAC/B,IAAItC,IAAI,GAAG,IAAI,CAACsC,UAAU;MAE1B,IAAG,IAAI,CAACD,YAAY,GAAC,CAAC,IAAI,IAAI,CAAC3B,YAAY,CAACZ,MAAM,EAAC;QACjD,IAAI,CAACyC,OAAO,GAAG,cAAc;OAC9B,MACG;QACF,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC7B,YAAY,CAAC,IAAI,CAAC2B,YAAY,CAAC;;KAEtD,MACG;MACF,IAAI,CAACG,OAAO,GAAG,IAAI,CAACA,OAAO;MAC3BgB,KAAK,CAAC,sCAAsC,CAAC;;EAEjD;EAGAC,SAAS;IACP,IAAI,CAACvB,cAAc,GAAG,IAAI;EAE5B;EAEAwB,SAAS;IACP,IAAI,CAACvB,cAAc,GAAG,IAAI;EAC5B;EAEAwB,SAAS;IACP,IAAI,CAACvB,cAAc,GAAG,IAAI;EAC5B;EAEAwB,WAAW;IACT,IAAI,CAACpB,OAAO,GAAG,CAAC;IAChB,IAAI,CAACc,YAAY,EAAE;EACrB;;SAtLWvI,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT5BC,4DAAAA,YAA2B;MACvBA,oDAAAA,uCACJ;MAAAA,0DAAAA,EAAK;MACLA,4DAAAA,WAA2B;MACvBA,oDAAAA,qgBAEJ;MAAAA,0DAAAA,EAAI;MAGJA,4DAAAA,aAAmB;MAEUA,oDAAAA,gBAAS;MAAAA,0DAAAA,EAAI;MACpCA,4DAAAA,aAAoB;MAAGA,oDAAAA,mBAAW;MAAAA,0DAAAA,EAAI;MACtCA,4DAAAA,cAAoB;MAAGA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAI;MAC3CA,4DAAAA,cAAoB;MAAGA,oDAAAA,eAAO;MAAAA,0DAAAA,EAAI;MAEpCA,4DAAAA,cAAiB;MACGA,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAM;MACrCA,4DAAAA,cAAkB;MAAAA,oDAAAA,mGAA2F;MAAAA,0DAAAA,EAAM;MACnHA,4DAAAA,cAAkB;MAAAA,oDAAAA,oDAA4C;MAAAA,0DAAAA,EAAM;MACpEA,4DAAAA,cAAkB;MAAAA,oDAAAA,gBAAU;MAAAA,0DAAAA,EAAM;MAEpCA,4DAAAA,cAAiB;MACGA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAM;MACtCA,4DAAAA,cAAkB;MAAAA,oDAAAA,yKAAiK;MAAAA,0DAAAA,EAAM;MACzLA,4DAAAA,cAAkB;MAAAA,oDAAAA,4EAAoE;MAAAA,0DAAAA,EAAM;MAC5FA,4DAAAA,cAAkB;MAAAA,oDAAAA,0BAAkB;MAAAA,0DAAAA,EAAM;MAG5CA,4DAAAA,cAAiB;MACKA,oDAAAA,+BAAuB;MAAAA,0DAAAA,EAAM;MAC/CA,4DAAAA,cAAkB;MAAAA,oDAAAA,8LAAsL;MAAAA,0DAAAA,EAAM;MAC9MA,4DAAAA,cAAkB;MAAAA,oDAAAA,0GAAkG;MAAAA,0DAAAA,EAAM;MAC1HA,4DAAAA,cAAkB;MAAAA,oDAAAA,mBAAa;MAAAA,0DAAAA,EAAM;MAGzCA,4DAAAA,cAAiB;MACKA,oDAAAA,gCAAwB;MAAAA,0DAAAA,EAAM;MAChDA,4DAAAA,cAAkB;MAAAA,oDAAAA,mRACsH;MAAAA,0DAAAA,EAAM;MAC9IA,4DAAAA,cAAkB;MAAAA,oDAAAA,0GAAkG;MAAAA,0DAAAA,EAAM;MAC1HA,4DAAAA,cAAkB;MAAAA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAM;MAG1CA,4DAAAA,cAAiB;MACKA,oDAAAA,uBAAe;MAAAA,0DAAAA,EAAM;MACvCA,4DAAAA,cAAkB;MAACA,oDAAAA,uOACiI;MAAAA,0DAAAA,EAAM;MAC1JA,4DAAAA,cAAkB;MAAAA,oDAAAA,wCAAgC;MAAAA,0DAAAA,EAAM;MACxDA,4DAAAA,cAAkB;MAAAA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAM;MAG9CA,4DAAAA,cAA2B;MAEzBA,oDAAAA,uDACF;MAAAA,0DAAAA,EAAK;MAELA,4DAAAA,YAA0B;MAAAA,oDAAAA,mPAExB;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,6DAAoD;MAAAA,0DAAAA,EAAI;MAC1DA,4DAAAA,aAA2B;MAAAA,oDAAAA,gDAAsC;MAAAA,0DAAAA,EAAK;MACtEA,4DAAAA,aAA2B;MAAAA,oDAAAA,oDAA0C;MAAAA,0DAAAA,EAAK;MAC1EA,4DAAAA,aAA2B;MAAAA,oDAAAA,4EAAkE;MAAAA,0DAAAA,EAAK;MAClGA,4DAAAA,aAA2B;MAAAA,oDAAAA,4EAAkE;MAAAA,0DAAAA,EAAK;MAClGA,4DAAAA,aAA2B;MAAAA,oDAAAA,sFAA4E;MAAAA,0DAAAA,EAAK;MAC5GA,4DAAAA,aAA2B;MAAAA,oDAAAA,sFAA4E;MAAAA,0DAAAA,EAAK;MAG5GA,4DAAAA,YAA0B;MAAAA,oDAAAA,sDAA8C;MAAAA,0DAAAA,EAAI;MAC5EA,uDAAAA,UAAI;MACJA,4DAAAA,aAA2B;MAAAA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAK;MAC7CA,4DAAAA,aAA2B;MAAAA,oDAAAA,0BAAgB;MAAAA,0DAAAA,EAAK;MAChDA,4DAAAA,aAA2B;MAAAA,oDAAAA,6BAAmB;MAAAA,0DAAAA,EAAK;MACnDA,4DAAAA,aAA2B;MAAAA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAK;MAC7CA,4DAAAA,aAA2B;MAAAA,oDAAAA,qBAAW;MAAAA,0DAAAA,EAAK;MAE3CA,4DAAAA,cAA0B;MAExBA,oDAAAA,8BACF;MAAAA,0DAAAA,EAAK;MACLA,4DAAAA,YAA0B;MAAAA,oDAAAA,kPACwE;MAAAA,0DAAAA,EAAI;MAEtGA,uDAAAA,WAAI;MACJA,4DAAAA,aAA0B;MAAAA,oDAAAA,qDAA4C;MAAAA,0DAAAA,EAAI;MAC1EA,4DAAAA,YAAK;MACHA,oDAAAA;MAAAA,4DAAAA,gBAAmB;MACnBA,oDAAAA,KA6BA;MAAAA,0DAAAA,EAAO;MACTA,oDAAAA;MAAAA,0DAAAA,EAAM;MAEJA,4DAAAA,aAA0B;MACxBA,oDAAAA,sTAGF;MAAAA,0DAAAA,EAAI;MAEJA,4DAAAA,YAAK;MACHA,oDAAAA;MAAAA,4DAAAA,aAAM;MACJA,oDAAAA,iMAOF;MAAAA,0DAAAA,EAAO;MACTA,oDAAAA;MAAAA,0DAAAA,EAAM;MAGRA,4DAAAA,gBAAuB;MAEnBA,oDAAAA,gCACF;MAAAA,0DAAAA,EAAK;MAGNA,4DAAAA,gBAAgC;MACCA,oDAAAA,KAA6B;MAAAA,0DAAAA,EAAM;MAC7DA,4DAAAA,gBAA2B;MACzBA,wDAAAA,wDAIM;MACRA,0DAAAA,EAAM;MAGZA,4DAAAA,gBAAmD;MACjBA,wDAAAA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAACD,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAS;MACjFA,4DAAAA,mBAAuD;MAAxBA,wDAAAA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAACD,oDAAAA,6BAAoB;MAAAA,0DAAAA,EAAS;MACpFA,4DAAAA,mBAAuD;MAAzBA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,6BAAoB;MAAAA,0DAAAA,EAAS;MACpFA,4DAAAA,mBAAyD;MAAxBA,wDAAAA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAACD,oDAAAA,uBAAc;MAAAA,0DAAAA,EAAS;MAIlFA,wDAAAA,yDASM;MAENA,wDAAAA,yDAWM;MAGNA,wDAAAA,wDAOM;MAINA,wDAAAA,yDAWM;MAENA,uDAAAA,WAAI;MAEJA,4DAAAA,gBAAuB;MAE6BA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,iBAAS;MAAAA,0DAAAA,EAAS;MAC3FA,uDAAAA,WAAI;MACNA,0DAAAA,EAAM;MAENA,wDAAAA,yDA8CI;MACRA,0DAAAA,EAAM;MAKNA,uDAAAA,wBAAmC;MAMnCA,4DAAAA,gBAAwB;MACtBA,wDAAAA,0DAA2E;MAC3EA,wDAAAA,sDAEK;MACLA,wDAAAA,wEAAkD;MACpDA,0DAAAA,EAAM;MAGNA,4DAAAA,gBAAwB;MACtBA,wDAAAA,0DAA2E;MAC3EA,wDAAAA,sDAEK;MACLA,wDAAAA,4EAAsD;MACxDA,0DAAAA,EAAM;MAGNA,4DAAAA,gBAAwB;MACtBA,wDAAAA,0DAA2E;MAC3EA,wDAAAA,sDAEK;MACLA,wDAAAA,wEAAkD;MACpDA,0DAAAA,EAAM;MAGNA,4DAAAA,gBAAwB;MACtBA,wDAAAA,0DAA2E;MAC3EA,wDAAAA,sDAEK;MACLA,wDAAAA,wEAAkD;MACpDA,0DAAAA,EAAM;MAGNA,4DAAAA,gBAAwB;MACtBA,wDAAAA,0DAA2E;MAC3EA,wDAAAA,sDAEK;MACLA,wDAAAA,wEAAkD;MACpDA,0DAAAA,EAAM;;;MAzOJA,uDAAAA,KA6BA;MA7BAA,gEAAAA,ypBA6BA;MA6BgCA,uDAAAA,IAA6B;MAA7BA,gEAAAA,uCAA6B;MAEVA,uDAAAA,GAAiB;MAAjBA,wDAAAA,6BAAiB;MAgB7CA,uDAAAA,IAAiD;MAAjDA,wDAAAA,6DAAiD;MAWlDA,uDAAAA,GAA0C;MAA1CA,wDAAAA,sDAA0C;MAc3CA,uDAAAA,GAAyC;MAAzCA,wDAAAA,qDAAyC;MAWtCA,uDAAAA,GAA4C;MAA5CA,wDAAAA,wDAA4C;MAqB9BA,uDAAAA,GAA0C;MAA1CA,wDAAAA,sDAA0C;MA2DzCA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MACtDA,uDAAAA,GAAqB;MAArBA,wDAAAA,6BAAqB;MAGZA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MAKKA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MACtDA,uDAAAA,GAAqB;MAArBA,wDAAAA,6BAAqB;MAGVA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MAKGA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MACtDA,uDAAAA,GAAqB;MAArBA,wDAAAA,6BAAqB;MAGZA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MAKKA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MACtDA,uDAAAA,GAAqB;MAArBA,wDAAAA,6BAAqB;MAGZA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MAKKA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;MACtDA,uDAAAA,GAAqB;MAArBA,wDAAAA,6BAAqB;MAGZA,uDAAAA,GAAoB;MAApBA,wDAAAA,4BAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;IExTxBA,4DAAAA,aAAkE;IAE1DA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IADFA,uDAAAA,GACJ;IADIA,gEAAAA,kBACJ;;;;;IAyBAA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAAkC;IAC9BA,oDAAAA;IAAAA,wDAAAA,8DAEM;IACNA,oDAAAA;IAAAA,wDAAAA,8DAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;AChCvD,MAAOe,kBAAkB;EAL/BhE;IAME,MAAC,GAAW,EAAE;IACd,WAAM,GAAoB,CAAC,CAAC;IAC5B,QAAG,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACzB,QAAG,GAAG,EAAE;IACR,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,KAAK;IAChB,SAAI,GAAG,CAAC,CAAC;IACT,SAAI,GAAG,CAAC,CAAC;;EAETkK,YAAY;IACV,KAAI,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAChE,MAAM,EAAEX,CAAC,EAAE,EAAC;MACtC,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAE,IAAI,CAAC+D,GAAG,CAAChE,MAAM,EAAEC,CAAC,EAAE,EAAC;QACrC,IAAG,IAAI,CAAC+D,GAAG,CAAC3E,CAAC,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAC/D,CAAC,CAAC,IAAI,IAAI,CAACgE,CAAC,EAAC;UACrC,IAAI,CAACC,IAAI,GAAG,IAAI,CAACF,GAAG,CAAC3E,CAAC,CAAC;UACvB,IAAI,CAAC8E,IAAI,GAAG,IAAI,CAACH,GAAG,CAAC/D,CAAC,CAAC;UACvB,IAAI,CAACmE,MAAM,GAAG,CAAC;UACf;;;;IAIN,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;EAClB;EAEAhE,UAAU;IACR,IAAI,IAAI,CAACiE,GAAG,IAAI,KAAK,IAAI,IAAI,CAACA,GAAG,IAAI,SAAS,IAAK,IAAI,CAACA,GAAG,IAAI,OAAO,IAAK,IAAI,CAACA,GAAG,IAAI,MAAM,EAAC;MAC5F,IAAG,IAAI,CAAC/D,MAAM,IAAI,GAAG,IAAI,IAAI,CAACA,MAAM,IAAI,KAAK,IAAI,IAAI,CAACA,MAAM,IAAI,IAAI,EAAC;QACnE,IAAI,CAACE,QAAQ,GAAG,IAAI;;KAGvB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;;SAlCW3C,kBAAkB;;mBAAlBA,MAAkB;AAAA;;QAAlBA,MAAkB;EAAApB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDN/BC,4DAAAA,aAAuB;MACfA,oDAAAA,8BAAuB;MAAAA,0DAAAA,EAAK;MAChCA,4DAAAA,QAAG;MAAAA,oDAAAA,mLAA4K;MAAAA,0DAAAA,EAAI;MAEnLA,4DAAAA,aAAgC;MACFA,oDAAAA,GAA4B;MAAAA,0DAAAA,EAAM;MAC5DA,4DAAAA,aAA2B;MACvBA,wDAAAA,sDAIM;MACVA,0DAAAA,EAAM;MAGVA,uDAAAA,UAAM;MAENA,4DAAAA,WAAK;MACGA,oDAAAA,yBAAiB;MAAAA,0DAAAA,EAAK;MAC1BA,4DAAAA,WAAK;MACLA,oDAAAA;MAAAA,4DAAAA,cAAsB;MAClBA,oDAAAA;MAAAA,4DAAAA,cAAkB;MACdA,oDAAAA;MAAAA,4DAAAA,YAAM;MACtBA,oDAAAA,IACiB;MAAAA,4DAAAA,gBAAqF;MAAlDA,wDAAAA;QAAA;MAAA,EAAiB;QAAA,OAAkBC,gBAAY;MAAA,EAA9B;MAApDD,0DAAAA,EAAqF;MAAAA,oDAAAA,IACxE;MAAAA,4DAAAA,gBAAwF;MAArDA,wDAAAA;QAAA;MAAA,EAAoB;QAAA,OAAkBC,gBAAY;MAAA,EAA9B;MAAvDD,0DAAAA,EAAwF;MAAAA,oDAAAA,IAM1G;MAAAA,0DAAAA,EAAO;MACPA,oDAAAA;MAAAA,0DAAAA,EAAM;MAENA,oDAAAA;MAAAA,wDAAAA,wDAOM;MACVA,oDAAAA;MAAAA,0DAAAA,EAAM;MACNA,oDAAAA;MAAAA,0DAAAA,EAAM;;;MAtCoBA,uDAAAA,GAA4B;MAA5BA,gEAAAA,sCAA4B;MAEPA,uDAAAA,GAAQ;MAARA,wDAAAA,oBAAQ;MAgB/DA,uDAAAA,IACiB;MADjBA,gEAAAA,yEACiB;MAAmCA,uDAAAA,GAAiB;MAAjBA,wDAAAA,oBAAiB;MAAiCA,uDAAAA,GACxE;MADwEA,gEAAAA,sEACxE;MAAmCA,uDAAAA,GAAoB;MAApBA,wDAAAA,uBAAoB;MAAiCA,uDAAAA,GAM1G;MAN0GA,gEAAAA,oHAM1G;MAGuBA,uDAAAA,GAAS;MAATA,wDAAAA,iBAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;IE1BhCA,4DAAAA,cAAkE;IAE1DA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IADFA,uDAAAA,GACJ;IADIA,gEAAAA,kBACJ;;;;;IAYRA,4DAAAA,eAAwC;IAAAA,oDAAAA,GAAY;IAAAA,0DAAAA,EAAO;;;;IAAnBA,uDAAAA,GAAY;IAAZA,+DAAAA,eAAY;;;;;IACpDA,4DAAAA,eAA4C;IAAAA,oDAAAA,GAAoB;IAAAA,0DAAAA,EAAO;;;;IAA3BA,uDAAAA,GAAoB;IAApBA,gEAAAA,0CAAoB;;;;;IAuBxDA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAAkC;IAC9BA,oDAAAA;IAAAA,wDAAAA,4DAEM;IACNA,oDAAAA;IAAAA,wDAAAA,4DAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;AC5CvD,MAAOc,gBAAgB;EAL7B/D;IAME,MAAC,GAAW,EAAE;IACd,WAAM,GAAoB,CAAC,CAAC;IAC5B,QAAG,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IACzB,QAAG,GAAG,EAAE;IACR,aAAQ,GAAG,KAAK;IAChB,SAAI,GAAG,CAAC,CAAC;IACT,SAAI,GAAG,CAAC,CAAC;;EAETkK,YAAY;IACV,KAAI,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAChE,MAAM,EAAEX,CAAC,EAAE,EAAC;MACtC,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAE,IAAI,CAAC+D,GAAG,CAAChE,MAAM,EAAEC,CAAC,EAAE,EAAC;QACrC,IAAG,IAAI,CAAC+D,GAAG,CAAC3E,CAAC,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAC/D,CAAC,CAAC,IAAI,IAAI,CAACgE,CAAC,EAAC;UACrC,IAAI,CAACC,IAAI,GAAG,IAAI,CAACF,GAAG,CAAC3E,CAAC,CAAC;UACvB,IAAI,CAAC8E,IAAI,GAAG,IAAI,CAACH,GAAG,CAAC/D,CAAC,CAAC;UACvB,IAAI,CAACmE,MAAM,GAAG,CAAC;UACf;;;;IAIN,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;EAClB;EAEAhE,UAAU;IACR,IAAI,IAAI,CAACiE,GAAG,IAAI,KAAK,IAAI,IAAI,CAACA,GAAG,IAAI,SAAS,IAAK,IAAI,CAACA,GAAG,IAAI,OAAO,IAAK,IAAI,CAACA,GAAG,IAAI,MAAM,EAAC;MAC5F,IAAI,CAAC7D,QAAQ,GAAG,IAAI;KACrB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;;SA9BW5C,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA,MAAgB;EAAAnB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDL7BC,4DAAAA,aAAuB;MACfA,oDAAAA,kCAA2B;MAAAA,0DAAAA,EAAK;MACpCA,4DAAAA,QAAG;MAAAA,oDAAAA,yKAAkK;MAAAA,0DAAAA,EAAI;MAEzKA,4DAAAA,aAAgC;MACFA,oDAAAA,GAA4B;MAAAA,0DAAAA,EAAM;MAC5DA,4DAAAA,aAA2B;MACvBA,wDAAAA,oDAIM;MACVA,0DAAAA,EAAM;MAGVA,4DAAAA,WAAK;MACmBA,oDAAAA,gBAAQ;MAAAA,0DAAAA,EAAQ;MACpCA,4DAAAA,gBAAoF;MAAnDA,wDAAAA;QAAA;MAAA,EAAe;QAAA,OAAkBC,kBAAc;MAAA,EAAhC;MAAhDD,0DAAAA,EAAoF;MAGxFA,4DAAAA,WAAK;MACmBA,oDAAAA,eAAO;MAAAA,0DAAAA,EAAQ;MACnCA,wDAAAA,wDAA2D;MAC3DA,wDAAAA,wDAAuE;MAC3EA,0DAAAA,EAAM;MAENA,uDAAAA,UAAM;MAENA,4DAAAA,WAAK;MACGA,oDAAAA,yBAAiB;MAAAA,0DAAAA,EAAK;MAC1BA,4DAAAA,WAAK;MACLA,oDAAAA;MAAAA,4DAAAA,eAAsB;MAClBA,oDAAAA;MAAAA,4DAAAA,eAAkB;MACdA,oDAAAA;MAAAA,4DAAAA,YAAM;MACtBA,oDAAAA,IACiB;MAAAA,4DAAAA,iBAAqF;MAAlDA,wDAAAA;QAAA;MAAA,EAAiB;QAAA,OAAkBC,gBAAY;MAAA,EAA9B;MAApDD,0DAAAA,EAAqF;MAAAA,oDAAAA,IAO1F;MAAAA,0DAAAA,EAAO;MACPA,oDAAAA;MAAAA,0DAAAA,EAAM;MAENA,oDAAAA;MAAAA,wDAAAA,uDAOM;MACVA,oDAAAA;MAAAA,0DAAAA,EAAM;MACNA,oDAAAA;MAAAA,0DAAAA,EAAM;;;MAjDoBA,uDAAAA,GAA4B;MAA5BA,gEAAAA,sCAA4B;MAEPA,uDAAAA,GAAQ;MAARA,wDAAAA,oBAAQ;MAUtBA,uDAAAA,GAAe;MAAfA,wDAAAA,kBAAe;MAK7BA,uDAAAA,GAAmB;MAAnBA,wDAAAA,2BAAmB;MAClBA,uDAAAA,GAAsB;MAAtBA,wDAAAA,8BAAsB;MAWlDA,uDAAAA,IACiB;MADjBA,gEAAAA,yEACiB;MAAmCA,uDAAAA,GAAiB;MAAjBA,wDAAAA,oBAAiB;MAAiCA,uDAAAA,GAO1F;MAP0FA,gEAAAA,sMAO1F;MAGuBA,uDAAAA,GAAS;MAATA,wDAAAA,iBAAS;;;;;;;;;;;;;;;;;;;;;;;;;;AE9CqC;;;;;;;;;;;ICgBzEA,4DAAAA,aAAoL;IAChLA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IAF+DA,yDAAAA,mCAAgC;IAArDA,wDAAAA,wBAAoB;IAChEA,uDAAAA,GACJ;IADIA,gEAAAA,yBACJ;;;;;IAmCIA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAAmE;IAC/DA,oDAAAA;IAAAA,wDAAAA,yEAEM;IACNA,oDAAAA;IAAAA,wDAAAA,yEAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;;;;IAhCzDA,4DAAAA,cAAiD;IAE7CA,oDAAAA;IAAAA,4DAAAA,cAAsB;IAClBA,oDAAAA;IAAAA,4DAAAA,cAAkB;IACdA,oDAAAA;IAAAA,4DAAAA,WAAM;IAClBA,oDAAAA,iFACA;IAAAA,uDAAAA,SAAI;IAGJA,oDAAAA,IAQyB;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,oBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IACrG;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,gBAAQ;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IAI5L;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IAGxF;IAAAA,0DAAAA,EAAO;IACPA,oDAAAA;IAAAA,0DAAAA,EAAM;IAENA,oDAAAA;IAAAA,wDAAAA,oEAOM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;IACNA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IA5BVA,uDAAAA,IAQyB;IARzBA,gEAAAA,iRAQyB;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GACrG;IADqGA,gEAAAA,oCACrG;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAA4EA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GAI5L;IAJ4LA,gEAAAA,mDAI5L;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GAGxF;IAHwFA,gEAAAA,mCAGxF;IAGuBA,uDAAAA,GAA0C;IAA1CA,wDAAAA,0EAA0C;;;ADvBnE,MAAOQ,sBAAsB;EAlBnCzD;IAmBE,UAAK,GAAU,EAAE;IACjB,UAAK,GAAG,GAAG;IACX,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,KAAK;IAChB,kBAAa,GAAG,KAAK;IAuCrB,YAAO,GAAY,KAAK;;EArCxB4E,QAAQ;IACN,IAAI,CAACQ,aAAa,EAAE;IACpBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;EACzB;EAEAH,aAAa;IACX,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;QACdC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;QAC1CC,KAAK,EAAE,WAAW;QAClBd,KAAK,EAAE,UAAU;QACjBe,CAAC,EAAEP,CAAC,GAAC,IAAI,CAACQ;OACX,CAAC;;EAEN;EAEMyE,aAAa;IAAA;IAAA;MACjB,KAAI,CAACvE,OAAO,GAAG,KAAK;MACpB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAI,CAACD,KAAK,CAACY,MAAM,EAAEX,CAAC,EAAE,EAAE;QAC1C,IAAG,KAAI,CAACU,OAAO,IAAI,KAAK,EAAC;UACvB,MAAM,IAAIxF,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;UACtD,IAAI+J,GAAG,GAAG,KAAI,CAACnF,KAAK,CAACC,CAAC,CAAC;UACvBkF,GAAG,CAAC1F,KAAK,GAAG,QAAQ;UACpB,MAAM,IAAItE,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;UACtD,IAAIyF,CAAC,GAAGZ,CAAC,GAAG,CAAC;UACb,OAAOY,CAAC,IAAI,CAAC,IAAI,KAAI,CAACb,KAAK,CAACa,CAAC,CAAC,CAACV,KAAK,GAAGgF,GAAG,CAAChF,KAAK,EAAE;YAChD,KAAI,CAACH,KAAK,CAACa,CAAC,GAAG,CAAC,CAAC,GAAG,KAAI,CAACb,KAAK,CAACa,CAAC,CAAC;YACjCA,CAAC,GAAGA,CAAC,GAAG,CAAC;;UAEX,KAAI,CAACb,KAAK,CAACa,CAAC,GAAG,CAAC,CAAC,GAAGsE,GAAG;UACvB,MAAM,IAAIhK,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;UACtD+J,GAAG,CAAC1F,KAAK,GAAG,UAAU;;;IAEzB;EACH;EAIAsB,QAAQ;IACN,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEAK,UAAU;IACR,IAAI,IAAI,CAACC,MAAM,IAAI,GAAG,IAAI,IAAI,CAACA,MAAM,IAAI,KAAK,IAAK,IAAI,CAACA,MAAM,IAAI,IAAI,EAAC;MACrE,IAAG,CAAC,IAAI,CAACC,MAAM,IAAI,KAAK,IAAI,IAAI,CAACA,MAAM,IAAI,SAAS,IAAI,IAAI,CAACA,MAAM,IAAI,MAAM,KAAK,IAAI,CAACC,MAAM,IAAI,IAAI,CAACF,MAAM,IAAI,IAAI,CAACmE,MAAM,IAAI,IAAI,CAAClE,MAAM,EAAC;QACzI,IAAI,CAACE,QAAQ,GAAG,IAAI;;KAEvB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;EAEAC,YAAY;IACV,IAAI,CAACC,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;EAC1C;;SAlEWpD,sBAAsB;;mBAAtBA,MAAsB;AAAA;;QAAtBA,MAAsB;EAAAb;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC1BnCC,4DAAAA,aAA4B;MAIhBA,oDAAAA,iCACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAAmD;MAA1BA,wDAAAA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,oDAAAA,qBAAc;MAAAA,0DAAAA,EAAS;MAC1EA,4DAAAA,gBAAwD;MAA1BA,wDAAAA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,oDAAAA,yBAAkB;MAAAA,0DAAAA,EAAS;MACnFA,4DAAAA,gBAAoD;MAArBA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,oDAAAA,WAAI;MAAAA,0DAAAA,EAAS;MACjEA,4DAAAA,iBAAwD;MAAzBA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAS;MAGlFA,4DAAAA,cAAuB;MACnBA,wDAAAA,4DAEM;MACVA,0DAAAA,EAAM;MAKVA,wDAAAA,6DAsCM;;;MA9CwCA,uDAAAA,IAAQ;MAARA,wDAAAA,sBAAQ;MAQ1BA,uDAAAA,GAAmB;MAAnBA,wDAAAA,2BAAmB;;;;;;eDTjC,CACVkC,4DAAO,CAAC,MAAM,EAAE,CACdH,0DAAK,CAAC,UAAU,EAAEC,0DAAK,CAAC;MACtB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EACH9B,0DAAK,CAAC,QAAQ,EAAEC,0DAAK,CAAC;MACpB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EAEH5B,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,EAC/CG,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,CAChD,CAAC;EACH;AAAA;;;;;;;;;;;;;;;;;;;;;;;IEnBS9B,4DAAAA,aAAkE;IAE1DA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IADFA,uDAAAA,GACJ;IADIA,gEAAAA,kBACJ;;;;;IAuBAA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAAqC;IACjCA,oDAAAA;IAAAA,wDAAAA,4DAEM;IACNA,oDAAAA;IAAAA,wDAAAA,4DAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;AC/BvD,MAAOgB,gBAAgB;EAL7BjE;IAME,MAAC,GAAW,EAAE;IACd,WAAM,GAAoB,CAAC,CAAC;IAC5B,QAAG,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,CAAC;IAE1B,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,KAAK;IAChB,SAAI,GAAG,CAAC,CAAC;IACT,SAAI,GAAG,CAAC,CAAC;;EAETkK,YAAY;IACV,KAAI,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAChE,MAAM,EAAEX,CAAC,EAAE,EAAC;MACtC,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAE,IAAI,CAAC+D,GAAG,CAAChE,MAAM,EAAEC,CAAC,EAAE,EAAC;QACrC,IAAG,IAAI,CAAC+D,GAAG,CAAC3E,CAAC,CAAC,GAAG,IAAI,CAAC2E,GAAG,CAAC/D,CAAC,CAAC,IAAI,IAAI,CAACgE,CAAC,EAAC;UACrC,IAAI,CAACC,IAAI,GAAG,IAAI,CAACF,GAAG,CAAC3E,CAAC,CAAC;UACvB,IAAI,CAAC8E,IAAI,GAAG,IAAI,CAACH,GAAG,CAAC/D,CAAC,CAAC;UACvB,IAAI,CAACmE,MAAM,GAAG,CAAC;UACf;;;;IAIN,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;EAClB;EAEAhE,UAAU;IACR,IAAG,IAAI,CAACE,MAAM,IAAI,GAAG,IAAI,IAAI,CAACA,MAAM,IAAI,KAAK,IAAI,IAAI,CAACA,MAAM,IAAI,IAAI,EAAC;MACnE,IAAI,CAACE,QAAQ,GAAG,IAAI;KACrB,MAEG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;;SAhCW1C,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA,MAAgB;EAAArB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDN7BC,4DAAAA,aAAuB;MACfA,oDAAAA,2CAAoC;MAAAA,0DAAAA,EAAK;MAC7CA,4DAAAA,QAAG;MAAAA,oDAAAA,iLACH;MAAAA,0DAAAA,EAAI;MAEJA,4DAAAA,aAAgC;MACFA,oDAAAA,GAA4B;MAAAA,0DAAAA,EAAM;MAC5DA,4DAAAA,aAA2B;MACvBA,wDAAAA,oDAIM;MACVA,0DAAAA,EAAM;MAGVA,uDAAAA,UAAM;MAENA,4DAAAA,WAAK;MACGA,oDAAAA,yBAAiB;MAAAA,0DAAAA,EAAK;MAC1BA,4DAAAA,WAAK;MACLA,oDAAAA;MAAAA,4DAAAA,cAAsB;MAClBA,oDAAAA;MAAAA,4DAAAA,cAAkB;MACdA,oDAAAA;MAAAA,4DAAAA,YAAM;MACtBA,oDAAAA,IACoB;MAAAA,4DAAAA,gBAAwF;MAArDA,wDAAAA;QAAA;MAAA,EAAoB;QAAA,OAAkBC,gBAAY;MAAA,EAA9B;MAAvDD,0DAAAA,EAAwF;MAAAA,oDAAAA,IAKhG;MAAAA,0DAAAA,EAAO;MACPA,oDAAAA;MAAAA,0DAAAA,EAAM;MAENA,oDAAAA;MAAAA,wDAAAA,sDAOM;MACVA,oDAAAA;MAAAA,0DAAAA,EAAM;MACNA,oDAAAA;MAAAA,0DAAAA,EAAM;;;MApCoBA,uDAAAA,GAA4B;MAA5BA,gEAAAA,sCAA4B;MAEPA,uDAAAA,GAAQ;MAARA,wDAAAA,oBAAQ;MAgB/DA,uDAAAA,IACoB;MADpBA,gEAAAA,0EACoB;MAAmCA,uDAAAA,GAAoB;MAApBA,wDAAAA,uBAAoB;MAAiCA,uDAAAA,GAKhG;MALgGA,gEAAAA,4FAKhG;MAGuBA,uDAAAA,GAAY;MAAZA,wDAAAA,oBAAY;;;;;;;;;;;;;;;;;;;;;;;;;;AEjCkC;;;;;;;;;;;;ICczEA,4DAAAA,aAA8L;IAC1LA,oDAAAA,GACF;IAAAA,0DAAAA,EAAM;;;;IAFyCA,yDAAAA,mCAAgC;IAACA,wDAAAA,YAAAA,6DAAAA,wEAA2G;IACzLA,uDAAAA,GACF;IADEA,gEAAAA,yBACF;;;;;IAmCEA,4DAAAA,cAAkD;IAC9CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,0BAAmB;IAAAA,0DAAAA,EAAI;IAC9BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IACNA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,4DAAAA,QAAG;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAI;IAC3BA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;;IANVA,4DAAAA,cAA+C;IAC3CA,oDAAAA;IAAAA,wDAAAA,yEAEM;IACNA,oDAAAA;IAAAA,wDAAAA,yEAEM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IAN+BA,uDAAAA,GAAe;IAAfA,wDAAAA,0BAAe;IAGjBA,uDAAAA,GAAc;IAAdA,wDAAAA,yBAAc;;;;;;IAhCzDA,4DAAAA,cAAiD;IAE7CA,oDAAAA;IAAAA,4DAAAA,cAAsB;IAClBA,oDAAAA;IAAAA,4DAAAA,cAAkB;IACdA,oDAAAA;IAAAA,4DAAAA,WAAM;IAClBA,oDAAAA,iFACA;IAAAA,uDAAAA,SAAI;IAEJA,oDAAAA,IAMyB;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,oBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAAAA,oDAAAA,IACrG;IAAAA,4DAAAA,iBAAwF;IAArDA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;MAAAA,2DAAAA;MAAA;MAAA,OAAkBA,yDAAAA,qBAAY;IAAA,EAA9B;IAAvDA,0DAAAA,EAAwF;IAACA,oDAAAA,IAU7F;IAAAA,0DAAAA,EAAO;IACPA,oDAAAA;IAAAA,0DAAAA,EAAM;IAENA,oDAAAA;IAAAA,wDAAAA,oEAOM;IACVA,oDAAAA;IAAAA,0DAAAA,EAAM;IACNA,oDAAAA;IAAAA,0DAAAA,EAAM;;;;IA7BVA,uDAAAA,IAMyB;IANzBA,gEAAAA,0OAMyB;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAiCA,uDAAAA,GACrG;IADqGA,gEAAAA,8BACrG;IAAmCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAAkCA,uDAAAA,GAU7F;IAV6FA,gEAAAA,uNAU7F;IAGuBA,uDAAAA,GAAsB;IAAtBA,wDAAAA,wCAAsB;;;ADrB/C,MAAOS,sBAAsB;EAlBnC1D;IAmBE,UAAK,GAAU,EAAE;IACjB,UAAK,GAAG,GAAG;IACX,gBAAW,GAAG,CAAC,CAAC;IAChB,WAAM,GAAG,EAAE;IACX,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,KAAK;IAChB,kBAAa,GAAG,KAAK;IAqDrB,YAAO,GAAY,KAAK;;EAnDxB4E,QAAQ;IACN,IAAI,CAACQ,aAAa,EAAE;EACtB;EAEAA,aAAa;IACX,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;QACdC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;QAC1CC,KAAK,EAAE,WAAW;QAClBd,KAAK,EAAE,UAAU;QACjBe,CAAC,EAAEP,CAAC,GAAC,IAAI,CAACQ;OACX,CAAC;;EAEN;EAEM4E,aAAa;IAAA;IAAA;MACjB,KAAI,CAAC1E,OAAO,GAAG,KAAK;MACpB,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAI,CAACD,KAAK,CAACY,MAAM,GAAG,CAAC,EAAEX,CAAC,EAAE,EAAE;QAC9C,IAAI,KAAI,CAACU,OAAO,KAAK,KAAK,EAAE;UAC1B,IAAI2E,QAAQ,GAAGrF,CAAC;UAChB,KAAK,IAAIY,CAAC,GAAGZ,CAAC,GAAG,CAAC,EAAEY,CAAC,GAAG,KAAI,CAACb,KAAK,CAACY,MAAM,EAAEC,CAAC,EAAE,EAAE;YAC9C,KAAI,CAACb,KAAK,CAACa,CAAC,CAAC,CAACpB,KAAK,GAAG,QAAQ;YAC9B,MAAM,IAAItE,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;YACtD,IAAI,KAAI,CAAC4E,KAAK,CAACa,CAAC,CAAC,CAACV,KAAK,GAAG,KAAI,CAACH,KAAK,CAACsF,QAAQ,CAAC,CAACnF,KAAK,EAAE;cACpDmF,QAAQ,GAAGzE,CAAC;;YAEd,KAAI,CAACb,KAAK,CAACa,CAAC,CAAC,CAACpB,KAAK,GAAG,UAAU;;UAGlC,IAAI6F,QAAQ,KAAKrF,CAAC,EAAE;YAClB,KAAI,CAACD,KAAK,CAACC,CAAC,CAAC,CAACR,KAAK,GAAG,QAAQ;YAC9B,KAAI,CAACO,KAAK,CAACsF,QAAQ,CAAC,CAAC7F,KAAK,GAAG,QAAQ;YACrC,MAAM,IAAItE,OAAO,CAACC,OAAO,IAAIE,UAAU,CAACF,OAAO,EAAE,GAAG,CAAC,CAAC;YACtD,MAAM0F,IAAI,GAAG,KAAI,CAACd,KAAK,CAACC,CAAC,CAAC;YAC1B,KAAI,CAACD,KAAK,CAACC,CAAC,CAAC,GAAG,KAAI,CAACD,KAAK,CAACsF,QAAQ,CAAC;YACpC,KAAI,CAACtF,KAAK,CAACsF,QAAQ,CAAC,GAAGxE,IAAI;YAC3B,KAAI,CAACd,KAAK,CAACC,CAAC,CAAC,CAACR,KAAK,GAAG,UAAU;YAChC,KAAI,CAACO,KAAK,CAACsF,QAAQ,CAAC,CAAC7F,KAAK,GAAG,UAAU;YACvC;;;UAEF,KAAK,IAAIoF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,KAAI,CAAC7E,KAAK,CAACY,MAAM,EAAEiE,CAAC,EAAE,EAAE;YAC1C,IAAIA,CAAC,IAAI5E,CAAC,EAAE;cACV,KAAI,CAACD,KAAK,CAAC6E,CAAC,CAAC,CAACpF,KAAK,GAAG,UAAU;;;;;IAIvC;EACH;EAKAsB,QAAQ;IACN,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEAK,UAAU;IACR,IAAI,IAAI,CAACC,MAAM,IAAI,UAAU,IAAI,IAAI,CAACC,MAAM,IAAI,IAAI,CAACD,MAAM,EAAC;MAC1D,IAAI,CAACG,QAAQ,GAAG,IAAI;KACrB,MACG;MACF,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;EAEAC,YAAY;IACV,IAAI,CAACC,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;EAC1C;;SA7EWnD,sBAAsB;;mBAAtBA,MAAsB;AAAA;;QAAtBA,MAAsB;EAAAd;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MC5BnCC,4DAAAA,aAA4B;MAIhBA,oDAAAA,iCACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAAmD;MAA1BA,wDAAAA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,4DAAAA,QAAG;MAAAA,oDAAAA,qBAAc;MAAAA,0DAAAA,EAAI;MACxEA,4DAAAA,gBAAwD;MAA1BA,wDAAAA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,4DAAAA,QAAG;MAAAA,oDAAAA,yBAAkB;MAAAA,0DAAAA,EAAI;MACjFA,4DAAAA,iBAAoD;MAArBA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,oDAAAA,YAAI;MAAAA,0DAAAA,EAAS;MACjEA,4DAAAA,iBAAwD;MAAzBA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAS;MAGlFA,4DAAAA,cAAuB;MACnBA,wDAAAA,4DAEQ;MACZA,0DAAAA,EAAM;MAKVA,wDAAAA,6DAsCM;;;MA9CwCA,uDAAAA,IAAQ;MAARA,wDAAAA,sBAAQ;MAQ1BA,uDAAAA,GAAmB;MAAnBA,wDAAAA,2BAAmB;;;;;;eDPjC,CACVkC,4DAAO,CAAC,MAAM,EAAE,CACdH,0DAAK,CAAC,UAAU,EAAEC,0DAAK,CAAC;MACtB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EACH9B,0DAAK,CAAC,QAAQ,EAAEC,0DAAK,CAAC;MACpB6B,eAAe,EAAE;KAClB,CAAC,CAAC,EAEH5B,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,EAC/CG,+DAAU,CAAC,oBAAoB,EAAEH,4DAAO,CAAC,IAAI,CAAC,CAAC,CAChD,CAAC;EACH;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEnBG9B,4DAAAA,cAAgE;IAE5DA,oDAAAA,GACF;IAAAA,0DAAAA,EAAM;;;;;;;IAFDA,uDAAAA,GAAiH;IAAjHA,wDAAAA,YAAAA,6DAAAA,8GAAiH;IACpHA,uDAAAA,GACF;IADEA,gEAAAA,mBACF;;;;;IAJJA,4DAAAA,cAAgE;IAC9DA,wDAAAA,0DAIM;IACRA,0DAAAA,EAAM;;;;IALkBA,uDAAAA,GAAQ;IAARA,wDAAAA,mBAAQ;;;;;;IAiBpCA,4DAAAA,cAAqE;IAE3CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,YAAO;IAAAA,oDAAAA,yDAAkD;IAAAA,0DAAAA,EAAQ;IACjEA,4DAAAA,gBAAiF;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAA/EA,0DAAAA,EAAiF;IACjFA,uDAAAA,SAAM;IACNA,4DAAAA,iBAAmE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,yBAAgB;IAAA,EAAC;IAACA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;;;;IAFhCA,uDAAAA,GAAuB;IAAvBA,wDAAAA,6BAAuB;;;;;;IAMrFA,4DAAAA,cAAsE;IAE1CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,YAAO;IAAAA,oDAAAA,oDAA6C;IAAAA,0DAAAA,EAAQ;IAC5DA,4DAAAA,gBAAmE;IAA1BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAwB;IAAjEA,0DAAAA,EAAmE;IACnEA,uDAAAA,SAAI;IACJA,4DAAAA,YAAO;IAAAA,oDAAAA,oCAA4B;IAAAA,0DAAAA,EAAQ;IAC3CA,4DAAAA,iBAA8D;IAAvBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAqB;IAA5DA,0DAAAA,EAA8D;IAC9DA,uDAAAA,UAAI;IACJA,4DAAAA,kBAAkE;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,uBAAc;IAAA,EAAC;IAACA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;;;;IAL9CA,uDAAAA,GAAwB;IAAxBA,wDAAAA,8BAAwB;IAG1BA,uDAAAA,GAAqB;IAArBA,wDAAAA,2BAAqB;;;;;IAe9DA,4DAAAA,cAAkD;IAChDA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IADFA,uDAAAA,GACJ;IADIA,gEAAAA,8FACJ;;;;;;IAXJA,4DAAAA,cAAuE;IAE7CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,YAAO;IAAAA,oDAAAA,gEAAyD;IAAAA,0DAAAA,EAAQ;IACxEA,4DAAAA,gBAAqE;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAAnEA,0DAAAA,EAAqE;IACrEA,uDAAAA,SAAM;IACNA,4DAAAA,iBAAmE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,yBAAgB;IAAA,EAAC;IAACA,oDAAAA,wBAAgB;IAAAA,0DAAAA,EAAS;IAE5FA,wDAAAA,6DAEI;IACNA,0DAAAA,EAAM;;;;IAPwCA,uDAAAA,GAAuB;IAAvBA,wDAAAA,6BAAuB;IAItCA,uDAAAA,GAAmB;IAAnBA,wDAAAA,8BAAmB;;;;;IAkBlDA,4DAAAA,cAAkD;IAChDA,oDAAAA,GACJ;IAAAA,0DAAAA,EAAM;;;;IADFA,uDAAAA,GACJ;IADIA,gEAAAA,oJACJ;;;;;;IAbFA,4DAAAA,cAAuE;IAE/CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,YAAO;IAAAA,oDAAAA,0CAAmC;IAAAA,0DAAAA,EAAQ;IAClDA,4DAAAA,gBAAkE;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;IAAhEA,0DAAAA,EAAkE;IAClEA,4DAAAA,YAAO;IAAAA,oDAAAA,6CAAsC;IAAAA,0DAAAA,EAAQ;IACrDA,4DAAAA,gBAAkE;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;IAAhEA,0DAAAA,EAAkE;IAClEA,uDAAAA,UAAM;IACNA,4DAAAA,kBAAgE;IAAxBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,sBAAa;IAAA,EAAC;IAACA,oDAAAA,wBAAgB;IAAAA,0DAAAA,EAAS;IAEzFA,wDAAAA,6DAEI;IACNA,0DAAAA,EAAM;;;;IATwCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAEpBA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;IAInCA,uDAAAA,GAAmB;IAAnBA,wDAAAA,8BAAmB;;;;;;IAYhDA,4DAAAA,cAAgF;IAC1DA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,cAAuB;IACIA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,iBAAQ;IAAA,EAAC;IAACA,oDAAAA,WAAI;IAAAA,0DAAAA,EAAS;IAAAA,uDAAAA,SAAI;IAE7DA,4DAAAA,cAAqB;IAAGA,oDAAAA,kCAA2B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAW;IAAAA,0DAAAA,EAAM;IACxEA,4DAAAA,eAAqB;IAAGA,oDAAAA,sCAA8B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAW;IAAAA,0DAAAA,EAAM;IAC3EA,uDAAAA,UAAI;IACJA,4DAAAA,eAAwB;IAAGA,oDAAAA,sCAA8B;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAc;IAAAA,0DAAAA,EAAM;IACjFA,4DAAAA,eAAwB;IAAGA,oDAAAA,qBAAa;IAAAA,0DAAAA,EAAI;IAAAA,oDAAAA,IAAW;IAAAA,0DAAAA,EAAM;IAE7DA,uDAAAA,UAAI;IACJA,4DAAAA,kBAAkD;IAAxBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,sBAAa;IAAA,EAAC;IAACA,oDAAAA,wBAAgB;IAAAA,0DAAAA,EAAS;IAG7EA,4DAAAA,cAAgC;IAAAA,oDAAAA,4BAAoB;IAAAA,0DAAAA,EAAK;IACzDA,4DAAAA,WAAK;IAEDA,oDAAAA,qEAA4D;IAAAA,uDAAAA,UAAI;IAChEA,oDAAAA,yEAAgE;IAAAA,uDAAAA,UAAI;IACpEA,oDAAAA,0CAAiC;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,6BAEpC;IAAAA,0DAAAA,EAAI;IAAAA,uDAAAA,UAAI;IAERA,oDAAAA,0EAAiE;IAAAA,uDAAAA,UAAI;IAErEA,oDAAAA,gFAAuE;IAAAA,uDAAAA,UAAI;IAC7EA,0DAAAA,EAAI;IAEJA,4DAAAA,gBAAoB;IAAAA,oDAAAA,iBAAS;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,0CAAkC;IAAAA,0DAAAA,EAAI;IACtEA,uDAAAA,UAAI;IAEJA,4DAAAA,UAAI;IAAGA,oDAAAA,eAAO;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,mCAA0B;IAAAA,0DAAAA,EAAK;IAClDA,uDAAAA,UAAI;IACJA,4DAAAA,UAAI;IAAGA,oDAAAA,sBAAc;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uLAC2B;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,4CAAoC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uCAA8B;IAAAA,uDAAAA,UAAI;IAAAA,0DAAAA,EAAK;IACxIA,4DAAAA,UAAI;IAAGA,oDAAAA,WAAG;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAAIA,0DAAAA,EAAK;IAE/FA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,SAAC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,6BAAoB;IAAAA,uDAAAA,UAAI;IACzCA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,cAAM;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uDAA8C;IAAAA,uDAAAA,UAAI;IACxEA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAEzEA,0DAAAA,EAAM;;;;IArCmDA,uDAAAA,IAAW;IAAXA,+DAAAA,gBAAW;IACRA,uDAAAA,GAAW;IAAXA,+DAAAA,gBAAW;IAERA,uDAAAA,GAAc;IAAdA,+DAAAA,mBAAc;IAC/BA,uDAAAA,GAAW;IAAXA,+DAAAA,gBAAW;;;AC1FzD,MAAO5B,eAAe;EAL5BrB;IAME,UAAK,GAAe,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrD,cAAS,GAAW,IAAI,CAACsH,KAAK,CAACnB,MAAM;IACrC,cAAS,GAAW,IAAI,CAACmB,KAAK,CAAC,CAAC,CAAC,CAACnB,MAAM;IAExC,aAAQ,GAAY,KAAK;IACzB,aAAQ,GAAY,KAAK;IACzB,eAAU,GAAY,KAAK;IAC3B,kBAAa,GAAY,KAAK;IAC9B,kBAAa,GAAY,KAAK;IAC9B,WAAM,GAAY,KAAK;IACvB,eAAU,GAAY,KAAK;IAE3B,YAAO,GAAY,IAAI;IAEvB,cAAS,GAAW,EAAE;IACtB,YAAO,GAAW,CAAC;IACnB,eAAU,GAAW,CAAC;IACtB,cAAS,GAAW,CAAC;IACrB,WAAM,GAAW,CAAC,CAAC;IACnB,WAAM,GAAY,CAAC,CAAC;IA+FpB,YAAO,GAAW,CAAC;IACnB,YAAO,GAAW,CAAC;IACnB,eAAU,GAAW,IAAI,CAACmB,KAAK,CAAC,IAAI,CAACwD,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,CAAC;IAC3D,YAAO,GAAW,CAAC;;EA9FnB7C,KAAK;IACH,IAAI,CAACR,OAAO,GAAG,IAAI;IACnB,IAAI,CAACsD,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC3C,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC4C,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAAC5C,MAAM,GAAG,KAAK;EACrB;EAGAb,WAAW;IACT,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACsD,QAAQ,GAAG,IAAI;IACpB,MAAM3E,IAAI,GAAG8E,IAAI,CAACC,KAAK,CAAC,IAAI,CAACxD,SAAS,CAACP,QAAQ,EAAE,CAAe;IAChE,OAAOhB,IAAI;EACb;EAEAyC,cAAc;IACZ,IAAIzC,IAAI,GAAG,IAAI,CAACoB,WAAW,EAAE;IAC7B,IAAI,CAACH,KAAK,GAAGjB,IAAI;IAEjB,IAAI,CAACgF,SAAS,GAAE,IAAI,CAAC/D,KAAK,CAACnB,MAAM;IACjC,IAAI,CAACmF,SAAS,GAAG,IAAI,CAAChE,KAAK,CAAC,CAAC,CAAC,CAACnB,MAAM;IACrC,IAAI,CAAC6E,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACtD,OAAO,GAAG,IAAI;EACrB;EAEA6D,MAAM;IACJ,IAAI,CAAClD,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACX,OAAO,GAAG,KAAK;IAEpB,IAAIrB,IAAI,GAAG4B,UAAU,CAAC,IAAI,CAACuD,UAAU,CAACnE,QAAQ,EAAE,CAAC;IACjD,IAAI3B,KAAK,GAAGuC,UAAU,CAAC,IAAI,CAACwD,OAAO,CAACpE,QAAQ,EAAE,CAAC;IAC/ChC,OAAO,CAACC,GAAG,CAACe,IAAI,CAAC;IAEjB,IAAIoD,KAAK,GAAe,CAAC,CAAC/D,KAAK,EAACA,KAAK,CAAC,CAAC;IACvC,KAAI,IAAIF,CAAC,GAAG,CAAC,EAACA,CAAC,GAAC,IAAI,CAAC6F,SAAS,EAAC7F,CAAC,EAAE,EAAC;MACjC,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACkF,SAAS,EAAClF,CAAC,EAAE,EAAC;QAClC,IAAG,IAAI,CAACkB,KAAK,CAAC9B,CAAC,CAAC,CAACY,CAAC,CAAC,IAAGC,IAAI,EAAC;UACzBoD,KAAK,CAAChE,IAAI,CAAC,CAACD,CAAC,EAACY,CAAC,CAAC,CAAC;;;;IAIvB,OAAOqD,KAAK;EACd;EAEAiC,YAAY;IACV,IAAIrF,IAAI,GAAE,IAAI,CAACkF,MAAM,EAAE;IACvB,KAAI,IAAI/F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACa,IAAI,CAACF,MAAM,EAACX,CAAC,EAAE,EAAC;MAC/B,IAAIiE,KAAK,GAAGpD,IAAI,CAACb,CAAC,CAAC;MACnB,IAAI,CAAC8B,KAAK,CAACmC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGpD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAG7C,IAAI,CAACqB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACW,QAAQ,GAAG,KAAK;EACvB;EAEAsD,QAAQ;IACN,IAAI,CAACV,UAAU,GAAG,IAAI;IACtB,IAAI,CAACvD,OAAO,GAAG,KAAK;IACpB,KAAI,IAAIlC,CAAC,GAAG,CAAC,EAACA,CAAC,GAAC,IAAI,CAAC6F,SAAS,EAAC7F,CAAC,EAAE,EAAC;MACjC,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACkF,SAAS,EAAClF,CAAC,EAAE,EAAC;QAClC,IAAG,IAAI,CAACkB,KAAK,CAAC9B,CAAC,CAAC,CAACY,CAAC,CAAC,IAAG,IAAI,CAACwF,SAAS,EAAC;UACnC,OAAO,CAACpG,CAAC,EAACY,CAAC,CAAC;;;;IAIlB,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAChB;EAEAyF,cAAc;IACZ,IAAIxF,IAAI,GAAG,IAAI,CAACsF,QAAQ,EAAE;IAC1B,IAAGtF,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC;MACfwD,KAAK,CAAC,yBAAyB,CAAC;;IAElC,IAAI,CAACiC,MAAM,GAAGzF,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,CAAC0F,MAAM,GAAG1F,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,CAAC2F,aAAa,GAAG,IAAI;EAC3B;EAEAC,QAAQ;IACN,IAAI,CAACvE,OAAO,GAAG,KAAK;IACpB,IAAI,CAACwD,UAAU,GAAG,IAAI;IACtB,IAAI,CAACa,MAAM,GAAG9D,UAAU,CAAC,IAAI,CAAC8D,MAAM,CAAC1E,QAAQ,EAAE,CAAC;IAChD,IAAI,CAACyE,MAAM,GAAG7D,UAAU,CAAC,IAAI,CAAC6D,MAAM,CAACzE,QAAQ,EAAE,CAAC;EAClD;EAEA6E,WAAW;IACT,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EAOAxC,YAAY;IACV,IAAI,CAACrB,MAAM,GAAG,IAAI;IAClB,IAAI,CAACZ,OAAO,GAAG,KAAK;IACpB,IAAI,CAACoD,OAAO,IAAI,CAAC;IACjB,IAAI,CAACC,OAAO,IAAI,CAAC;IACjB,IAAI,CAACpC,UAAU,GAAG,IAAI,CAACrB,KAAK,CAAC,IAAI,CAACwD,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,CAAC;IACxD,IAAI,CAAClC,OAAO,IAAI,IAAI,CAACF,UAAU;EAEjC;EAEAiB,MAAM;IACJ,IAAG,IAAI,CAACmB,OAAO,IAAK,IAAI,CAACO,SAAS,IAAI,IAAI,CAACR,OAAO,IAAI,IAAI,CAACO,SAAS,EAAC;MACnE;;IAEF,IAAG,IAAI,CAACN,OAAO,GAAG,IAAI,CAACO,SAAS,GAAC,CAAC,EAAC;MACjC,IAAI,CAACP,OAAO,IAAI,CAAC;MACjB,IAAI,CAACpC,UAAU,GAAG,IAAI,CAACrB,KAAK,CAAC,IAAI,CAACwD,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,CAAC;MACxD,IAAI,CAAClC,OAAO,IAAI,IAAI,CAACF,UAAU;KAChC,MACG;MACF,IAAI,CAACmC,OAAO,IAAI,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC;MAChB,IAAI,CAACpC,UAAU,GAAG,IAAI,CAACrB,KAAK,CAAC,IAAI,CAACwD,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,CAAC;MACxD,IAAI,CAAClC,OAAO,IAAI,IAAI,CAACF,UAAU;;EAEnC;EAEAsB,WAAW;IACT,IAAI,CAACpB,OAAO,GAAG,CAAC;IAChB,IAAI,CAACc,YAAY,EAAE;EACrB;;SAtJWtI,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDR5BC,4DAAAA,YAA2B;MACvBA,oDAAAA,+BACJ;MAAAA,0DAAAA,EAAK;MAELA,4DAAAA,aAA6B;MAErBA,oDAAAA,0CAAkC;MAAAA,uDAAAA,SAAI;MAACA,oDAAAA,GAC3C;MAAAA,0DAAAA,EAAM;MACNA,wDAAAA,mDAMM;MACVA,0DAAAA,EAAM;MAGNA,4DAAAA,aAA8B;MACMA,wDAAAA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAI;MAASA,uDAAAA,UAAI;MAC5FA,4DAAAA,iBAAuC;MAAnBA,wDAAAA;QAAA,OAASC,YAAQ;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAI;MAC5DA,4DAAAA,iBAAyC;MAArBA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,0BAAkB;MAAAA,0DAAAA,EAAI;MAClEA,4DAAAA,iBAAyC;MAArBA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,4BAAoB;MAAAA,0DAAAA,EAAI;MAIxEA,wDAAAA,sDASM;MAENA,wDAAAA,sDAWM;MAENA,wDAAAA,uDAaM;MAGNA,wDAAAA,uDAeM;MAENA,4DAAAA,eAAuB;MAE+BA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,gBAAS;MAAAA,0DAAAA,EAAS;MAC3FA,uDAAAA,UAAI;MACNA,0DAAAA,EAAM;MAENA,wDAAAA,uDA2CI;MACRA,0DAAAA,EAAM;MAENA,4DAAAA,aAA2B;MACzBA,oDAAAA,sBACF;MAAAA,0DAAAA,EAAK;MAELA,uDAAAA,uBAAmC;;;MArIYA,uDAAAA,GAC3C;MAD2CA,gEAAAA,+CAC3C;MACqBA,uDAAAA,GAAU;MAAVA,wDAAAA,sBAAU;MAkBZA,uDAAAA,IAA4C;MAA5CA,wDAAAA,wDAA4C;MAW3CA,uDAAAA,GAA4C;MAA5CA,wDAAAA,wDAA4C;MAa7CA,uDAAAA,GAA8C;MAA9CA,wDAAAA,0DAA8C;MAgB9CA,uDAAAA,GAA8C;MAA9CA,wDAAAA,0DAA8C;MAuB7BA,uDAAAA,GAA0C;MAA1CA,wDAAAA,sDAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEzE1EA,4DAAAA,cAA8D;IAE1DA,oDAAAA,GACF;IAAAA,0DAAAA,EAAM;;;;IADJA,uDAAAA,GACF;IADEA,gEAAAA,oBACF;;;;;IAbNA,4DAAAA,aAA4D;IAGtDA,oDAAAA,GACF;IAAAA,0DAAAA,EAAM;IAGRA,uDAAAA,cAA8B;IAE9BA,4DAAAA,cAAyB;IACvBA,wDAAAA,2DAKM;IACRA,0DAAAA,EAAM;;;;;IAbFA,uDAAAA,GACF;IADEA,gEAAAA,kBACF;IAMuBA,uDAAAA,GAAmB;IAAnBA,wDAAAA,uCAAmB;;;;;;IAehDA,4DAAAA,cAAsE;IAE9CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,iBAAS;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEtDA,4DAAAA,YAAO;IAAAA,oDAAAA,6BAAsB;IAAAA,0DAAAA,EAAQ;IACrCA,4DAAAA,gBAAuE;IAAnBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAiB;IAArEA,0DAAAA,EAAuE;IACvEA,uDAAAA,SAAI;IACJA,4DAAAA,YAAO;IAAAA,oDAAAA,mCAA4B;IAAAA,0DAAAA,EAAQ;IAC3CA,4DAAAA,iBAAyE;IAArBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAmB;IAAvEA,0DAAAA,EAAyE;IACzEA,uDAAAA,UAAM;IACNA,4DAAAA,kBAAqE;IAA7BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,2BAAkB;IAAA,EAAC;IAACA,oDAAAA,oBAAY;IAAAA,0DAAAA,EAAS;;;;IALtCA,uDAAAA,GAAiB;IAAjBA,wDAAAA,uBAAiB;IAGjBA,uDAAAA,GAAmB;IAAnBA,wDAAAA,yBAAmB;;;;;;IAM3EA,4DAAAA,cAAoE;IAE5CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,kBAAS;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEtDA,4DAAAA,YAAO;IAAAA,oDAAAA,6BAAsB;IAAAA,0DAAAA,EAAQ;IACrCA,4DAAAA,gBAA0E;IAAtBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAoB;IAAxEA,0DAAAA,EAA0E;IAC1EA,uDAAAA,SAAI;IAEJA,4DAAAA,iBAAmE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,yBAAgB;IAAA,EAAC;IAACA,oDAAAA,mBAAY;IAAAA,0DAAAA,EAAS;;;;IAHpCA,uDAAAA,GAAoB;IAApBA,wDAAAA,0BAAoB;;;ACzCxE,MAAOU,gBAAgB;EAL7B3D;IAME,gBAAW,GAA2B;MACpC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACX,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACX,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;MAChB,OAAO,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAC,MAAM;KACrC;IAED,UAAK,GAAG,GAAG;IACX,WAAM,GAAG,GAAG;IACZ,aAAQ,GAAG,EAAE;IACb,cAAS,GAAG,EAAE;IACd,WAAM,GAAG;MAAEoM,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE;IAErD,gBAAW,GAAW,KAAK;IAC3B,cAAS,GAAW,KAAK;IACzB,UAAK,GAAY,IAAI;IAerB,QAAG,GAAQ,CAAC;IACZ,UAAK,GAAQ,CAAC;IA4Bd,WAAM,GAAQ,EAAE;;EA1ChBC,OAAO;IACL,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAACE,WAAW,CAAC;IAC1C,OAAOF,IAAI;EACb;EAIAG,OAAO;IACL,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAAC5E,KAAK,GAAG,IAAI;EACnB;EAKA6E,QAAQ;IACN,IAAI,CAACF,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC3E,KAAK,GAAG,KAAK;EACpB;EAEA8E,gBAAgB;IACd,IAAIC,MAAM,GAAG,KAAK;IAClB,MAAMR,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAACE,WAAW,CAAC;IAC1C,KAAI,IAAInH,CAAC,IAAIiH,IAAI,EAAC;MAChB,IAAG,IAAI,CAAC/B,GAAG,IAAIlF,CAAC,EAAC;QACfyH,MAAM,GAAG,IAAI;;;IAGjB,IAAGA,MAAM,IAAI,KAAK,EAAC;MACjBpD,KAAK,CAAC,kCAAkC,CAAC;;IAE3C,IAAGoD,MAAM,IAAI,IAAI,EAAC;MAChB,IAAI,CAACN,WAAW,CAAC,IAAI,CAACjC,GAAG,CAAC,CAACjF,IAAI,CAAC,IAAI,CAACC,KAAK,CAAC;;EAE/C;EAEAwH,MAAM;IACJ,IAAI,CAACJ,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC5E,KAAK,GAAG,KAAK;EACpB;EAGAiF,cAAc;IACZ,IAAIF,MAAM,GAAG,KAAK;IAClB,MAAMR,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC,IAAI,CAACE,WAAW,CAAC;IAC1C,KAAI,IAAInH,CAAC,IAAIiH,IAAI,EAAC;MAChB,IAAG,IAAI,CAAC/B,GAAG,IAAIlF,CAAC,EAAC;QACfyH,MAAM,GAAG,IAAI;;;IAGjB,IAAGA,MAAM,IAAI,KAAK,EAAC;MACjB,IAAI,CAACN,WAAW,CAAC,IAAI,CAACS,MAAM,CAAC,GAAG,EAAE;;IAEpC,IAAGH,MAAM,IAAI,IAAI,EAAC;MAChBpD,KAAK,CAAC,sBAAsB,CAAC;;EAEjC;;SA3EWlG,gBAAgB;;mBAAhBA,MAAgB;AAAA;;QAAhBA,MAAgB;EAAAf;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT7BC,4DAAAA,YAA2B;MACvBA,oDAAAA,mBACF;MAAAA,0DAAAA,EAAK;MAELA,4DAAAA,aAAqB;MACGA,oDAAAA,oBAAiB;MAAAA,0DAAAA,EAAM;MAC7CA,wDAAAA,oDAiBM;MACNA,4DAAAA,aAA+B;MACJA,wDAAAA;QAAA,OAASC,cAAU;MAAA,EAAC;MAACD,oDAAAA,uBAAgB;MAAAA,0DAAAA,EAAS;MACvEA,4DAAAA,gBAAiD;MAAnBA,wDAAAA;QAAA,OAASC,YAAQ;MAAA,EAAC;MAACD,oDAAAA,mBAAW;MAAAA,0DAAAA,EAAS;MACrEA,4DAAAA,iBAA+B;MAAAA,oDAAAA,oBAAY;MAAAA,0DAAAA,EAAS;MAIxDA,wDAAAA,uDAYM;MAENA,wDAAAA,uDAUM;;;MAjDiBA,uDAAAA,GAAY;MAAZA,wDAAAA,0BAAY;MAyBZA,uDAAAA,GAA6C;MAA7CA,wDAAAA,yDAA6C;MAc7CA,uDAAAA,GAA2C;MAA3CA,wDAAAA,uDAA2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IEnB9DA,4DAAAA,cAA4D;IAGnDA,oDAAAA,GAAU;IAAAA,0DAAAA,EAAI;IAIrBA,uDAAAA,cAA8B;IAEhCA,0DAAAA,EAAM;;;;;;IAPGA,uDAAAA,GAA4E;IAA5EA,wDAAAA,YAAAA,6DAAAA,0DAA4E;IAC5EA,uDAAAA,GAAU;IAAVA,+DAAAA,SAAU;;;;;IA2CyBA,4DAAAA,cAA2E;IAAAA,oDAAAA,8EAAuE;IAAAA,0DAAAA,EAAM;;;;;IAaxJA,4DAAAA,cAA8F;IAAAA,oDAAAA,iFAAwE;IAAAA,0DAAAA,EAAM;;;;;;IArC5NA,4DAAAA,cAAqE;IAE3CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,eAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IACpDA,4DAAAA,YAAO;IAAAA,oDAAAA,+BAAwB;IAAAA,0DAAAA,EAAQ;IACvCA,4DAAAA,gBAAuE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAyB;IAArEA,0DAAAA,EAAuE;IACvEA,uDAAAA,SAAI;IACJA,4DAAAA,YAAO;IAAAA,oDAAAA,gCAAwB;IAAAA,0DAAAA,EAAQ;IACvCA,4DAAAA,iBAAuE;IAA3BA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAyB;IAArEA,0DAAAA,EAAuE;IACvEA,uDAAAA,UAAI;IACJA,4DAAAA,eAAuB;IACIA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,mBAAU;IAAA,EAAC;IAACA,oDAAAA,YAAI;IAAAA,0DAAAA,EAAS;IAAAA,uDAAAA,UAAI;IACjEA,0DAAAA,EAAM;IACNA,4DAAAA,eAA4B;IAC1BA,oDAAAA,IAA6C;IAAAA,uDAAAA,UAAI;IACjDA,oDAAAA,yEAAgE;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,gFAAsE;IAAAA,0DAAAA,EAAM;IAACA,uDAAAA,UAAI;IAC5MA,oDAAAA,oEAA2D;IAAAA,uDAAAA,UAAI;IAC/DA,oDAAAA,sEAA6D;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,wCAA8B;IAAAA,0DAAAA,EAAM;IAACA,uDAAAA,UAAI;IAEjKA,oDAAAA,IAAiF;IAAAA,4DAAAA,eAA2D;IAACA,oDAAAA,mDAAwC;IAAAA,0DAAAA,EAAM;IAAAA,uDAAAA,UAAI;IAC/LA,oDAAAA,iFAAwE;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,wEAA8D;IAAAA,0DAAAA,EAAM;IAAAA,uDAAAA,UAAI;IAC3MA,oDAAAA,sGAA6F;IAAAA,uDAAAA,UAAI;IACjGA,oDAAAA,gGAAuF;IAAAA,uDAAAA,UAAI;IAC3FA,oDAAAA,wFAA+E;IAAAA,uDAAAA,UAAI;IAC/EA,oDAAAA,IAA2C;IAAAA,uDAAAA,UAAI;IAC/CA,oDAAAA,6CAAoC;IAAAA,wDAAAA,iEAAwJ;IAACA,uDAAAA,UAAI;IAEjMA,oDAAAA,kEAAyD;IAAAA,uDAAAA,UAAI;IAC7DA,oDAAAA,4DAAmD;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,8CAAoC;IAAAA,0DAAAA,EAAM;IAAAA,uDAAAA,UAAI;IAG5JA,oDAAAA,6CAAoC;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,4CAAkC;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,SAAC;IAAAA,0DAAAA,EAAI;IAAEA,oDAAAA,4BAAmB;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,YAAI;IAAAA,0DAAAA,EAAI;IAAQA,uDAAAA,UAAI;IACrLA,oDAAAA,6CAAoC;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,6BAAmB;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,SAAC;IAAAA,0DAAAA,EAAI;IAAMA,uDAAAA,UAAI;IAEpIA,oDAAAA,IAAoG;IAAAA,uDAAAA,UAAI;IACxGA,oDAAAA,0GAAiG;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,4CAAkC;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,IAAa;IAAAA,0DAAAA,EAAI;IAAEA,oDAAAA,4BAAmB;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,IAAa;IAAAA,0DAAAA,EAAI;IAAMA,uDAAAA,UAAI;IACrQA,oDAAAA,0FAAiF;IAAAA,4DAAAA,eAA2D;IAAAA,oDAAAA,aAAG;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,IAAwB;IAAAA,0DAAAA,EAAI;IAAMA,uDAAAA,UAAI;IACxLA,oDAAAA,IAA4C;IAAAA,uDAAAA,UAAI;IAChDA,oDAAAA,6CAAoC;IAAAA,wDAAAA,iEAA4K;IAACA,uDAAAA,UAAI;IACrNA,oDAAAA,2EAAkE;IAAAA,uDAAAA,UAAI;IACtEA,oDAAAA,qEAA4D;IAAAA,uDAAAA,UAAI;IAClEA,oDAAAA,IAAO;IAAAA,uDAAAA,WAAI;IAEfA,0DAAAA,EAAM;;;;IAtCsCA,uDAAAA,GAAyB;IAAzBA,wDAAAA,6BAAyB;IAGzBA,uDAAAA,GAAyB;IAAzBA,wDAAAA,6BAAyB;IAMnEA,uDAAAA,GAA6C;IAA7CA,gEAAAA,oDAA6C;IAK7CA,uDAAAA,IAAiF;IAAjFA,gEAAAA,wFAAiF;IAK7EA,uDAAAA,IAA2C;IAA3CA,gEAAAA,kDAA2C;IACqDA,uDAAAA,GAAa;IAAbA,wDAAAA,wBAAa;IAS7GA,uDAAAA,IAAoG;IAApGA,gEAAAA,2GAAoG;IAC6FA,uDAAAA,GAAa;IAAbA,+DAAAA,kBAAa;IAA4BA,uDAAAA,GAAa;IAAbA,+DAAAA,kBAAa;IACrGA,uDAAAA,GAAwB;IAAxBA,+DAAAA,6BAAwB;IAC1KA,uDAAAA,GAA4C;IAA5CA,gEAAAA,mDAA4C;IACoDA,uDAAAA,GAAgC;IAAhCA,wDAAAA,kDAAgC;IAGlIA,uDAAAA,GAAO;IAAPA,gEAAAA,cAAO;;;;;;IAQjBA,4DAAAA,cAAqE;IAE3CA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,gBAAO;IAAA,EAAC;IAACA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAEpDA,4DAAAA,YAAO;IAAAA,oDAAAA,gDAAyC;IAAAA,0DAAAA,EAAQ;IACxDA,4DAAAA,gBAAqE;IAAzBA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA;IAAA,EAAuB;IAAnEA,0DAAAA,EAAqE;IACrEA,uDAAAA,SAAI;IACJA,4DAAAA,cAAuB;IACIA,wDAAAA;MAAAA,2DAAAA;MAAA;MAAA,OAASA,yDAAAA,qBAAY;IAAA,EAAC;IAACA,oDAAAA,YAAI;IAAAA,0DAAAA,EAAS;IAAAA,uDAAAA,UAAI;IACnEA,0DAAAA,EAAM;IAGNA,4DAAAA,eAA4B;IAC1BA,oDAAAA,IAA0E;IAAAA,uDAAAA,UAAI;IAC9EA,oDAAAA,8GAAqG;IAAAA,uDAAAA,UAAI;IAEzGA,oDAAAA,oGAA2F;IAAAA,uDAAAA,UAAI;IAE/FA,oDAAAA,IAAmG;IAAAA,uDAAAA,UAAI;IACvGA,oDAAAA,wIAA+H;IAAAA,uDAAAA,UAAI;IACnIA,oDAAAA,iIAAwH;IAAAA,uDAAAA,UAAI;IAC5HA,oDAAAA,4HAAmH;IAAAA,uDAAAA,UAAI;IACvHA,oDAAAA,IAA+E;IAAAA,uDAAAA,UAAI;IAEnFA,oDAAAA,IAA0I;IAAAA,uDAAAA,UAAI;IAC9IA,oDAAAA,uIAA8H;IAAAA,uDAAAA,UAAI;IAClIA,oDAAAA,IAAgF;IAAAA,uDAAAA,UAAI;IAEpFA,oDAAAA,uIAA8H;IAAAA,uDAAAA,UAAI;IAElIA,oDAAAA,oJAA2I;IAAAA,uDAAAA,UAAI;IAC/IA,oDAAAA,oGAA2F;IAAAA,uDAAAA,UAAI;IAC/FA,oDAAAA,oGAA2F;IAAAA,uDAAAA,UAAI;IAC/FA,oDAAAA,IAA4C;IAAAA,uDAAAA,UAAI;IAClDA,0DAAAA,EAAM;;;;IA7BsCA,uDAAAA,GAAuB;IAAvBA,wDAAAA,6BAAuB;IAQjEA,uDAAAA,GAA0E;IAA1EA,gEAAAA,iFAA0E;IAK1EA,uDAAAA,GAAmG;IAAnGA,gEAAAA,0GAAmG;IAInGA,uDAAAA,GAA+E;IAA/EA,gEAAAA,sFAA+E;IAE/EA,uDAAAA,GAA0I;IAA1IA,gEAAAA,iJAA0I;IAE1IA,uDAAAA,GAAgF;IAAhFA,gEAAAA,uFAAgF;IAOhFA,uDAAAA,IAA4C;IAA5CA,gEAAAA,mDAA4C;;;;;IAclDA,4DAAAA,cAAgF;IAC1DA,oDAAAA,aAAO;IAAAA,0DAAAA,EAAO;IAClCA,4DAAAA,cAAuB;IACIA,oDAAAA,WAAI;IAAAA,0DAAAA,EAAS;IAAAA,uDAAAA,SAAI;IAE1CA,4DAAAA,iBAA0B;IAAAA,oDAAAA,uBAAgB;IAAAA,0DAAAA,EAAS;IAGrDA,4DAAAA,cAAgC;IAAAA,oDAAAA,4BAAoB;IAAAA,0DAAAA,EAAK;IACzDA,4DAAAA,WAAK;IAEDA,oDAAAA,qEAA4D;IAAAA,uDAAAA,UAAI;IAChEA,oDAAAA,yEAAgE;IAAAA,uDAAAA,UAAI;IACpEA,oDAAAA,0CAAiC;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,6BAEpC;IAAAA,0DAAAA,EAAI;IAAAA,uDAAAA,UAAI;IAERA,oDAAAA,0EAAiE;IAAAA,uDAAAA,UAAI;IAErEA,oDAAAA,gFAAuE;IAAAA,uDAAAA,UAAI;IAC7EA,0DAAAA,EAAI;IAEJA,4DAAAA,gBAAoB;IAAAA,oDAAAA,iBAAS;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,0CAAkC;IAAAA,0DAAAA,EAAI;IACtEA,uDAAAA,UAAI;IAEJA,4DAAAA,UAAI;IAAGA,oDAAAA,eAAO;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,mCAA0B;IAAAA,0DAAAA,EAAK;IAClDA,uDAAAA,UAAI;IACJA,4DAAAA,UAAI;IAAGA,oDAAAA,sBAAc;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uLAC2B;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,4CAAoC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uCAA8B;IAAAA,uDAAAA,UAAI;IAAAA,0DAAAA,EAAK;IACxIA,4DAAAA,UAAI;IAAGA,oDAAAA,WAAG;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAAIA,0DAAAA,EAAK;IAE/FA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,SAAC;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,6BAAoB;IAAAA,uDAAAA,UAAI;IACzCA,oDAAAA,iBAAQ;IAAAA,4DAAAA,SAAG;IAAAA,oDAAAA,cAAM;IAAAA,0DAAAA,EAAI;IAACA,oDAAAA,uDAA8C;IAAAA,uDAAAA,UAAI;IACxEA,oDAAAA,4EAAmE;IAAAA,uDAAAA,UAAI;IAEzEA,0DAAAA,EAAM;;;AC1KN,MAAOK,mBAAmB;EALhCtD;IAME,UAAK,GAAG,CAAC,MAAM,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC;IAE5B,YAAO,GAAY,IAAI;IAEvB,UAAK,GAAY,KAAK;IACtB,aAAQ,GAAY,KAAK;IACzB,aAAQ,GAAY,KAAK;IACzB,WAAM,GAAY,KAAK;IAGvB,sBAAiB,GAAG,CAAC;IACrB,cAAS,GAAQ,CAAC,CAAC;IACnB,cAAS,GAAQ,CAAC,CAAC;IACnB,cAAS,GAAQ,CAAC,CAAC;IACnB,cAAS,GAAQ,CAAC,CAAC;IACnB,aAAQ,GAAQ,CAAC;IACjB,UAAK,GAAG,OAAO;IAsBf,YAAO,GAAG,KAAK;IAQf,aAAQ,GAAY,KAAK;;EA5BzB4E,QAAQ;IACN,IAAI,CAACyI,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACrB;EAGApF,KAAK;IACH,IAAI,CAACR,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC6F,KAAK,GAAG,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACnF,MAAM,GAAG,KAAK;IAEnB,IAAI,CAACgF,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACI,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACL,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACM,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACrB;EAGAC,UAAU;IACR,IAAI,CAACnG,OAAO,GAAG,KAAK;IACpB,IAAI,CAAC8F,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACI,SAAS,GAAG,CAAC;IAClB,IAAI,CAACF,SAAS,GAAG,IAAI,CAACnI,KAAK,CAAC,IAAI,CAAC+H,SAAS,CAAC;EAC7C;EAGAQ,QAAQ;IACN,IAAG,IAAI,CAACR,SAAS,IAAI,CAAC,IAAI,IAAI,CAACK,QAAQ,IAAI,KAAK,EAAC;MAC/C,IAAI,CAACI,OAAO,GAAG,IAAI;MACnB,IAAI,CAACxI,KAAK,CAACyI,MAAM,CAAC,IAAI,CAACV,SAAS,GAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAACD,SAAS,CAAC;MACpD,IAAI,CAACM,QAAQ,GAAG,IAAI;;IAEtB,IAAG,IAAI,CAACM,QAAQ,IAAI,IAAI,CAACX,SAAS,GAAG,CAAC,IAAI,IAAI,CAACK,QAAQ,IAAI,KAAK,EAAC;MAC/D,IAAI,CAACpI,KAAK,CAACyI,MAAM,CAAC,IAAI,CAACV,SAAS,EAAC,CAAC,EAAC,IAAI,CAACD,SAAS,CAAC;MAClD,IAAI,CAACM,QAAQ,GAAE,IAAI;KACpB,MACI,IAAG,IAAI,CAACM,QAAQ,GAAG,IAAI,CAACX,SAAS,GAAG,CAAC,IAAI,IAAI,CAACK,QAAQ,IAAI,KAAK,EAAC;MACnE,IAAI,CAACC,SAAS,IAAI,CAAC;MACnB,IAAI,CAACF,SAAS,GAAI,IAAI,CAACnI,KAAK,CAAC,IAAI,CAACqI,SAAS,CAAC;MAC5C,IAAI,CAACK,QAAQ,IAAI,CAAC;;EAEtB;EAEAC,UAAU;IACR,IAAI,CAACxG,OAAO,GAAG,KAAK;IACpB,IAAI,CAAC+F,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACG,SAAS,GAAG,CAAC;IAClB,IAAI,CAACF,SAAS,GAAG,IAAI,CAACnI,KAAK,CAAC,IAAI,CAAC+H,SAAS,CAAC;EAC7C;EAEAa,UAAU,IAEV;;SA1EW7K,mBAAmB;;mBAAnBA,MAAmB;AAAA;;QAAnBA,MAAmB;EAAAV;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDNhCC,4DAAAA,aAAgC;MAC5BA,uDAAAA,SAAI;MACJA,4DAAAA,SAAI;MAAAA,oDAAAA,iCAA0B;MAAAA,0DAAAA,EAAK;MACnCA,4DAAAA,SAAI;MAAAA,oDAAAA,sCAA+B;MAAAA,0DAAAA,EAAK;MACxCA,4DAAAA,SAAI;MAAAA,oDAAAA,kEAA2D;MAAAA,0DAAAA,EAAK;MACpEA,4DAAAA,SAAI;MAAAA,oDAAAA,iCAAyB;MAAAA,0DAAAA,EAAK;MAClCA,4DAAAA,UAAI;MAAAA,oDAAAA,iCAAyB;MAAAA,0DAAAA,EAAK;MAClCA,uDAAAA,UAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,yBAAiB;MAAAA,0DAAAA,EAAK;MAC1BA,4DAAAA,UAAI;MAAAA,oDAAAA,+CAAuC;MAAAA,0DAAAA,EAAK;MAChDA,4DAAAA,UAAI;MAAAA,oDAAAA,sHAA8G;MAAAA,0DAAAA,EAAK;MACvHA,4DAAAA,UAAI;MAAAA,oDAAAA,qPAA6O;MAAAA,0DAAAA,EAAK;MACtPA,uDAAAA,UAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAK;MACzBA,4DAAAA,UAAI;MAAAA,oDAAAA,8DAAsD;MAAAA,0DAAAA,EAAK;MAC/DA,4DAAAA,UAAI;MAAAA,oDAAAA,kLAA0K;MAAAA,0DAAAA,EAAK;MACnLA,4DAAAA,UAAI;MAAAA,oDAAAA,mCAA2B;MAAAA,0DAAAA,EAAK;MAGtCA,uDAAAA,UAAI;MAIJA,4DAAAA,cAAuB;MACnBA,wDAAAA,yDASM;MACRA,0DAAAA,EAAM;MAIRA,4DAAAA,cAA8B;MACIA,wDAAAA;QAAA,OAASC,gBAAY;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAI;MAASA,uDAAAA,UAAI;MAExFA,4DAAAA,iBAA2C;MAAvBA,wDAAAA;QAAA,OAASC,gBAAY;MAAA,EAAC;MAACD,4DAAAA,SAAG;MAAAA,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAI;MAKjEA,wDAAAA,4DA4CM;MAINA,wDAAAA,0DAoCM;MAKNA,4DAAAA,cAAuB;MAE6BA,oDAAAA,gBAAS;MAAAA,0DAAAA,EAAS;MAClEA,uDAAAA,UAAI;MACNA,0DAAAA,EAAM;MAENA,wDAAAA,2DAoCI;MACNA,0DAAAA,EAAM;;;MA1JiCA,uDAAAA,IAAU;MAAVA,wDAAAA,sBAAU;MAsB1BA,uDAAAA,GAA4C;MAA5CA,wDAAAA,wDAA4C;MAgD5CA,uDAAAA,GAA4C;MAA5CA,wDAAAA,wDAA4C;MA+C7BA,uDAAAA,GAA0C;MAA1CA,wDAAAA,sDAA0C;;;;;;;;;;;;;;;;;;;;;;AExI5E,MAAO3B,eAAe;SAAfA,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAsB;EAAAC;EAAAC;EAAAE;IAAA;MCP5BC,4DAAAA,QAAG;MAAAA,oDAAAA,oBAAa;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;ACOd,MAAO1B,eAAe;SAAfA,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAqB;EAAAC;EAAAC;EAAAE;IAAA;MCP5BC,4DAAAA,QAAG;MAAAA,oDAAAA,oBAAa;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;ACOd,MAAOzB,eAAe;SAAfA,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAoB;EAAAC;EAAAC;EAAAE;IAAA;MCP5BC,4DAAAA,QAAG;MAAAA,oDAAAA,oBAAa;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;ACOd,MAAOxB,eAAe;SAAfA,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAmB;EAAAC;EAAAC;EAAAE;IAAA;MCP5BC,4DAAAA,QAAG;MAAAA,oDAAAA,oBAAa;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;ACQpB,SAASmL,SAAS;EACd,OAAOC,MAAM;AACjB;AAGM,MAAOnK,gBAAgB;EACzB,IAAIoK,YAAY;IACZ,OAAOF,SAAS,EAAE;EACtB;;SAHSlK,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAnD,SAAhBmD,MAAgB;AAAA;;;;;;;;;;;;;;;;;;;ACNvB,MAAOJ,qBAAqB;EALlC9D;IAME,cAAS,GAAG,EAAE;IACd,eAAU,GAAG,CAAC;IACd,eAAU,GAAG,EAAE;;EAEfuO,OAAO;IACL,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;EAC/D;EAEAC,OAAO;IACL,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACD,UAAU,EAAE,CAAC,IAAI,CAACG,UAAU,CAAC;EACjE;EACAF,KAAK,CAACI,IAAY,EAAEJ,KAAa;IAC/B,MAAMK,QAAQ,GAAG,4BAA4B;IAC7C,MAAMC,aAAa,GAAGD,QAAQ,CAACE,WAAW,EAAE;IAE5C,IAAIzE,MAAM,GAAG,EAAE;IACf,KAAK,MAAM0E,IAAI,IAAIJ,IAAI,EAAE;MACvB,MAAMK,SAAS,GAAGD,IAAI,CAACE,WAAW,EAAE;MACpC,IAAIL,QAAQ,CAACM,OAAO,CAACF,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;QACtC3E,MAAM,IAAI0E,IAAI;QACd;;MAGF,MAAMI,aAAa,GAAGJ,IAAI,KAAKC,SAAS,GAAGJ,QAAQ,GAAGC,aAAa;MACnE,MAAMO,YAAY,GAAG,CAACR,QAAQ,CAACM,OAAO,CAACF,SAAS,CAAC,GAAGT,KAAK,GAAGK,QAAQ,CAAC3I,MAAM,IAAI2I,QAAQ,CAAC3I,MAAM;MAC9FoE,MAAM,IAAI8E,aAAa,CAACC,YAAY,CAAC;;IAGvC,OAAO/E,MAAM;EACf;;SA9BWzG,qBAAqB;;mBAArBA,MAAqB;AAAA;;QAArBA,MAAqB;EAAAlB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCNlCC,4DAAAA,aAAuB;MACAA,uDAAAA,aAA2E;MAAAA,0DAAAA,EAAM;MACpGA,4DAAAA,aAA+B;MACzBA,oDAAAA,oBAAa;MAAAA,0DAAAA,EAAK;MACtBA,4DAAAA,aAAyB;MAChBA,oDAAAA,wBAAiB;MAAAA,0DAAAA,EAAQ;MAChCA,4DAAAA,eAA+B;MAAxBA,wDAAAA;QAAA;MAAA,EAAuB;MAA9BA,0DAAAA,EAA+B;MAEjCA,4DAAAA,cAAyB;MAChBA,oDAAAA,0BAAkB;MAAAA,0DAAAA,EAAQ;MACjCA,4DAAAA,gBAA8C;MAAzBA,wDAAAA;QAAA;MAAA,EAAwB;MAA7CA,0DAAAA,EAA8C;MAEhDA,4DAAAA,cAA0B;MAChBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;MAC5CA,4DAAAA,iBAA4B;MAApBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;MAE9CA,4DAAAA,cAA0B;MACjBA,oDAAAA,oBAAY;MAAAA,0DAAAA,EAAQ;MAC3BA,4DAAAA,SAAG;MAAAA,oDAAAA,IAAc;MAAAA,0DAAAA,EAAI;;;MAZdA,uDAAAA,GAAuB;MAAvBA,wDAAAA,0BAAuB;MAITA,uDAAAA,GAAwB;MAAxBA,wDAAAA,2BAAwB;MAQ1CA,uDAAAA,IAAc;MAAdA,+DAAAA,gBAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICIzBA,4DAAAA,cAA6B;IACzBA,uDAAAA,cAAmB;IACvBA,0DAAAA,EAAM;;;ACfA,MAAOvB,eAAe;EAN5B1B;IAOE,QAAG,GAAG,KAAK;;EAGXuP,OAAO;IACL,IAAI,CAACC,GAAG,GAAG,CAAC,IAAI,CAACA,GAAG;EACtB;;SANW9N,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDV5BC,uDAAAA,sBAAmC;MAInCA,4DAAAA,YAA2B;MACvBA,oDAAAA,+BACJ;MAAAA,0DAAAA,EAAK;MACLA,4DAAAA,aAAuB;MACnBA,uDAAAA,aAA0D;MAC9DA,0DAAAA,EAAM;MACNA,4DAAAA,aAAwB;MACpBA,uDAAAA,aAAyF;MAC7FA,0DAAAA,EAAM;MAGNA,4DAAAA,aAAmD;MACfA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,mCAA2B;MAAAA,0DAAAA,EAAS;MACxFA,4DAAAA,iBAA+B;MAAAA,oDAAAA,yCAAiC;MAAAA,0DAAAA,EAAS;MACzEA,4DAAAA,iBAA+B;MAAAA,oDAAAA,yCAAiC;MAAAA,0DAAAA,EAAS;MACzEA,4DAAAA,iBAAiC;MAAAA,oDAAAA,yCAAiC;MAAAA,0DAAAA,EAAS;MAI/EA,wDAAAA,sDAEM;;;MAFYA,uDAAAA,IAAS;MAATA,wDAAAA,iBAAS;;;;;;;;;;;;;;;;;;;;;;;;;;AEtB3B;AACA;AAQM,MAAOY,YAAY;EANzB7D;IAOE,cAAS,GAAW,EAAE;IACtB,cAAS,GAAW,EAAE;IACtB,cAAS,GAAW,EAAE;;EAEtB;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEMuO,OAAO;IAAA;EAcb,CAAC,CAbC;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;;EAGIK,OAAO;IAAA;EAcb,CAAC,CAbC;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EACA;;SAhDS/K,YAAY;;mBAAZA,MAAY;AAAA;;QAAZA,MAAY;EAAAjB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVzBC,uDAAAA,aAA0C;MAG1CA,4DAAAA,UAAK;MACsBA,oDAAAA,iBAAU;MAAAA,0DAAAA,EAAQ;MACzCA,4DAAAA,kBAAiD;MAAxBA,wDAAAA;QAAA;MAAA,EAAuB;MAACA,0DAAAA,EAAW;MAE9DA,4DAAAA,UAAK;MACoBA,oDAAAA,kBAAW;MAAAA,0DAAAA,EAAQ;MAC1CA,4DAAAA,kBAAiD;MAAxBA,wDAAAA;QAAA;MAAA,EAAuB;MAACA,0DAAAA,EAAW;MAE9DA,4DAAAA,UAAK;MACoBA,oDAAAA,kBAAU;MAAAA,0DAAAA,EAAQ;MACzCA,4DAAAA,mBAAyB;MAAAA,oDAAAA,IAAa;MAAAA,0DAAAA,EAAW;MAEnDA,4DAAAA,iBAA4B;MAApBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;MAC5CA,4DAAAA,iBAA4B;MAApBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;;;MAXjBA,uDAAAA,GAAuB;MAAvBA,wDAAAA,0BAAuB;MAIvBA,uDAAAA,GAAuB;MAAvBA,wDAAAA,0BAAuB;MAIvBA,uDAAAA,GAAa;MAAbA,+DAAAA,eAAa;;;;;;;;;;;;;;;;;;;;;;ACEpC,MAAOkB,oBAAoB;EAG/BS,QAAQ;IACN;IACA;IAEA6K,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,uBAAuB,CAAC,CAAC,CAACC,OAAO,CAACC,EAAE,IAAG;MACvEA,EAAkB,CAACC,OAAO,GAAIC,KAAiB,IAAI;QAClD,IAAIF,EAAE,KAAKE,KAAK,CAACC,MAAM,IAAI,OAAOD,KAAK,CAACE,OAAO,KAAK,QAAQ,IAAIF,KAAK,CAACE,OAAO,GAAG,EAAE,EAAE;UAClF,IAAI,CAACC,GAAG,CAACC,YAAY,CAACN,EAAE,EAAEE,KAAK,CAAC;SACjC,MAAM;UACL,IAAI,CAACG,GAAG,CAACE,YAAY,CAACP,EAAE,EAAEE,KAAK,CAAC;;MAEpC,CAAC;IACL,CAAC,CAAC;IAEFN,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,EAAE,IAAG;MAC9DA,EAAkB,CAACC,OAAO,GAAIC,KAAY,IAAI;QAC7C,IAAI,CAACG,GAAG,CAACC,YAAY,CAACN,EAAE,CAACQ,UAAU,EAAEN,KAAK,CAAC;MAC7C,CAAC;IACH,CAAC,CAAC;IAEFN,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,EAAE,IAAG;MAC5D,IAAI,CAACK,GAAG,CAACI,oBAAoB,CAACT,EAAE,CAAC;IACnC,CAAC,CAAC;IAEFJ,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,EAAE,IAAG;MAC/D,IAAI,CAACK,GAAG,CAACK,WAAW,CAACV,EAAE,CAAC;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACK,GAAG,CAACM,YAAY,EAAE;IAGvBnC,MAAM,CAACoC,OAAO,GAAIC,CAAgB,IAAI;MACpC,IAAIC,GAAkB;MACtB,IAAID,CAAC,CAACE,OAAO,KAAK,EAAE,EAAE;QACpBD,GAAG,GAAGlB,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAC/D,IAAIgB,GAAG,CAACxK,MAAM,EAAE;UACdwK,GAAG,CAACf,OAAO,CAACiB,GAAG,IAAIA,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC,CAAC;SACrD,MAAM;UACL,IAAI,CAACb,GAAG,CAACc,kBAAkB,EAAE;;;IAGnC,CAAC;IAGD,IAAI,OAAO3C,MAAM,KAAK,WAAW,EAAE;MACjCA,MAAM,CAAC6B,GAAG,GAAG,IAAI,CAACA,GAAG;;EAGzB;EAIAlQ;IACE,IAAI,CAACkQ,GAAG,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,CAACe,gBAAgB,GAAIpB,EAAe,IAAI;MAC9C,MAAMqB,IAAI,GAAGrB,EAAE,CAACsB,qBAAqB,EAAE;MACvC,MAAMC,UAAU,GAAGzL,IAAI,CAAC0L,GAAG,CAAC9J,QAAQ,CAAC+J,eAAe,CAACC,YAAY,EAAElD,MAAM,CAACmD,WAAW,CAAC;MACtF,OAAO,EAAEN,IAAI,CAAC5E,MAAM,GAAG,CAAC,IAAI4E,IAAI,CAAC9E,GAAG,GAAGgF,UAAU,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAClB,GAAG,CAACuB,mBAAmB,GAAI5B,EAAe,IAAI;MACjD,IAAI,CAAC,IAAI,CAACK,GAAG,CAACe,gBAAgB,CAACpB,EAAE,CAAC,EAAE;QAClCA,EAAE,CAAC6B,cAAc,CAAC;UAAEC,QAAQ,EAAE;QAAQ,CAAE,CAAC;;IAE7C,CAAC;IAED,IAAI,CAACzB,GAAG,CAACc,kBAAkB,GAAG,MAAK;MACjC,MAAMY,OAAO,GAAGnC,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,mEAAmE,CAAC,CAAC;MAC1H,KAAK,MAAMkC,MAAM,IAAID,OAAO,EAAE;QAC5BC,MAAM,CAACf,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC;;IAEvC,CAAC;IAED,IAAI,CAACb,GAAG,CAACC,YAAY,GAAG,CAAC2B,OAAoB,EAAE/B,KAAY,KAAI;MAC7D,MAAMgC,QAAQ,GAAGD,OAAO,CAAChB,SAAS,CAACkB,QAAQ,CAAC,UAAU,CAAC;MACvD,IAAI,CAAC9B,GAAG,CAACc,kBAAkB,EAAE;MAE7B,IAAI,CAACe,QAAQ,EAAE;QACbD,OAAO,CAAChB,SAAS,CAACmB,GAAG,CAAC,UAAU,CAAC;OAClC,MAAM;QACL,IAAI,CAAC/B,GAAG,CAACgC,YAAY,EAAE;;MAGzBnC,KAAK,CAACoC,eAAe,EAAE;MACvB,IAAI,CAACjC,GAAG,CAACuB,mBAAmB,CAACK,OAAO,CAAC;IACvC,CAAC;IAED,IAAI,CAAC5B,GAAG,CAACE,YAAY,GAAG,CAAC0B,OAAoB,EAAE/B,KAAY,KAAI;MAC7D,IAAI,CAACG,GAAG,CAACc,kBAAkB,EAAE;MAC7Bc,OAAO,CAAChB,SAAS,CAACmB,GAAG,CAAC,UAAU,CAAC;MACjClC,KAAK,CAACoC,eAAe,EAAE;MACvB,IAAI,CAACjC,GAAG,CAACuB,mBAAmB,CAACK,OAAO,CAAC;IACvC,CAAC;IAED,IAAI,CAAC5B,GAAG,CAACkC,QAAQ,GAAG,CAACN,OAAoB,EAAE/B,KAAY,KAAI;MACzD,IAAI+B,OAAO,CAACzB,UAAU,EAAE;QACrByB,OAAO,CAACzB,UAA0B,CAACS,SAAS,CAACmB,GAAG,CAAC,MAAM,CAAC;;MAE3DlC,KAAK,CAACoC,eAAe,EAAE;IACzB,CAAC;IAED,IAAI,CAACjC,GAAG,CAACgC,YAAY,GAAG,MAAK;MAC3B,MAAMG,WAAW,GAAG5C,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;MAC5E,KAAK,MAAM2C,UAAU,IAAID,WAAW,EAAE;QACpCC,UAAU,CAACxB,SAAS,CAACC,MAAM,CAAC,MAAM,CAAC;;IAEvC,CAAC;IAED,IAAI,CAACb,GAAG,CAACqC,cAAc,GAAI1C,EAAe,IAAI;MAC5CA,EAAE,CAACiB,SAAS,CAAC0B,MAAM,CAAC,UAAU,CAAC;IACjC,CAAC;IAED,IAAI,CAACtC,GAAG,CAACuC,MAAM,GAAI1C,KAAY,IAAI;MACjC,IAAIA,KAAK,EAAE;QACTA,KAAK,CAACoC,eAAe,EAAE;;IAE3B,CAAC;IACD,IAAI,CAACjC,GAAG,CAACK,WAAW,GAAIV,EAAe,IAAI;MACzC,MAAM6C,mBAAmB,GAAGnL,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;MACnE,IAAIkL,mBAAmB,EAAE;QACvB,MAAMC,YAAY,GAAGD,mBAAmB,CAACE,SAAS;QAClD/C,EAAE,CAAC+C,SAAS,GAAGD,YAAY,GAAG9C,EAAE,CAAC+C,SAAS;;IAE9C,CAAC;IAED,IAAI,CAAC1C,GAAG,CAACI,oBAAoB,GAAIuB,MAAmB,IAAI;MACtD,MAAMgB,IAAI,GAAGhB,MAAM,CAACiB,aAAa,CAAC,kBAAkB,CAAY;MAChE,IAAID,IAAI,IAAIA,IAAI,YAAYE,OAAO,EAAE;QACnC,MAAMC,YAAY,GAAGzL,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,EAAEyL,SAAS,CAAC,IAAI,CAAC;QAC7E,IAAID,YAAY,EAAE;UAChBH,IAAI,CAACK,qBAAqB,CAAC,UAAU,EAAEF,YAAuB,CAAC;;;IAGrE,CAAC;IAED,IAAI,CAAC9C,GAAG,CAACM,YAAY,GAAG,MAAK;MAC3B,MAAM3I,QAAQ,GAAG4H,KAAK,CAACC,IAAI,CAACnI,QAAQ,CAACoI,gBAAgB,CAAC,oDAAoD,CAAC,CAAC;MAC5G,KAAK,MAAMmC,OAAO,IAAIjK,QAAQ,EAAE;QAC9B,MAAMgL,IAAI,GAAGf,OAAO;QACpB,MAAMzB,UAAU,GAAGwC,IAAI,CAACxC,UAAU;QAClC,IAAIA,UAAU,EAAE;UACd,MAAM8C,KAAK,GAAG9C,UAAU,CAACyC,aAAa,CAAC,QAAQ,CAAC;UAChD,IAAIK,KAAK,EAAE;YACT,MAAMC,SAAS,GAAGD,KAAK,CAACE,WAAW;YACnC,IAAID,SAAS,KAAK,IAAI,EAAE;cACtB,MAAME,EAAE,GAAG/L,QAAQ,CAACgM,aAAa,CAAC,IAAI,CAAC;cACvC,MAAMC,aAAa,GAAGjM,QAAQ,CAACkM,cAAc,CAACL,SAAS,CAAC;cACxDE,EAAE,CAACI,WAAW,CAACF,aAAa,CAAC;cAC7BX,IAAI,CAACK,qBAAqB,CAAC,YAAY,EAAEI,EAAE,CAAC;;;;;IAKtD,CAAC;EAEH;;SA9JWnP,oBAAoB;;mBAApBA,MAAoB;AAAA;;QAApBA,MAAoB;EAAAvB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdjCC,4DAAAA,aAAyB;MAEbA,oDAAAA,qCAA8B;MAAAA,0DAAAA,EAAK;MACvCA,4DAAAA,SAAI;MAAAA,oDAAAA,+DAAwD;MAAAA,0DAAAA,EAAK;MACjEA,4DAAAA,aAAwB;MACrBA,oDAAAA,6LAGO;MAAAA,0DAAAA,EAAI;MAEdA,4DAAAA,aAAuB;MAEAA,oDAAAA,oBAAY;MAAAA,0DAAAA,EAAM;MACzCA,uDAAAA,cAAmF;MACnFA,4DAAAA,cAA6B;MACzBA,oDAAAA,iGAEA;MAAAA,4DAAAA,UAAI;MACAA,oDAAAA,yBACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,yDACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,yCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,gCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,sCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAAA,oDAAAA,6BACJ;MADAA,0DAAAA,EAAI;MAGRA,4DAAAA,eAA0B;MAEEA,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,gBAAoB;MACpBA,oDAAAA,wBACA;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,eAAyB;MACrBA,oDAAAA,wJAIA;MAAAA,4DAAAA,UAAI;MACIA,oDAAAA,UAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAIA,oDAAAA,aAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2DAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAIA,oDAAAA,aAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,4KAIZ;MAAAA,4DAAAA,WAAK;MAAMA,oDAAAA,IAIJ;MAAAA,0DAAAA,EAAO;MAIVA,4DAAAA,eAAqB;MACGA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,gBAAoB;MAC5BA,oDAAAA,qBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,eAAyB;MACrBA,oDAAAA,iEACA;MAAAA,4DAAAA,UAAI;MACIA,oDAAAA,UAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,UAAI;MAAIA,oDAAAA,gBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,eAAqB;MACGA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,gBAAoB;MAC5BA,oDAAAA,eACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,eAAyB;MACrBA,oDAAAA,qEACA;MAAAA,uDAAAA,UAAK;MACLA,oDAAAA,iNAKJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,eAAqB;MACGA,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,gBAAoB;MAC5BA,oDAAAA,yGACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,eAAyB;MACrBA,oDAAAA,uHAEA;MAAAA,uDAAAA,UAAK;MACLA,oDAAAA,mHAGA;MAAAA,4DAAAA,aAAwE;MAAAA,oDAAAA,+BAAuB;MAAAA,0DAAAA,EAAI;MACnGA,oDAAAA,4DACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,eAAqB;MACGA,oDAAAA,kBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,gBAAoB;MAC5BA,oDAAAA,YACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,eAAyB;MACrBA,oDAAAA,6VAQA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDACf;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gHAEQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,gQAMA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,iDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,oDAA2C;MAAAA,0DAAAA,EAAI;MAC1FA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,sDAA6C;MAAAA,0DAAAA,EAAI;MAC5FA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,8CAAqC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,8CAAqC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,gDAAuC;MAAAA,0DAAAA,EAAI;MACtFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,gDAAuC;MAAAA,0DAAAA,EAAI;MACtFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,2CAAkC;MAAAA,0DAAAA,EAAI;MACjFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,6CAAoC;MAAAA,0DAAAA,EAAI;MACnFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,2CAAkC;MAAAA,0DAAAA,EAAI;MACjFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,6CAAoC;MAAAA,0DAAAA,EAAI;MACnFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,wCAA+B;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,wCAA+B;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,qCAA4B;MAAAA,0DAAAA,EAAI;MAC3EA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,qCAA4B;MAAAA,0DAAAA,EAAI;MAC3EA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,4CAAmC;MAAAA,0DAAAA,EAAI;MAClFA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+BAAsB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,sCAA6B;MAAAA,0DAAAA,EAAI;MAKpFA,4DAAAA,gBAAqB;MACGA,oDAAAA,4BAAmB;MAAAA,0DAAAA,EAAO;MAC9CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,+LAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8CACf;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,kGAEK;MAAAA,4DAAAA,cAA8C;MAAAA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,wEAEhE;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,0BAAiB;MAAAA,0DAAAA,EAAO;MAC5CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,gIAGA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6DAClB;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,gLAIJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,gCAAuB;MAAAA,0DAAAA,EAAO;MAClDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,8FACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,uHAGA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,2RAOA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,8BAAqB;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oCACtC;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,mCAA0B;MAAAA,0DAAAA,EAAO;MACrDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,qCACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,iTAQA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4DAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,iEACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2DACtB;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,qCAA4B;MAAAA,0DAAAA,EAAO;MACvDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,oDACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,gPAMA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8DAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDACtB;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,qCAA4B;MAAAA,0DAAAA,EAAO;MACvDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,4BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,uQAMA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kLAIA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8DAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oEACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,iDACnB;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,yCAAgC;MAAAA,0DAAAA,EAAO;MAC3DA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,4EACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,mWASA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8CAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0CACtB;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,uCAA8B;MAAAA,0DAAAA,EAAO;MACzDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kDACA;MAAAA,4DAAAA,cAAsD;MAAAA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAI;MAC1EA,oDAAAA,4CACA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,iLAEA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mFACnB;MADIA,0DAAAA,EAAI;MAKhBA,4DAAAA,gBAAqB;MACGA,oDAAAA,wBAAe;MAAAA,0DAAAA,EAAO;MAC1CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kGAGA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,oXAUA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qFACtB;MADIA,0DAAAA,EAAI;MASpBA,4DAAAA,eAAuB;MAEAA,oDAAAA,qBAAY;MAAAA,0DAAAA,EAAM;MACzCA,uDAAAA,gBAAmF;MACnFA,4DAAAA,eAA6B;MACzBA,oDAAAA,6EACA;MAAAA,4DAAAA,WAAI;MACAA,oDAAAA,uCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,0DACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,wBACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,mCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,yCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,8BACJ;MADAA,0DAAAA,EAAI;MAGRA,4DAAAA,gBAA0B;MAEEA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yJAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kEACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,uBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,8DACA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kNAKJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,0GACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,wHAEA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,oHAGA;MAAAA,4DAAAA,cAAwE;MAAAA,oDAAAA,gCAAuB;MAAAA,0DAAAA,EAAI;MACnGA,oDAAAA,6DACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,mBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,aACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,uaAUA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDACf;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,qBAAY;MAAAA,0DAAAA,EAAO;MACvCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yIAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,2BAAkB;MAAAA,0DAAAA,EAAO;MAC7CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,aACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kJAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,gBAAqB;MACGA,oDAAAA,0BAAiB;MAAAA,0DAAAA,EAAO;MAC5CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,gBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,8PAMA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2DAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,uCAA8B;MAAAA,0DAAAA,EAAO;MACzDA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kDACA;MAAAA,4DAAAA,cAAsD;MAAAA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAI;MAC1EA,oDAAAA,4CACA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,iLAEA;MAAAA,4DAAAA,WAAI;MACQA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gEAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2EAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mFACnB;MADIA,0DAAAA,EAAI;MAQpBA,4DAAAA,eAAuB;MAEAA,oDAAAA,2BAAkB;MAAAA,0DAAAA,EAAM;MAC/CA,uDAAAA,gBAAoF;MACpFA,4DAAAA,eAA6B;MACzBA,oDAAAA,sEACA;MAAAA,4DAAAA,WAAI;MACAA,oDAAAA,oCACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,4CACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAAA,oDAAAA,oHACJ;MADAA,0DAAAA,EAAI;MAEJA,4DAAAA,cAA2C;MAAAA,oDAAAA,uCAA8B;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,WACjF;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAA0B;MAEEA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yJAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2DAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kEACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,4BAAmB;MAAAA,0DAAAA,EAAO;MAC9CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,mBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,mGAEA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0DACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,2BAAkB;MAAAA,0DAAAA,EAAO;MAC7CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,mBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,0DACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qDACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,oBAAW;MAAAA,0DAAAA,EAAO;MACtCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,y3EA0BQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,qIAGW;MAAAA,4DAAAA,cAA2C;MAAAA,oDAAAA,wBAAe;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,WACzE;MAAAA,4DAAAA,cAAiD;MAAAA,oDAAAA,wBAAe;MAAAA,0DAAAA,EAAI;MACpEA,oDAAAA,mFAGZ;MAAAA,4DAAAA,YAAK;MAAMA,oDAAAA,mOAKX;MAAAA,0DAAAA,EAAO;MAQPA,4DAAAA,eAAuB;MAEAA,oDAAAA,uCAA8B;MAAAA,0DAAAA,EAAM;MAC3DA,uDAAAA,gBAAmF;MACnFA,4DAAAA,eAA6B;MACzBA,oDAAAA,oOAIA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kFACA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,2EACO;MAAAA,4DAAAA,YAAK;MAAAA,oDAAAA,YAAG;MAAAA,0DAAAA,EAAM;MAAAA,oDAAAA,gFAErB;MAAAA,4DAAAA,cAAqF;MAAAA,oDAAAA,oBAAW;MAAAA,0DAAAA,EAAI;MACpGA,oDAAAA,uBAEJ;MAAAA,4DAAAA,gBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,cAAmB;MAAAA,oDAAAA,yEAAgE;MAAAA,0DAAAA,EAAI;MAEtGA,oDAAAA,cAAI;MAAAA,4DAAAA,cAAmF;MAAAA,oDAAAA,mBAAU;MAAAA,0DAAAA,EAAI;MACrGA,oDAAAA,uHAGJ;MAAAA,4DAAAA,gBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,cAAmB;MAAAA,oDAAAA,yEAAgE;MAAAA,0DAAAA,EAAI;MAEtGA,oDAAAA,+EAEJ;MAAAA,4DAAAA,YAAK;MAAyBA,oDAAAA,6cAY9B;MAAAA,0DAAAA,EAAO;MAMPA,4DAAAA,eAAuB;MAEAA,oDAAAA,4BAAmB;MAAAA,0DAAAA,EAAM;MAChDA,uDAAAA,gBAAmF;MACnFA,4DAAAA,eAA6B;MACzBA,oDAAAA,kWAMA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kHACqC;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,iBAAQ;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,eAC7D;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,eAAM;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,mDACtB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,iHAEZ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAA0B;MAEEA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yJAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,2DAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kEACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8DACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6DACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,mBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,mBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,qFACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mGACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,mBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,6GAEQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,+FACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,sCACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,wBAAe;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uBAC5B;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,kBAAS;MAAAA,0DAAAA,EAAO;MACpCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sxBASQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kXASA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,8DAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,8BAAqB;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uCACF;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,oFACqB;MAAAA,0DAAAA,EAAI;MAE5DA,oDAAAA,2DACI;MAAAA,4DAAAA,cAAiD;MAAAA,oDAAAA,6BAAoB;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,gCAGzF;MAAAA,4DAAAA,YAAK;MAAMA,oDAAAA,i6CAsBX;MAAAA,0DAAAA,EAAO;MAQPA,4DAAAA,eAAuB;MAEAA,oDAAAA,0BAAiB;MAAAA,0DAAAA,EAAM;MAC9CA,4DAAAA,eAA6B;MACzBA,oDAAAA,6EACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAA0B;MAEEA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yJAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kEACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4DACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,iBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,gDACrB;MADAA,0DAAAA,EAAI;MAQhBA,4DAAAA,eAAuB;MAEAA,oDAAAA,uCAA8B;MAAAA,0DAAAA,EAAM;MAC3DA,uDAAAA,gBAAmF;MACnFA,4DAAAA,eAA6B;MACzBA,oDAAAA,oOAIA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kFACA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,2EACO;MAAAA,4DAAAA,YAAK;MAAAA,oDAAAA,YAAG;MAAAA,0DAAAA,EAAM;MAAAA,oDAAAA,gFAErB;MAAAA,4DAAAA,cAAqF;MAAAA,oDAAAA,oBAAW;MAAAA,0DAAAA,EAAI;MACpGA,oDAAAA,uBAEJ;MAAAA,4DAAAA,gBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,cAAmB;MAAAA,oDAAAA,yEAAgE;MAAAA,0DAAAA,EAAI;MAEtGA,oDAAAA,cAAI;MAAAA,4DAAAA,cAAmF;MAAAA,oDAAAA,mBAAU;MAAAA,0DAAAA,EAAI;MACrGA,oDAAAA,uHAGJ;MAAAA,4DAAAA,gBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,cAAmB;MAAAA,oDAAAA,yEAAgE;MAAAA,0DAAAA,EAAI;MAEtGA,oDAAAA,2EAEJ;MAAAA,4DAAAA,YAAK;MAAMA,oDAAAA,6cAYX;MAAAA,0DAAAA,EAAO;MAMPA,4DAAAA,eAAuB;MAEAA,oDAAAA,4BAAmB;MAAAA,0DAAAA,EAAM;MAChDA,uDAAAA,gBAAmF;MACnFA,4DAAAA,eAA6B;MACzBA,oDAAAA,kWAMA;MAAAA,uDAAAA,WAAK;MACLA,oDAAAA,kHACqC;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,iBAAQ;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,eAC7D;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,eAAM;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,mDACtB;MAAAA,4DAAAA,UAAG;MAAAA,oDAAAA,UAAC;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,iHAEZ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,gBAA0B;MAEEA,oDAAAA,sBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,yBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,yJAIA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,WAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,kDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,WAAI;MAAIA,oDAAAA,cAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,gBAAqB;MACGA,oDAAAA,yBAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,iBAAoB;MAC5BA,oDAAAA,sBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,gBAAyB;MACrBA,oDAAAA,kEACA;MAAAA,4DAAAA,WAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,+DACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,kBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4DACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,8GAEQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,gGACA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,uCACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,yBAAe;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,wBAC5B;MADAA,0DAAAA,EAAI;MAQhBA,4DAAAA,gBAAuB;MAEAA,oDAAAA,4CAAkC;MAAAA,0DAAAA,EAAM;MAC/DA,uDAAAA,iBAAkF;MAClFA,4DAAAA,gBAA6B;MACzBA,oDAAAA,sKAGA;MAAAA,4DAAAA,YAAI;MACAA,oDAAAA,4CACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,4CACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,uDACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,0DACJ;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,+LAIA;MAAAA,4DAAAA,iBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0EAAgE;MAAAA,0DAAAA,EAAI;MAE1GA,oDAAAA,yBAAc;MAAAA,4DAAAA,eAAkC;MAAAA,oDAAAA,gBAAM;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,wCAE/D;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,sUAMX;MAAAA,0DAAAA,EAAO;MAGHA,oDAAAA,wHAGA;MAAAA,4DAAAA,iBAAkB;MAAAA,oDAAAA,iYAM8B;MAAAA,0DAAAA,EAAM;MAEtDA,oDAAAA,oDAEJ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,MAmCX;MAAAA,0DAAAA,EAAO;MAGHA,oDAAAA,4CACJ;MAAAA,4DAAAA,iBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0GAAgG;MAAAA,0DAAAA,EAAI;MAEtIA,oDAAAA,6EAEJ;MAAAA,4DAAAA,iBAAkB;MAClBA,oDAAAA,8yBAiBA;MAAAA,0DAAAA,EAAM;MAEFA,oDAAAA,wDAEJ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,2jFAqDX;MAAAA,0DAAAA,EAAO;MAGHA,oDAAAA,oDACA;MAAAA,4DAAAA,YAAI;MACAA,oDAAAA,0BAAiB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kDAAwC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,YAAI;MAAAA,oDAAAA,0BAAiB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kDAAwC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,YAAI;MAAAA,oDAAAA,4BAAmB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,YAAI;MAAAA,oDAAAA,4BAAmB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,YAAI;MAAAA,oDAAAA,2BAAkB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC7EA,4DAAAA,YAAI;MAAAA,oDAAAA,2BAAkB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAMjFA,4DAAAA,gBAAuB;MAEAA,oDAAAA,mCAAyB;MAAAA,0DAAAA,EAAM;MACtDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,+KAGA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,qGACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,gBAAM;MAAAA,0DAAAA,EAAO;MACjCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,6BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qEACf;MADAA,0DAAAA,EAAI;MAQhBA,4DAAAA,gBAAuB;MAEAA,oDAAAA,mCAAyB;MAAAA,0DAAAA,EAAM;MACtDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,iKAGA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,qIAEJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,0BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0DAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2DACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2JAEQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,6CACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,iBAAwB;MACDA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAM;MACnCA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAKZ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,k6CA6BX;MAAAA,0DAAAA,EAAO;MAKHA,4DAAAA,kBAA+B;MACPA,oDAAAA,0BAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,uBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,mEACA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,kBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0DACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,kBAA+B;MACPA,oDAAAA,qBAAW;MAAAA,0DAAAA,EAAO;MACtCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,+CACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,kJAEA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,mEACI;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0EAAgE;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,YAC3F;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,0DACZ;MAAAA,4DAAAA,iBAAkB;MAClBA,oDAAAA,qQAKA;MAAAA,0DAAAA,EAAM;MACMA,oDAAAA,wDAA8C;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kCAAwB;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,kDAGzG;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,+lCAqBX;MAAAA,0DAAAA,EAAO;MAQPA,4DAAAA,gBAAuB;MAEAA,oDAAAA,4CAAkC;MAAAA,0DAAAA,EAAM;MAC/DA,uDAAAA,iBAAkF;MAClFA,4DAAAA,gBAA6B;MACzBA,oDAAAA,sKAGA;MAAAA,4DAAAA,YAAI;MACAA,oDAAAA,4CACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,4CACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,uDACJ;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAAA,oDAAAA,0DACJ;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,+LAIA;MAAAA,4DAAAA,iBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0EAAgE;MAAAA,0DAAAA,EAAI;MAE1GA,oDAAAA,yBAAc;MAAAA,4DAAAA,eAAkC;MAAAA,oDAAAA,gBAAM;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,wCAE/D;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,sUAMX;MAAAA,0DAAAA,EAAO;MAEHA,oDAAAA,iIAEA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,wHAGA;MAAAA,4DAAAA,iBAAkB;MAAAA,oDAAAA,iYAM8B;MAAAA,0DAAAA,EAAM;MAEtDA,oDAAAA,oDAEJ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,MAmCX;MAAAA,0DAAAA,EAAO;MAGHA,oDAAAA,4CACJ;MAAAA,4DAAAA,iBAAkB;MAACA,oDAAAA;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0GAAgG;MAAAA,0DAAAA,EAAI;MAEtIA,oDAAAA,6EAEJ;MAAAA,4DAAAA,iBAAkB;MAClBA,oDAAAA,8yBAiBA;MAAAA,0DAAAA,EAAM;MAEFA,oDAAAA,wDAEJ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,4gFAoDX;MAAAA,0DAAAA,EAAO;MAGHA,oDAAAA,oDACA;MAAAA,4DAAAA,YAAI;MACAA,oDAAAA,0BAAiB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kDAAwC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,YAAI;MAAAA,oDAAAA,0BAAiB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kDAAwC;MAAAA,0DAAAA,EAAI;MACpFA,4DAAAA,YAAI;MAAAA,oDAAAA,4BAAmB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,YAAI;MAAAA,oDAAAA,4BAAmB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC9EA,4DAAAA,YAAI;MAAAA,oDAAAA,2BAAkB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAC7EA,4DAAAA,YAAI;MAAAA,oDAAAA,2BAAkB;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0CAAgC;MAAAA,0DAAAA,EAAI;MAMjFA,4DAAAA,gBAAuB;MAEAA,oDAAAA,mCAAyB;MAAAA,0DAAAA,EAAM;MACtDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,+KAGA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,qGACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,gBAAM;MAAAA,0DAAAA,EAAO;MACjCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,6BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,qEACf;MADAA,0DAAAA,EAAI;MAQhBA,4DAAAA,gBAAuB;MAEAA,oDAAAA,mCAAyB;MAAAA,0DAAAA,EAAM;MACtDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,iKAGA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,qIAEJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,0BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0DAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2DACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2JAEQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,6CACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,iBAAwB;MACDA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAM;MACnCA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAKZ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,k6CA6BX;MAAAA,0DAAAA,EAAO;MAKHA,4DAAAA,kBAA+B;MACPA,oDAAAA,0BAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,uBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,mEACA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,oDACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,kBAAQ;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,0DACrB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,kBAA+B;MACPA,oDAAAA,qBAAW;MAAAA,0DAAAA,EAAO;MACtCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,+CACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,kJAEA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,mEACI;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,0EAAgE;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,YAC3F;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,0DACZ;MAAAA,4DAAAA,iBAAkB;MAClBA,oDAAAA,qQAKA;MAAAA,0DAAAA,EAAM;MACMA,oDAAAA,wDAA8C;MAAAA,4DAAAA,eAAmB;MAAAA,oDAAAA,kCAAwB;MAAAA,0DAAAA,EAAI;MAAAA,oDAAAA,kDAG7F;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,+lCAqBvB;MAAAA,0DAAAA,EAAO;MAQPA,4DAAAA,gBAAuB;MAEAA,oDAAAA,iCAAuB;MAAAA,0DAAAA,EAAM;MACpDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,+CACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,0BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2DACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2GACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,6CACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,iBAAwB;MACDA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAM;MACnCA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAKZ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,8uCA2BX;MAAAA,0DAAAA,EAAO;MAKHA,4DAAAA,kBAA+B;MACPA,oDAAAA,0BAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,uBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,+BACJ;MAAAA,0DAAAA,EAAM;MAMdA,4DAAAA,gBAAuB;MAEAA,oDAAAA,iCAAuB;MAAAA,0DAAAA,EAAM;MACpDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,sDACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,0BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,6CACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2DACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2GACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,6CACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,iBAAwB;MACDA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAM;MACnCA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAKZ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,8uCA2BX;MAAAA,0DAAAA,EAAO;MAKHA,4DAAAA,kBAA+B;MACPA,oDAAAA,0BAAgB;MAAAA,0DAAAA,EAAO;MAC3CA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,uBACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,+BACJ;MAAAA,0DAAAA,EAAM;MAMdA,4DAAAA,gBAAuB;MAEAA,oDAAAA,6BAAmB;MAAAA,0DAAAA,EAAM;MAChDA,4DAAAA,gBAA6B;MACzBA,oDAAAA,wEACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA0B;MAEEA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,0BACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,0JAIA;MAAAA,4DAAAA,YAAI;MACIA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,yCACf;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MACJA,4DAAAA,YAAI;MAAIA,oDAAAA,eAAK;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,mDAClB;MADAA,0DAAAA,EAAI;MAKZA,4DAAAA,iBAAqB;MACGA,oDAAAA,uBAAa;MAAAA,0DAAAA,EAAO;MACxCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2DACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAGJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,wBAAc;MAAAA,0DAAAA,EAAO;MACzCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,2GACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MACrBA,oDAAAA,uKAIA;MAAAA,uDAAAA,YAAK;MACLA,oDAAAA,6CACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,iBAAwB;MACDA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAM;MACnCA,4DAAAA,iBAAyB;MACrBA,oDAAAA,8JAKZ;MAAAA,4DAAAA,aAAK;MAAMA,oDAAAA,wuCA2BX;MAAAA,0DAAAA,EAAO;MAKHA,4DAAAA,kBAA+B;MACPA,oDAAAA,qBAAW;MAAAA,0DAAAA,EAAO;MACtCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,cACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MAEbA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,4CACf;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,iDACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,kBAA+B;MACPA,oDAAAA,oBAAU;MAAAA,0DAAAA,EAAO;MACrCA,4DAAAA,kBAAoB;MAC5BA,oDAAAA,cACQ;MAAAA,0DAAAA,EAAO;MACPA,4DAAAA,iBAAyB;MAEbA,oDAAAA,YAAE;MAAAA,0DAAAA,EAAI;MAACA,oDAAAA,iDACf;MADAA,0DAAAA,EAAI;MAEJA,oDAAAA,mHAEJ;MAAAA,0DAAAA,EAAM;MASlBA,4DAAAA,iBAA0C;MAEqBA,oDAAAA,gBAAC;MAAAA,0DAAAA,EAAO;MAEnEA,4DAAAA,iBAAuB;MAC2CA,oDAAAA,mBAAS;MAAAA,0DAAAA,EAAS;MAEpFA,4DAAAA,oBAC4D;MAAAA,oDAAAA,qBAAW;MAAAA,0DAAAA,EAAS;MAEpFA,4DAAAA,eAAmE;MAC/DA,oDAAAA,mBACJ;MAAAA,0DAAAA,EAAI;;;MAjiEWA,uDAAAA,IAIJ;MAJIA,gEAAAA,+MAIJ;MA2/BIA,uDAAAA,MAmCX;MAnCWA,gEAAAA,y+DAmCX;MAwVWA,uDAAAA,KAmCX;MAnCWA,gEAAAA,y+DAmCX;;;;;;;;;;;;;;;;;;;;;;;;AC38C8B;;;;;;ICmBpCA,4DAAAA,UAAoB;IACfA,oDAAAA,GAAoB;IAAAA,0DAAAA,EAAI;;;;IAAxBA,uDAAAA,GAAoB;IAApBA,gEAAAA,+BAAoB;;;ADbrB,MAAOW,YAAY;EALzB5D;IAME,MAAC,GAAW,CAAC;IACb,MAAC,GAAW,CAAC;IACb,YAAO,GAAW,OAAO;IACzB,WAAM,GAAW,EAAE;IACnB,WAAM,GAAU,EAAE;IAMlB;IACA,MAAC,GAAsB2T,wCAAM,CAAC,CAAC,CAAC;IAChC,MAAC,GAAsBA,wCAAM,CAAC,CAAC,CAAC;IAEhC;IACA,MAAC,GAAsBA,wCAAM,CAAC,CAAC,CAAC;;EAThC/O,QAAQ;IACN,IAAI,CAACgP,YAAY,EAAE;EACrB;EASA;EACAA,YAAY;IACV,MAAMC,CAAC,GAAGF,wCAAM,CAAC,IAAI,CAACE,CAAC,CAAC;IACxB,MAAMC,CAAC,GAAGH,wCAAM,CAAC,IAAI,CAACG,CAAC,CAAC;IACxB,MAAMC,GAAG,GAAGF,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACH,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,IAAI,CAACE,CAAC,GAAGL,CAAC,CAACI,QAAQ,CAACH,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAACpD,CAAC,GAAGiD,wCAAM,CAAC,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAACL,GAAG,CAAC1M,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI,CAACgN,CAAC,GAAG,IAAI,CAACC,OAAO,CAAC,IAAI,CAAC5D,CAAC,EAAEqD,GAAG,CAAC,CAAC,CAAC;IACpC1O,OAAO,CAACC,GAAG,CAACyO,GAAG,CAAC1M,QAAQ,EAAE,CAAC;IAC3BhC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC4O,CAAC,CAAC7M,QAAQ,EAAE,CAAC;IAC9BhC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACoL,CAAC,CAACrJ,QAAQ,EAAE,CAAC;IAC9BhC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC+O,CAAC,CAAChN,QAAQ,EAAE,CAAC;EAChC;EAEAiN,OAAO,CAAC5D,CAAM,EAAEqD,GAAQ;IACtB,IAAI1N,IAAI,GAAGqK,CAAC,CAAC6D,MAAM,CAACR,GAAG,CAAC;IACxB,IAAIS,GAAG,GAAGb,wCAAM,CAAC,CAAC,CAAC;IACnB,IAAGtN,IAAI,CAACgB,QAAQ,EAAE,IAAIqJ,CAAC,CAACrJ,QAAQ,EAAE,EAAC;MACjCmN,GAAG,GAAGnO,IAAI,CAAC4L,GAAG,CAAC8B,GAAG,CAAC;;IAErB,OAAOS,GAAG;EACZ;EAEAL,MAAM,CAACJ,GAAW;IAChB,KAAI,IAAIvO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuO,GAAG,EAAGvO,CAAC,EAAE,EAAC;MAC3B,IAAG,IAAI,CAACiP,GAAG,CAACjP,CAAC,EAACuO,GAAG,CAAC,IAAI,CAAC,EAAC;QACtB,OAAOvO,CAAC;;;IAGZ,OAAO,CAAC;EACV;EAEAiP,GAAG,CAACC,CAAS,EAAEC,CAAS;IACtB,IAAIA,CAAC,KAAK,CAAC,EAAE;MACX,OAAOD,CAAC;;IAEV,OAAO,IAAI,CAACD,GAAG,CAACE,CAAC,EAAED,CAAC,GAAGC,CAAC,CAAC;EAC3B;EAEA;EACApG,OAAO;IACL,IAAI,CAACqG,MAAM,GAAG,EAAE;IAChB,IAAIrK,MAAM,GAAG,EAAE;IACf,KAAK,IAAI/E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqP,OAAO,CAAC1O,MAAM,EAAEX,CAAC,EAAE,EAAE;MAC5C,MAAMsP,CAAC,GAAGnB,wCAAM,CAAC,IAAI,CAACkB,OAAO,CAACE,UAAU,CAACvP,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC,CAAC;MACjDH,OAAO,CAACC,GAAG,CAACwP,CAAC,CAAC;MACd,MAAME,CAAC,GAAGF,CAAC,CAACG,MAAM,CAAC,IAAI,CAACvE,CAAC,EAAE,IAAI,CAACwD,CAAC,CAAC,CAAC,CAAC;MACpC,IAAIgB,IAAI,GAAGJ,CAAC,CAACK,UAAU,EAAE;MACzB,IAAIC,IAAI,GAAG,IAAI,CAAClB,CAAC,CAACiB,UAAU,EAAE;MAC9B,IAAI,CAACP,MAAM,CAACnP,IAAI,CAACE,IAAI,CAACC,KAAK,CAACsP,IAAI,GAACE,IAAI,CAAC,CAAC;MACvC7K,MAAM,IAAIyK,CAAC,CAAC3N,QAAQ,EAAE,GAAG,GAAG,CAAC,CAAC;;;IAEhC,IAAI,CAACkD,MAAM,GAAGA,MAAM,CAAC8K,IAAI,EAAE,CAAC,CAAC;EAC/B;EAEA;EACAzG,OAAO;IACL,MAAM0G,eAAe,GAAG,IAAI,CAAC/K,MAAM,CAAC8K,IAAI,EAAE,CAACvN,KAAK,CAAC,GAAG,CAAC;IACrDzC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsP,MAAM,CAAC;IACxB;IACA,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAIrP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8P,eAAe,CAACnP,MAAM,EAAEX,CAAC,EAAE,EAAE;MAC/C,MAAMwP,CAAC,GAAGrB,wCAAM,CAAC2B,eAAe,CAAC9P,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC,IAAIsP,CAAC,GAAGE,CAAC,CAACC,MAAM,CAAC,IAAI,CAACZ,CAAC,EAAE,IAAI,CAACH,CAAC,CAAC;MAChC,IAAI7N,IAAI,GAAGyO,CAAC,CAACK,UAAU,EAAE;MACzB,KAAI,IAAI/O,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAACwO,MAAM,CAACpP,CAAC,CAAC,EAAEY,CAAC,EAAE,EAAC;QACtCC,IAAI,IAAI,IAAI,CAAC6N,CAAC,CAACiB,UAAU,EAAE;;MAE7BL,CAAC,GAAGnB,wCAAM,CAACtN,IAAI,CAAC;MAChBhB,OAAO,CAACC,GAAG,CAACwP,CAAC,CAAC;MACdzP,OAAO,CAACC,GAAG,CAACwP,CAAC,CAACK,UAAU,EAAE,CAAC;MAC3BN,OAAO,IAAIU,MAAM,CAACC,YAAY,CAACV,CAAC,CAACK,UAAU,EAAE,GAAC,EAAE,CAAC,CAAC,CAAC;;;IAErD,IAAI,CAAC5K,MAAM,GAAGsK,OAAO,CAACQ,IAAI,EAAE,CAAC,CAAC;EAChC;;SA5FWzR,YAAY;;mBAAZA,MAAY;AAAA;;QAAZA,MAAY;EAAAhB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCRzBC,uDAAAA,aAA0C;MAE1CA,4DAAAA,UAAK;MACYA,oDAAAA,6BAAsB;MAAAA,0DAAAA,EAAQ;MAC7CA,4DAAAA,eAAgC;MAAlBA,wDAAAA;QAAA;MAAA,EAAe;MAA7BA,0DAAAA,EAAgC;MAAAA,uDAAAA,SAAM;MACtCA,4DAAAA,eAAe;MAAAA,oDAAAA,6BAAsB;MAAAA,0DAAAA,EAAQ;MAC7CA,4DAAAA,eAAgC;MAAlBA,wDAAAA;QAAA;MAAA,EAAe;MAA7BA,0DAAAA,EAAgC;MAAAA,uDAAAA,SAAM;MACtCA,4DAAAA,gBAAqB;MAAAA,oDAAAA,kCAA0B;MAAAA,0DAAAA,EAAQ;MACvDA,4DAAAA,gBAA4C;MAAxBA,wDAAAA;QAAA;MAAA,EAAqB;MAAzCA,0DAAAA,EAA4C;MAAAA,uDAAAA,UAAM;MAClDA,4DAAAA,iBAAiC;MAAzBA,wDAAAA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,oDAAAA,qBAAa;MAAAA,0DAAAA,EAAS;MACvDA,4DAAAA,cAAqB;MACnBA,oDAAAA,IACA;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,IACA;MAAAA,uDAAAA,UAAI;MACJA,oDAAAA,IACF;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,iBAA4B;MAApBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;MAC5CA,4DAAAA,iBAA4B;MAApBA,wDAAAA;QAAA,OAASC,aAAS;MAAA,EAAC;MAACD,oDAAAA,eAAO;MAAAA,0DAAAA,EAAS;MAE5CA,wDAAAA,kDAEM;MACRA,0DAAAA,EAAM;;;MAnBUA,uDAAAA,GAAe;MAAfA,wDAAAA,kBAAe;MAEfA,uDAAAA,GAAe;MAAfA,wDAAAA,kBAAe;MAETA,uDAAAA,GAAqB;MAArBA,wDAAAA,wBAAqB;MAGvCA,uDAAAA,GACA;MADAA,gEAAAA,kCACA;MACAA,uDAAAA,GACA;MADAA,gEAAAA,kCACA;MACAA,uDAAAA,GACF;MADEA,gEAAAA,mCACF;MAIMA,uDAAAA,GAAY;MAAZA,wDAAAA,oBAAY;;;;;;;;;;;;;;;;;;;;;;ACbd,MAAOtB,cAAc;SAAdA,cAAc;;mBAAdA,MAAc;AAAA;;QAAdA,MAAc;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP3BC,4DAAAA,aAAuB;MACfA,oDAAAA,2BAAoB;MAAAA,0DAAAA,EAAK;MAC7BA,4DAAAA,QAAG;MAAAA,oDAAAA,0FAAmF;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;ACOxF,MAAOG,eAAe;EAG1BpD;IAFoC,aAAQ,GAAG,KAAK;IAGlDqO,MAAM,CAACoH,QAAQ,GAAG,MAAK;MACrB,IAAI,CAACC,QAAQ,GAAGrH,MAAM,CAACsH,WAAW,GAAG,CAAC;IACxC,CAAC;EACH;;SAPWvS,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAAR;EAAAgT;EAAAC;IAAA;;;;;;;;;;MAJxB5S,0DAAAA,GAAyB;;;;;;;;;;;;;;;;;;;;;;;ACEvB,MAAOrB,aAAa;EAL1B5B;IAME,eAAU,GAAG,KAAK;;EAGlB8V,cAAc;IACZ,IAAKzH,MAAM,CAACmD,WAAW,GAAGnD,MAAM,CAAC0H,OAAO,IAAKxO,QAAQ,CAACyO,IAAI,CAACC,YAAY,GAAE,CAAC,EAAE;MAC1E,IAAI,CAACC,UAAU,GAAG,IAAI;KACvB,MAAM;MACL,IAAI,CAACA,UAAU,GAAG,KAAK;;EAE3B;;SAVWtU,aAAa;;mBAAbA,MAAa;AAAA;;QAAbA,MAAa;EAAAgB;EAAAiT;IAAA;;eAAb3S,0BACP;MAAA;;;;;;;;MCRND,4DAAAA,aAAwB;MAIRA,oDAAAA,6CAAsC;MAAAA,0DAAAA,EAAK;MAGnDA,4DAAAA,aAAiB;MACbA,uDAAAA,aAAkE;MACtEA,0DAAAA,EAAM;MAEVA,4DAAAA,QAAG;MAAAA,oDAAAA,uCAAgC;MAAnCA,0DAAAA,EAAG;MAAgCA,uDAAAA,QAAG;MAEtCA,4DAAAA,cAAqB;MAEbA,uDAAAA,cAAiD;MACrDA,0DAAAA,EAAM;MACNA,4DAAAA,cAAsB;MACdA,oDAAAA,qYACJ;MAAAA,0DAAAA,EAAI;MAKZA,4DAAAA,cAAqB;MACbA,oDAAAA,wCAAgC;MAAAA,0DAAAA,EAAK;MAG7CA,4DAAAA,eAAkB;MAGNA,uDAAAA,eAAkD;MACtDA,0DAAAA,EAAM;MAENA,4DAAAA,eAAkB;MACdA,oDAAAA,6BACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,cAAsB;MAClBA,oDAAAA,6KACJ;MAAAA,0DAAAA,EAAM;MAGVA,4DAAAA,eAAgB;MAERA,uDAAAA,eAAqD;MACzDA,0DAAAA,EAAM;MAENA,4DAAAA,eAAkB;MACdA,oDAAAA,0BACJ;MAAAA,0DAAAA,EAAM;MACNA,4DAAAA,cAAsB;MAClBA,oDAAAA,8MACJ;MAAAA,0DAAAA,EAAM;MAQlBA,4DAAAA,kBAAY;MAGDA,oDAAAA,2EAA8D;MAAAA,0DAAAA,EAAI;MAEjEA,4DAAAA,UAAI;MAAYA,oDAAAA,gBAAQ;MAAAA,0DAAAA,EAAI;MAC5BA,4DAAAA,UAAI;MAAYA,oDAAAA,kBAAU;MAAAA,0DAAAA,EAAI;MAC9BA,4DAAAA,UAAI;MAAYA,oDAAAA,sBAAc;MAAAA,0DAAAA,EAAI;MAClCA,4DAAAA,UAAI;MAAYA,oDAAAA,wBAAgB;MAAAA,0DAAAA,EAAI;;;;;;;;;;;;;;;;;;;AClEH;AAG7CkT,sEAAAA,EAAwB,CAACC,eAAe,CAAChS,sDAAS,CAAC,CAChDiS,KAAK,CAACC,GAAG,IAAIjR,OAAO,CAACkR,KAAK,CAACD,GAAG,CAAC,CAAC","sources":["./src/app/Services/courses.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/career/career.component.html","./src/app/career/career.component.ts","./src/app/contact/contact.component.ts","./src/app/contact/contact.component.html","./src/app/courses/courses.component.html","./src/app/courses/courses.component.ts","./src/app/courses/csc121/bubble-sort/bubble-sort.component.ts","./src/app/courses/csc121/bubble-sort/bubble-sort.component.html","./src/app/courses/csc121/csc121.component.html","./src/app/courses/csc121/csc121.component.ts","./src/app/courses/csc121/duplicate/duplicate.component.html","./src/app/courses/csc121/duplicate/duplicate.component.ts","./src/app/courses/csc121/forloop/forloop.component.html","./src/app/courses/csc121/forloop/forloop.component.ts","./src/app/courses/csc121/insertion-sort/insertion-sort.component.ts","./src/app/courses/csc121/insertion-sort/insertion-sort.component.html","./src/app/courses/csc121/missing/missing.component.html","./src/app/courses/csc121/missing/missing.component.ts","./src/app/courses/csc121/selection-sort/selection-sort.component.ts","./src/app/courses/csc121/selection-sort/selection-sort.component.html","./src/app/courses/csc122/csc122.component.html","./src/app/courses/csc122/csc122.component.ts","./src/app/courses/csc122/hashmap/hashmap.component.html","./src/app/courses/csc122/hashmap/hashmap.component.ts","./src/app/courses/csc122/linked-list/linked-list.component.html","./src/app/courses/csc122/linked-list/linked-list.component.ts","./src/app/courses/csc231/csc231.component.ts","./src/app/courses/csc231/csc231.component.html","./src/app/courses/csc232/csc232.component.ts","./src/app/courses/csc232/csc232.component.html","./src/app/courses/csc233/csc233.component.ts","./src/app/courses/csc233/csc233.component.html","./src/app/courses/csc240/csc240.component.ts","./src/app/courses/csc240/csc240.component.html","./src/app/courses/csc340/WindowRefService.ts","./src/app/courses/csc340/caesar-cipher/caesar-cipher.component.ts","./src/app/courses/csc340/caesar-cipher/caesar-cipher.component.html","./src/app/courses/csc340/csc340.component.html","./src/app/courses/csc340/csc340.component.ts","./src/app/courses/csc340/ecc/ecc.component.ts","./src/app/courses/csc340/ecc/ecc.component.html","./src/app/courses/csc340/illustrated/illustrated.component.ts","./src/app/courses/csc340/illustrated/illustrated.component.html","./src/app/courses/csc340/rsa/rsa.component.ts","./src/app/courses/csc340/rsa/rsa.component.html","./src/app/error/error.component.ts","./src/app/error/error.component.html","./src/app/footer/footer.component.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/main.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoursesService {\n\n  courses = [\n    { id:101, name:'Computer Science I', author: 'John Heikela', credit: 1, code: 'CSC 121', image:'./assets/courses/121.jpeg',\n      description: 'This is an introductory course in which problem solving and algorithm development are studied by considering computer science topics, such as computer graphics, graphical user interfaces, modeling and simulation, artificial intelligence and information management systems.\\\n      Interesting and relevant programming assignments related to these topics are written in a high-level programming language that supports objects. Additional assignments utilize writing and data analysis to reinforce central course concepts and to address related areas of computing, such as ethics, history and the meaning of intelligence. \\\n      The course meets three hours in class and two hours in laboratory (3-2). Offered each semester.'\n    },\n    { id:102, name:'Data Structure', author: 'Mark Vought', credit: 1, code: 'CSC 122',  image:'./assets/courses/122.jpg',\n      description: 'This course builds on CSC 121 and includes programming topics such as sorting and searching, sets, recursion and dynamic data types. \\\n      Additional concepts involve data type abstraction and implementation developed through studying structures such as lists, stacks, queues, hash tables and binary search trees. \\\n      The course emphasizes object oriented implementation of these structures. Students learn tools for algorithm analysis and explore the use of standard libraries. \\\n      The concept of tradeoffs (i.e., time vs. space, iteration vs. recursion, static vs. dynamic) recurs as a theme throughout the course.'\n    },\n    \n    { id:107, name:'Web Programming And Cybersecurity', author: 'Merry Smith', credit: 1, code: 'CSC 340', image:'./assets/courses/340.jpeg',\n      description: 'This course covers some fundamental networking concepts, web application development and web application security. Topics covered include: introduction to the Internet, World Wide Web and internet protocols, markup languages, client side scripting, server side scripting, database concepts, encryption/decryption, web application vulnerabilities and how to build secure web applications.'\n    },\n    { id:108, name:'Graphics', author: 'Steve Smith', credit: 1, code: 'CSC 350', image:'./assets/courses/350.jpg',\n      description: 'his course is an introduction to the concepts, techniques, algorithms and implementation of computer graphics. Topics include moving and drawing lines in absolute and relative coordinates, transformations, windowing, clipping, projections, perspective, polygon filling, hidden surface techniques and a variety of applications, including graphical user interfaces and menuing systems. '\n    },\n    { id:103, name:'Computer Systems', author: 'Steve Smith', credit: 1, code: 'CSC 231', image:'./assets/courses/231.jpeg',\n      description: 'This is an introduction to the study of computer hardware and its relationship to software. \\\n      Topics include information representation, architecture of the central processing unit, memory organization and hierarchy, \\\n      assembly language and machine level representation of programs, interactions and relationships among system components (hardware, operating systems, compilers, network environments), and the impact of architectural decisions on performance.'\n    },\n    { id:104, name:'Object Oriented Software Development', author: 'Steve Smith', credit: 1, code: 'CSC 232',  image:'./assets/courses/232.jpeg',\n      description: 'A study of fundamental techniques and tools for managing software development projects, together with relevant professional and ethical issues. Topics include methodologies such as UML diagrams for software specification and design, documentation standards, and tools for testing, code management, analysis, and debugging. \\\n      Object oriented programming techniques such as inheritance and polymorphism are emphasized. Students will develop skills in individual and team software development through extensive practice designing and implementing object oriented software systems. \\\n      In addition, students gain experience reading, documenting, presenting and critiquing such systems.'\n    },\n    { id:105, name:'Foundation Of Computation', author: 'John Heikela', credit: 1, code: 'CSC 233',  image:'./assets/courses/233.jpg',\n      description: 'This course explores the theoretical foundations of computation at various levels of abstraction. Specific topics include graph theory and related algorithms; \\\n      functional programming with an emphasis on recursion and recurrences; \\\n      the description of languages using formalisms such as regular expressions, finite state machines, and context free grammars; and digital logic and its application to sequential and combinational circuits. '\n    },\n    { id:106, name:'Writing In Computer Science', author: 'Mark Vought', credit: 0.5, code: 'CSC 240', image:'./assets/courses/240.jpeg',\n      description: 'In this course students learn to communicate technical and non-technical information about computer science to technical and non-technical audiences. \\\n      This writing includes communication with users (e.g., user manuals), the general public (e.g., op-ed pieces related to technical issues), and other non-technical audiences (e.g., legislators, potential investors, customers). \\\n      Students also develop a project proposal document. Some of the writing in this course deals with ethical and social issues. '\n    },\n    // { id:109, name:'Data Mining', author: 'Steve Smith', credit: 1.0, code: 'CSC 370',  image:'./assets/courses/370.jpeg',\n    //   description: 'Data mining is the effort to reach useful conclusions from data by building interpretive and predictive computational models. This course prepares students to do this through hands-on exploration of data preparation, and model development, tuning, and validation. This is done in the context of various algorithms such as gradient-descent, ensemble methods, and linear regression. Coursework includes multiple significant programming projects and a large final project.'\n    // }\n  ]\n\n\n  getAllCourses(): any{\n    const courseList = new Promise((resolve, reject)=>{\n      setTimeout(()=> {\n        resolve(this.courses)\n      }, 5000)\n    })\n\n    return courseList\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ContactComponent } from './contact/contact.component';\nimport { CoursesComponent } from './courses/courses.component';\nimport { Csc121Component } from './courses/csc121/csc121.component';\nimport { Csc122Component } from './courses/csc122/csc122.component';\nimport { Csc231Component } from './courses/csc231/csc231.component';\nimport { Csc232Component } from './courses/csc232/csc232.component';\nimport { Csc233Component } from './courses/csc233/csc233.component';\nimport { Csc240Component } from './courses/csc240/csc240.component';\nimport { Csc340Component } from './courses/csc340/csc340.component';\nimport { ErrorComponent } from './error/error.component';\nimport { HomeComponent } from './home/home.component';\nimport { CareerComponent } from './career/career.component';\n\nconst appRoute: Routes =[\n  {path: '',redirectTo: 'Home', pathMatch: 'full'},\n  {path: 'Home',component: HomeComponent},\n  {path: 'Contact',component: ContactComponent},\n  {path: 'Courses',component: CoursesComponent},\n  {path: 'Career', component: CareerComponent},\n  {path:'Courses',children:[\n    {path:'Course/101' ,component:  Csc121Component},\n    {path: 'Course/102', component: Csc122Component},\n    {path: 'Course/103',component:  Csc231Component},\n    {path: 'Course/104',component:  Csc232Component},\n    {path: 'Course/105',component:  Csc233Component},\n    {path: 'Course/106',component:  Csc240Component},\n    {path: 'Course/107',component:  Csc340Component}\n  ]},\n  {path: '**', component: ErrorComponent}\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(appRoute,{enableTracing:true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n// import { Object } from 'core-js';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CSCStudyITAP';\n\n  login(){\n\n  }\n\n  logout(){\n    \n  }\n}\n","<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\" rel=\"stylesheet\">\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Open+Sans&display=swap\">\n<link href=\"https://fonts.googleapis.com/css2?family=Montserrat&family=Poppins:ital,wght@0,500;1,200&family=Press+Start+2P&display=swap\" rel=\"stylesheet\">\n\n<div class=\"main-container\">\n  <div class=\"nav-container\">\n      <ul>\n          <li [routerLinkActive]=\"'active'\"><a routerLink=\"Home\">Home</a></li>\n          <li [routerLinkActive]=\"'active'\"><a [routerLink]=\"['Contact']\">Contact</a></li>\n          <li [routerLinkActive]=\"'active'\"><a routerLink=\"Courses\">Courses</a></li>\n          <li [routerLinkActive]=\"'active'\"><a routerLink=\"Career\">Career Resources</a></li>\n          <span style=\"float:right\">\n              <li (click) = \"login()\"><a>Login</a></li>\n              <li (click) = \"logout()\"><a>Logout</a></li>\n          </span>\n          <div class=\"image-container\">\n            <img src=\"assets/images/logo.png\" alt=\"\" width=\"45px\" height=\"45px\">\n          </div>\n      </ul>\n  </div>\n  <div class=\"component-container\">\n      <router-outlet id=\"Course\"></router-outlet>\n  </div> \n</div>\n\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {APP_BASE_HREF} from '@angular/common';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FooterComponent } from './footer/footer.component';\nimport { HomeComponent } from './home/home.component';\nimport { ContactComponent } from './contact/contact.component';\nimport { CoursesComponent } from './courses/courses.component';\nimport { ErrorComponent } from './error/error.component';\nimport { CoursesService } from './Services/courses.service';\nimport { Csc121Component } from './courses/csc121/csc121.component';\nimport { Csc122Component } from './courses/csc122/csc122.component';\nimport { Csc231Component } from './courses/csc231/csc231.component';\nimport { Csc232Component } from './courses/csc232/csc232.component';\nimport { Csc233Component } from './courses/csc233/csc233.component';\nimport { Csc240Component } from './courses/csc240/csc240.component';\nimport { Csc340Component } from './courses/csc340/csc340.component';\nimport { FormsModule, NgModel } from '@angular/forms';\nimport { LinkedListComponent } from './courses/csc122/linked-list/linked-list.component';\nimport { BubbleSortComponent } from './courses/csc121/bubble-sort/bubble-sort.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { InsertionSortComponent } from './courses/csc121/insertion-sort/insertion-sort.component';\nimport { SelectionSortComponent } from './courses/csc121/selection-sort/selection-sort.component';\n// import { CaesarCipherComponent } from './courses/csc340/caesar-cipher/caesar-cipher.component';\n// import { ContentComponent } from './courses/csc340/content/content.component';\nimport { HashmapComponent } from './courses/csc122/hashmap/hashmap.component';\nimport { RsaComponent } from './courses/csc340/rsa/rsa.component';\nimport { EccComponent } from './courses/csc340/ecc/ecc.component';\nimport { CaesarCipherComponent } from './courses/csc340/caesar-cipher/caesar-cipher.component';\nimport { ForloopComponent } from './courses/csc121/forloop/forloop.component';\nimport { DuplicateComponent } from './courses/csc121/duplicate/duplicate.component';\nimport { MissingComponent } from './courses/csc121/missing/missing.component';\nimport { CareerComponent } from './career/career.component';\nimport { WindowRefService } from './courses/csc340/WindowRefService';\nimport { IllustratedComponent } from './courses/csc340/illustrated/illustrated.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    ContactComponent,\n    CoursesComponent,\n    ErrorComponent,\n    Csc121Component,\n    Csc122Component,\n    Csc231Component,\n    Csc232Component,\n    Csc233Component,\n    Csc240Component,\n    Csc340Component,\n    LinkedListComponent,\n    BubbleSortComponent,\n    InsertionSortComponent,\n    SelectionSortComponent,\n    FooterComponent,\n    // CaesarCipherComponent,\n    // ContentComponent,\n    HashmapComponent,\n    RsaComponent,\n    RsaComponent,\n    EccComponent,\n    CaesarCipherComponent,\n    ForloopComponent,\n    DuplicateComponent,\n    MissingComponent,\n    CareerComponent,\n    IllustratedComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    BrowserAnimationsModule\n  ],\n  providers: [CoursesService, WindowRefService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"career-websites\">\n    <h1>Career Websites</h1>\n  \n    <ul>\n      <li *ngFor=\"let careerPage of careerPages\">\n        <a href=\"{{careerPage.link}}\">\n          <img src=\"{{careerPage.imageUrl}}\" alt=\"{{careerPage.title}}\">\n          {{careerPage.title}}\n        </a>\n      </li>\n    </ul>\n  </div>","import { Component } from '@angular/core';\n\n\ninterface CareerPage {\n  title: string;\n  link: string;\n  imageUrl: string;\n}\n\n\n\n@Component({\n  selector: 'app-career',\n  templateUrl: './career.component.html',\n  styleUrls: ['./career.component.css']\n})\nexport class CareerComponent {\n  \n  careerPages: CareerPage[] = [\n    {\n      title: 'LinkedIn',\n      link: 'https://www.linkedin.com/',\n      imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/LinkedIn_Logo_2011.svg/2048px-LinkedIn_Logo_2011.svg.png'\n    },\n    {\n      title: 'Handshake',\n      link: 'https://handshake.co/',\n      imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Handshake_logo.svg/2048px-Handshake_logo.svg.png'\n    },\n    {\n      title: 'Glassdoor',\n      link: 'https://www.glassdoor.com/',\n      imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Glassdoor_logo.svg/2048px-Glassdoor_logo.svg.png'\n    }\n  ];\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent {\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"column\" id = \"Khadija\">\n            <h3>Prof. Khadija Steward</h3>\n            <div class=\"profile-link\">\n                <img class=\"profile-pic\" src=\"./assets/images/kha2.jpg\"/>\n            </div>\n\n            <div class = \"description\">\n                <div class=\"personal-information\">\n                    <p>\n                        HERRICK E.H. GREENLEAF PROFESSOR OF COMPUTER SCIENCE AND PROFESSOR OF COMPUTER SCIENCE\n                        <br>\n                        Ph.D in Electrical and Computer Engineering from Southern Illinois University, Carbondale IL.\n                        <br>\n                        M.S in Electrical Engineering from Southern Illinois University, Carbondale IL.\n                        <br>\n                        B.S in Computer Engineering form Clemson University, Clemson SC. \n                    </p>\n                </div>\n        \n            \n                <div class=\"info\">\n                    <ul>\n                        <li><b>Email: </b>khadijastewart@depauw.edu </li>\n                        <li>Profile: <link rel=\"stylesheet\" href=\"http://academic.depauw.edu/~khadijastewart/main.htm\"> Personal Website</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"column\">\n            <h3>Minh Thy Nguyen</h3>\n            <div class=\"profile-link\">\n                <img class=\"profile-pic\" src=\"./assets/images/thie.jpg\"/>\n            </div>\n            <div class = \"description\">\n                <p> Investment Analyst Intern @ CornerStone Partners <br>\n                    Former Finance & Strategy Intern @ Salesforce <br>\n                    Economics & Computer Science @ DePauw University\n                </p>\n                <div class=\"info\">\n                    <ul>\n                        <li>Email: minhthynguyen_2024@depauw.edu</li>\n                        <li>Profile: Minh Thy</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"column\" id = \"Alan\">\n            <h3>Tuan (Alan) Le</h3>\n            <div class=\"profile-link\">\n                <img class=\"profile-pic\" src=\"./assets/images/tuan.jpg\"/>\n            </div>\n    \n            <div class = \"description\">\n                <p>Data Science Intern @ Zotec Partners <br>\n                    Former Software Engineer Intern @ FPT Software <br>\n                    Research Assistant @ DePauw University</p>\n            \n        \n                <div class=\"info\">\n                    <ul>\n                        <li>Email: tuanle_2024@depauw.edu</li>\n                        <li>Profile: Tuan Le</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n","<div class=\"container\">\n    <h2>All Courses</h2>\n    <ng-container *ngFor=\"let course of courses\">\n        <div class=\"course-container\">\n            <div class=\"course-card\">\n                <div clas=\"img-container\">\n                    <img [src]=\"course.image\" width=\"355px\" height=\"200px\">\n                </div>\n                <div class=\"course-name\"><h4>{{ course.name}}<br>Code: {{course.code}}</h4></div>\n                <div class=\"course-description\"><p>{{course.description}}</p></div>\n                <div class=\"course-buttons\">\n                    <button class=\"btn btn-show\" routerLink=\"/Courses/Course/{{course.id}}\">Show Details</button>\n                </div>\n            </div>\n        </div>  \n    </ng-container>\n    <router-outlet></router-outlet>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoursesService } from '../Services/courses.service';\n\n@Component({\n  selector: 'app-courses',\n  templateUrl: './courses.component.html',\n  styleUrls: ['./courses.component.css']\n})\nexport class CoursesComponent implements OnInit {\n\n\n  constructor(private coursesService: CoursesService, private route: ActivatedRoute) { }\n\n  courses: { id: number; name: string; author: string; credit: number; code: string; image: string; description: string; }[] = [];\n\n  ngOnInit(): void {\n    this.courses = this.coursesService.courses;\n    this.coursesService.getAllCourses().then((data: { id: number; name: string; author: string; credit: number; code: string; image: string; description: string; }[])=>{\n      this.courses = data;\n    })\n    // this.courses = this.route.snapshot.data['courses'];\n\n\n  }\n\n\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n\ninterface Item {\n  value: number;\n  color: string;\n  state: string;\n  x: number;\n}\n\n@Component({\n  selector: 'app-bubble-sort',\n  templateUrl: './bubble-sort.component.html',\n  styleUrls: ['./bubble-sort.component.css'],\n  animations: [\n    trigger('swap', [\n      state('inactive', style({\n        backgroundColor: 'lightblue'\n      })),\n      state('active', style({\n        backgroundColor: 'red'\n      })),\n\n      transition('inactive => active', animate('2s')),\n      transition('active => inactive', animate('1s'))\n    ])\n  ]\n})\n\n\nexport class BubbleSortComponent implements OnInit{\n  items: Item[]= [];\n  width = 0.5 \n  input1 = \"\" \n  input2 = \"\"\n  input3 = \"\"\n  checkres = false\n  clickpractice = false\n\n  ngOnInit() {\n    this.generateArray()\n    console.log(this.items)\n  }\n\n  generateArray(){\n    this.items = []\n    for (let i = 0; i < 15; i++) {\n      this.items.push({\n        value: Math.floor(Math.random() * 100) + 1,\n        color: 'lightblue',\n        state: 'inactive',\n        x: i*this.width\n      });\n    }\n  }\n\n  async bubbleSort() {\n    this.stopSor = false\n    for (let i = 0; i < this.items.length; i++) {\n      for (let j = i+1; j < this.items.length; j++) {\n        if(this.stopSor==false){\n          await new Promise(resolve => setTimeout(resolve, 500));\n          this.items[j].state = 'active';\n          this.items[i].state = 'active';\n          await new Promise(resolve => setTimeout(resolve, 500));\n          if (this.items[i].value > this.items[j].value) {\n            const temp = this.items[j];\n            this.items[j] = this.items[i];\n            this.items[i] = temp;\n          }\n          setTimeout(() => {\n            this.items[j].state = 'inactive';\n            this.items[i].state = 'inactive';\n          }, 200);\n        }\n        else{\n          return\n        }\n  \n      }\n    }\n  }\n  stopSor: boolean = false\n\n  stopSort(){\n    this.stopSor = true\n  }\n\n  checkInput(){\n    if( this.input1 == \"i+1\" || this.input1 == \" i + 1 \" ||  this.input1 == \"i + 1\" ||  this.input1 == \"i+ 1\"){\n      if(this.input2 == \"i\" && this.input3 == \"j\"){\n        this.checkres = true\n      }\n      else if(this.input2 == \"j\" && this.input3 == \"i\"){\n        this.checkres = true\n      }\n    }\n    else{\n      this.checkres = false\n    }\n  }\n\n  practiceCode(){\n    this.clickpractice = !this.clickpractice\n  }\n\n}\n\n","\n<div class=\"main-container\">\n    \n    <div class = \"bubble-sort-btn\">\n        <div class=\"chapter-header\">\n            Bubble Sort Algorithm\n        </div>\n        <button class=\"sort-btn\" (click)=\"bubbleSort()\">Bubble Sort</button>\n        <button class=\"new-array-btn\" (click)=\"generateArray()\">Generate New Array</button>\n        <button class=\"stop-array-btn\" (click)=\"stopSort()\">Stop</button>\n        <button class=\"stop-array-btn\" (click)=\"practiceCode()\">Practice Code</button>\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"element\" *ngFor=\"let item of items\" [@swap]=\"item.state\" [style.height.px]=\"item.value*2\" [style.background-color]=\"item.color\"  [ngStyle]=\"{'margin-left.px': item.x}\">\n            {{item.value}}\n        </div>\n    </div>\n\n</div>\n\n<div class=\"practice-code\" *ngIf=\"clickpractice\">\n    <pre>\n    <div class=\"practice\">\n        <div class=\"code\">\n            <code>\nFilling in the missing places to complete the Bubble Sort Algorithm\n<br>\nfor (int i = 0; i < array.length; i++) {{ '{' }}\n    for (int j = <input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input1\" (ngModelChange)=\"checkInput()\"/>; j < array.length; j++) {{ '{' }}\n        if (array[i] >=  array[j]) {{ '{' }}\n            int temp = array[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/>];\n            array[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/>] = array[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input3\" (ngModelChange)=\"checkInput()\"/>];\n            array[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input3\" (ngModelChange)=\"checkInput()\"/>] = temp;\n        {{ '}' }}\n    {{ '}' }}\n{{ '}' }}\n\n        </code>\n        </div>\n\n        <div class=\"solution\" *ngIf=\"input1 && input2 && input3\">\n            <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                <p>You Make A Mistake!</p>\n            </div>\n            <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                <p>You Are Correct!</p>\n            </div>\n        </div>\n    </div>\n    </pre>\n</div>\n\n\n","<h1 class=\"chapter-header\">\n    Data Type in Computer Science\n</h1>\n<p class=\"dataDescription\">\n    In computer science and computer programming, a data type (or simply type) is a collection or grouping of data values, usually specified by a set of possible values, a set of allowed operations on these values, and/or a representation of these values as machine types.\n    A data type specification in a program constrains the possible values that an expression, such as a variable or a function call, might take. On literal data, it tells the compiler or interpreter how the programmer intends to use the data.\n</p>\n\n\n<div class=\"table\">\n    <div class=\"row\">\n      <div class=\"header\"><b>Data Type</b></div>\n      <div class=\"header\"><b>Description</b></div>\n      <div class=\"header\"><b>Storage Capacity</b></div>\n      <div class=\"header\"><b>Example</b></div>\n    </div>\n    <div class=\"row\">\n      <div class=\"cell\">Integer (int)</div>\n      <div class=\"cell\">Stores whole numbers that are Natural numbers. Using 4 bytes or 32 bits to store an Integer</div>\n      <div class=\"cell\">Ranging from -2,147,483,647 to 2,147,483,647</div>\n      <div class=\"cell\">13  21  36</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"cell\">Integer (long)</div>\n      <div class=\"cell\">Represent integers, or whole numbers. It is similar to the int data type, but it is typically larger in size using 64 bits and can store a wider range of values.</div>\n      <div class=\"cell\">Ranging from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</div>\n      <div class=\"cell\">223372036854775808</div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"cell\">Floating Points (float)</div>\n        <div class=\"cell\">Represent floating-point numbers, or numbers with decimal places. It is a primitive data type that can store positive or negative real numbers, including numbers with decimal places.</div>\n        <div class=\"cell\">Implemented as a double-precision floating-point number, with a precision of 15-17 decimal places.</div>\n        <div class=\"cell\">2.3  3.4  1.7</div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"cell\">Floating Points (double)</div>\n        <div class=\"cell\">Similar to the float data type, but it is typically larger in size and provides a higher precision for storing floating-point numbers. \n            The size of a double data type varies depending on the programming language and system, but it typically ranges from 64 to 128 bits.</div>\n        <div class=\"cell\">Implemented as a double-precision floating-point number, with a precision of 30-35 decimal places.</div>\n        <div class=\"cell\">2.132412343247</div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"cell\">String (string)</div>\n        <div class=\"cell\"> Represent sequences of characters, such as words, sentences, or entire texts. \n            It is a non-primitive data type that is typically implemented as an object in most modern programming languages, including Java, Python, and C#.</div>\n        <div class=\"cell\">Maximum of 2147483647 characters</div>\n        <div class=\"cell\">\"Hello World!\"</div>\n    </div>\n  </div>\n<div class=\"cond-operator\">\n<h1 class=\"chapter-header\">\n  Condition Operator and Mathematical Operator\n</h1>\n\n<p class=\"class-obj-text\">Condition operators are symbols used in programming languages to evaluate a condition and determine the flow of execution of a program. \n  Mathematical operators are symbols used in programming languages to perform arithmetic operations.\n  <br>\n  In Java, some commonly used condition operators are:</p>\n<li class=\"class-obj-text\">\"==\": check if two variables are equal</li>\n<li class=\"class-obj-text\">\"!=\": check if two variables are different</li>\n<li class=\"class-obj-text\">\">\": check if the left variable is greater than the right variable</li>\n<li class=\"class-obj-text\">\"<\": check if the left variable is smaller than the right variable</li>\n<li class=\"class-obj-text\">\">=\": check if the left variable is greater than or equal the right variable</li>\n<li class=\"class-obj-text\">\"<=\": check if the left variable is smaller than or equal the right variable</li>\n\n\n<p class=\"class-obj-text\">Some commonly used Mathematical Operators are:</p>\n<br>\n<li class=\"class-obj-text\">\"+\": Addition</li>\n<li class=\"class-obj-text\">\"-\": Subtraction</li>\n<li class=\"class-obj-text\">\"*\": Multiplication</li>\n<li class=\"class-obj-text\">\"/\": Division</li>\n<li class=\"class-obj-text\">\"%\": Modulo</li>\n</div>\n<div class=\"class-object\">\n<h1 class=\"chapter-header\">\n  Classes And Objects\n</h1>\n<p class=\"class-obj-text\">In Java, a class is a blueprint for creating objects. It defines the properties and methods that objects created from the class will have.\n   Classes are the building blocks of Java applications and are used to model real-world entities.</p>\n\n<br>\n<p class=\"class-obj-text\">Here is a simple example of a class in Java:</p>\n<pre>\n  <code class=\"java\">\n  public class Car {{ '{' }}\n     private String make;\n     private String model;\n     private int year;\n  \n     public void setMake(String make) {{ '{' }}\n        this.make = make;\n     {{ '}' }}\n  \n     public String getMake(){{ '{' }}\n        return make;\n     {{ '}' }}\n  \n     public void setModel(String model) {{ '{' }}\n        this.model = model;\n     {{ '}' }}\n  \n     public String getModel() {{ '{' }}\n        return model;\n     {{ '}' }}\n  \n     public void setYear(int year) {{ '{' }}\n        this.year = year;\n     {{ '}' }}\n  \n     public int getYear() {{ '{' }}\n        return year;\n     {{ '}' }}\n  {{ '}' }}\n  </code>\n</pre>\n\n  <p class=\"class-obj-text\">\n    An object is an instance of a class and has its own state and behavior. \n    The state of an object is represented by its instance variables and the behavior is represented by its methods. \n    To create an object in Java, you need to use the \"new\" operator followed by a call to a constructor of the class.\n  </p>\n\n  <pre>\n    <code>\n      Car myCar = new Car();\n      myCar.brand = \"Toyota\";\n      myCar.model = \"Camry\";\n      myCar.year = 2020;\n      myCar.startEngine();\n      myCar.stopEngine();\n\n    </code>\n  </pre>\n</div>\n\n<div class=\"array-vis\">\n  <h1 class=\"chapter-header\">\n    One Dimensional Array\n  </h1>\n  \n\t\n\t<div class=\"array-table center\">\n        <div class=\"array-length\">Array Length: {{arrayLength}}</div>\n        <div class=\"array-display\">\n          <div class=\"array-element\" *ngFor=\"let ele of arrayelement; let i = index\">\n            <div [ngStyle]=\"{'background-color': (currentNum === ele && currentIndex === i)? '#F5F5DC': 'white'}\">\n              {{ele}}\n            </div>\n          </div>\n        </div>\n  </div>\n\n  <div id=\"array-table-buttons\" class = \"decorTable\">\n    <button id=\"array-popup-button\" (click)=\"createArray()\">Create New Array</button>\n    <button id=\"push-popup-button\" (click)=\"addNewValue()\">Add New Value (Push)</button>\n    <button id=\"pop-popup-button\" (click)=\"popLastValue()\">Remove a Value (Pop)</button>\n    <button id=\"modify-popup-button\" (click)=\"modifyValue()\">Modify a Value</button>\n\n  </div>\n\n  <div id=\"array-popup\" *ngIf=\"onCreateArray === true && onClose === false\">\n    <div id=\"array-popup-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n\n      <label>Enter new values for the array separated by spaces</label>\n      <input id=\"input-new-array\" placeholder=\"1,2,3,4,5\" [(ngModel)]=\"readInput\"/>\n      <br /><br>\n      <button type=\"submit\" id=\"submit-array\" (click)=\"submitNewArray()\">Submit Array</button>\n    </div>\n  </div>\n\n  <div id=\"push-popup\" *ngIf=\"onPush === true && onClose === false\">\n    <div id=\"push-popup-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n      <label>array.push() adds a value to the end of an array. For example, <b>array.push(5)</b> will add a 5 to\n        the end of this array.<br> Try it below!<br></label>\n      <br />\n      <p>Enter New Value (Exp. 3)</p>\n      <input id=\"add-val\" placeholder=\"1\" [(ngModel)]=\"readInput\"/>\n      <br /><br>\n      <button type=\"submit\" id=\"submit-push\" (click)=\"submitPush()\">Add Value</button>\n    </div>\n  </div>\n\n\n  <div id=\"pop-popup\" *ngIf=\"onPop === true && onClose === false\">\n    <div id=\"pop-popup-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n      <label> Pop removes and returns the last element in the array. </label>\n      <p>Here pop has removed the value: </p>\n      <p id=\"display-pop\"></p>\n    </div>\n  </div>\n\n  \n  <!-- Minh Thie Code -->\n  <div id=\"modify-popup\" *ngIf=\"onModify === true && onClose === false\">\n    <div id=\"modify-popup-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n      <label>Enter the index of the element to be modified</label>\n      <input id=\"modify-index\" placeholder=\"0\" [(ngModel)]=\"needmodify\"/>\n      <br><br>\n      <label>Enter the new value (Exp. 3)</label>\n      <input id=\"modify-val\" placeholder=\"0\" [(ngModel)]=\"readInput\"/>\n      <br><br>\n      <button type=\"submit\" id=\"submit-modify\" (click)=\"onSubmitModify()\">Modify Value</button>\n    </div>\n  </div>\n  <!-- Minh Thie Code -->\n  <br>\n\n  <div class = \"runloop\">\n    <div id=\"loop-through\">\n      <button id=\"loop-through-button\" class=\"center\" (click)=\"RunLoopPanel()\">run  Loop</button>\n      <br>\n    </div>\n\n    <div id=\"index-info-popup-content\" *ngIf=\"onLoop === true && onClose === false\">\n      \n\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n\n      <div id=\"loop-content\">\n        <button id=\"next-button\" (click)=\"onStep()\">Step</button><br>\n\n        <div id=\"index-info\"><b>Current Index Of An Element: </b>{{currentIndex}}</div>\n        <br>\n        <div id=\"curr-num-info\"><b>Current Element In The Array: </b>{{currentNum}}</div>\n        <div id=\"next-num-info\"><b>Next Element In The Array: </b>{{nextNum}}</div>\n        <div id=\"curr-sum-info\"><b>Current Sum: </b>{{currSum}}</div>\n\n        <br>\n        <button id=\"restart-loop\" (click)=\"restartLoop()\">Start Loop Again</button>\n      </div>\n\n      <h2 style=\"text-align: center;\">Indexing Information</h2>\n      <div>\n        <p> \n          In an array, an index starts at 0 and counts up from there. <br>\n          Say that you declare an array called arr with values 2, 4, 6, 8 <br>\n          Declaring that array looks like: <b>arr[] = [2, 4, 6, 8]\n\n          </b><br><br>\n\n          The value 2 is at index 0, the value 4 is at index 1, and so on. <br><br>\n\n          Typically, programmers use the letter 'i' to show the index in a loop. <br><br>\n        </p>\n\n        <span id=\"for-loop\">Example: <b>for (int i=0, i < arr.length, i++)</b></span>\n        <br>\n        <br>\n        <li><b>int i=0</b> initializes the variable i</li> \n        <br>\n        <li><b>i < arr.length</b> is the condition. Here the loop will run as long as the index is less than the length of the array. We use < instead of <= \n          because the last index in the array will always be <i>one less than the ength of the array</i> since indexing starts at zero.<br></li>\n        <li><b>i++</b> increments the index after everything inside the loop has executed.<br><br></li>\n\n        Finding <b>i</b> retrieves the index.<br>\n        Finding <b>arr[i]</b> retrieves the value associate with that index.<br>\n        For example, using the array from above, if i = 2, arr[i] equals 6.<br>\n        \n      </div>\n  </div>\n</div>\n</div>\n\n\n\n<app-bubble-sort></app-bubble-sort>\n<app-insertion-sort></app-insertion-sort>\n<app-selection-sort></app-selection-sort>\n<br>\n\n\n<div class=\"practice1\" >\n  <span class=\"close\" (click)=\"close()\" *ngIf=\"clickpractice1\">&times;</span>\n  <h1 *ngIf=\"!clickpractice1\" (click)=\"practice1()\">\n    Find Two Numbers with Sum K\n  </h1>\n  <app-forloop *ngIf=\"clickpractice1\"></app-forloop>\n</div>\n\n\n<div class=\"practice1\" >\n  <span class=\"close\" (click)=\"close()\" *ngIf=\"clickpractice2\">&times;</span>\n  <h1 *ngIf=\"!clickpractice2\" (click)=\"practice2()\">\n    Find Duplicate\n  </h1>\n  <app-duplicate *ngIf=\"clickpractice2\"></app-duplicate>\n</div>\n\n\n<div class=\"practice1\" >\n  <span class=\"close\" (click)=\"close()\" *ngIf=\"clickpractice3\">&times;</span>\n  <h1 *ngIf=\"!clickpractice3\" (click)=\"practice3()\">\n    Find Missing Value\n  </h1>\n  <app-missing *ngIf=\"clickpractice3\"></app-missing>\n</div>\n\n\n<div class=\"practice1\" >\n  <span class=\"close\" (click)=\"close()\" *ngIf=\"clickpractice3\">&times;</span>\n  <h1 *ngIf=\"!clickpractice3\" (click)=\"practice3()\">\n    Find the Word in A String\n  </h1>\n  <app-missing *ngIf=\"clickpractice3\"></app-missing>\n</div>\n\n\n<div class=\"practice1\" >\n  <span class=\"close\" (click)=\"close()\" *ngIf=\"clickpractice3\">&times;</span>\n  <h1 *ngIf=\"!clickpractice3\" (click)=\"practice3()\">\n    Palindrome Word\n  </h1>\n  <app-missing *ngIf=\"clickpractice3\"></app-missing>\n</div>\n","import { Component } from '@angular/core';\nimport { NgModel } from '@angular/forms';\nimport { of } from 'rxjs';\n\n@Component({\n  selector: 'app-csc121',\n  templateUrl: './csc121.component.html',\n  styleUrls: ['./csc121.component.css']\n})\nexport class Csc121Component {\n  arrayelement: number[] = [1,2,3,4,5]\n  arrayTitle: string = \"Your One Dimension Array\"\n  arrayLength: number = this.arrayelement.length\n\n  currentIndex: number = 0\n  currentNum: number = 0\n  nextNum: any = 0\n  currSum: number = 0\n\n  onCreateArray: boolean = false\n  onPush: boolean = false\n  onPop: boolean = false\n  onLoop: boolean = false\n  onModify: boolean = false\n  onClose: boolean = true\n  readInput: string = \"\"\n  clickpractice1 = false\n  clickpractice2 = false\n  clickpractice3 = false\n  needmodify: string = \"\"\n  constructor(){\n\n  }\n\n  \n\n  printArray(params:number[]) {\n    let results = \"\"\n    for(let ele of this.arrayelement){\n      let stringele = ele.toString()\n      results += stringele + \"  \"\n    }\n\n    let array = document.getElementById(\"array-display\")\n    return results\n  }\n\n  createArray(){\n    this.onClose = false\n    this.onCreateArray = true\n    console.log(this.readInput)\n    let elements = this.readInput.split(\",\")\n    console.log(elements)\n    let newarray: number[]= []\n    for(let ele of elements){\n      let elefloat = parseFloat(ele)\n      newarray.push(elefloat)\n    }\n    return newarray\n  }\n\n  close(){\n    this.onClose = true\n    this.onPop = false\n    this.onCreateArray = false\n    this.onPush = false\n    this.onModify = false\n    this.onLoop = false\n    this.clickpractice1 = false\n    this.clickpractice2 = false\n    this.clickpractice3 = false\n    this.currentIndex = 0\n    this.currentNum = 0\n    this.nextNum = 0\n    this.currSum = 0\n\n  }\n\n  submitNewArray(){\n    let array = this.createArray()\n    this.onClose = true\n    this.arrayelement = array\n    this.arrayLength = array.length\n    this.onCreateArray = false\n  }\n\n  addNewValue(){\n    this.onClose = false\n    this.onPush = true\n    let newVal = parseFloat(this.readInput)\n    return newVal\n  }\n\n  submitPush(){\n    let newval = this.addNewValue()\n    this.arrayelement.push(newval)\n    this.arrayLength += 1\n    this.onClose = true\n    this.onPush =false\n  }\n\n  popLastValue(){\n    this.onClose = false\n    this.onPop = true\n    this.arrayelement.pop()\n  }\n\n  modifyValue(){\n    this.onClose = false\n    this.onModify = true\n    let currVal = parseFloat(this.needmodify)\n    let newVal  = parseFloat(this.readInput)\n    let index:number[] = []\n    for(let i = 0; i < this.arrayelement.length;i++){\n      if(this.arrayelement[i] == currVal){\n        index.push(i)\n      }\n    }\n    index.push(newVal)\n    console.log(index)\n    return index\n  }\n\n  onSubmitModify(){\n    let temp = this.modifyValue()\n    for(let i = 0; i < temp.length-1;i++){\n      this.arrayelement[temp[i]] = temp[temp.length-1]\n    }\n    this.onClose = true\n    this.onModify = false\n  }\n\n  RunLoopPanel(){\n    this.onClose = false\n    this.onLoop = true\n    if(this.arrayelement.length == 0){\n      this.currentNum = -1\n      this.currentIndex = -1\n      this.nextNum = -1\n      this.currSum = 0\n    }\n    else{\n      this.currentNum = this.arrayelement[0]\n      this.currentIndex = 0\n      if(this.arrayelement.length == 0){\n        this.nextNum = -1\n      }\n      else{\n        this.nextNum = this.arrayelement[1]\n      }\n      this.currSum += this.currentNum\n    }\n  }\n\n  onStep(){\n    if(this.currentIndex < this.arrayelement.length){\n      this.currentIndex += 1\n      this.currentNum = this.arrayelement[this.currentIndex]\n      this.currSum += this.currentNum\n      let temp = this.currentNum\n\n      if(this.currentIndex+1 >= this.arrayelement.length){\n        this.nextNum = \"End of Array\"\n      }\n      else{\n        this.nextNum = this.arrayelement[this.currentIndex]\n      }\n    }\n    else{\n      this.currSum = this.currSum\n      alert(\"You have reach the end of the array!\")\n    }\n  }\n\n\n  practice1(){\n    this.clickpractice1 = true\n\n  }\n\n  practice2(){\n    this.clickpractice2 = true\n  }\n\n  practice3(){\n    this.clickpractice3 = true\n  }\n\n  restartLoop(){\n    this.currSum = 0\n    this.RunLoopPanel()\n  }\n}\n","\n<div class=\"container\">\n    <h2>Detect Duplicate Number</h2>\n    <p>You are given an array of numbers. Your task is to determine if there are any duplicate numbers in the array. If there are duplicates, return True; otherwise, return False.</p>\n\n    <div class=\"array-table center\">\n        <div class=\"array-length\">Array Length: {{arr.length}}</div>\n        <div class=\"array-display\">\n            <div class=\"array-element\" *ngFor=\"let ele of arr; let i = index\">\n                <div>\n                    {{ele}}\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <hr />\n\n    <div>\n        <h3>Code to Complete:</h3>\n        <pre>\n        <div class=\"practice\">\n            <div class=\"code\">\n                <code>\nfor (int i = 0; i < array.length; i++) {{ '{' }}\n    for (int j = <input type=\"text\" id=\"startvalue\" [(ngModel)]=\"idx\" (ngModelChange)=\"checkInput()\"/>; j < array.length; j++) {{ '{' }}\n        if (array[j] == array[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/>]) {{ '{' }}\n            return True;\n        {{ '}' }}\n    {{ '}' }}\n{{ '}' }}\nreturn False;\n            </code>\n            </div>\n\n            <div class=\"solution\" *ngIf=\"idx\">\n                <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                    <p>You Make A Mistake!</p>\n                </div>\n                <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                    <p>You Are Correct!</p>\n                </div>\n            </div>\n        </div>\n        </pre>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-duplicate',\n  templateUrl: './duplicate.component.html',\n  styleUrls: ['./duplicate.component.css']\n})\nexport class DuplicateComponent {\n  k: number = 10;\n  result: string | number = -1;\n  arr = [3,5,7,1,2,4,9,6,1]\n  idx = \"\"\n  input2 = \"\"\n  checkres = false\n  ele1 = -1\n  ele2 = -1\n\n  resetResults() {\n    for(let i = 0; i < this.arr.length; i++){\n      for(let j = 0; j< this.arr.length; j++){\n        if(this.arr[i] + this.arr[j] == this.k){\n          this.ele1 = this.arr[i]\n          this.ele2 = this.arr[j]\n          this.result = 2\n          return\n        }\n      }\n    }\n    this.result = -1\n  }\n\n  checkInput(){\n    if( this.idx == \"i+1\" || this.idx == \" i + 1 \" ||  this.idx == \"i + 1\" ||  this.idx == \"i+ 1\"){\n      if(this.input2 == \"i\" || this.input2 == \" i \" || this.input2 == \" i\"){\n        this.checkres = true\n      }\n\n    }\n    else{\n      this.checkres = false\n    }\n  }\n}\n","\n\n<div class=\"container\">\n    <h2>Find Two Numbers with Sum K</h2>\n    <p>Fill in the missing parts of the code to find two numbers in the array that have a sum equal to K. Return -1, if we can not find. Otherwise, return the two number</p>\n\n    <div class=\"array-table center\">\n        <div class=\"array-length\">Array Length: {{arr.length}}</div>\n        <div class=\"array-display\">\n            <div class=\"array-element\" *ngFor=\"let ele of arr; let i = index\">\n                <div>\n                    {{ele}}\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div>\n        <label for=\"kValue\">Enter K:</label>\n        <input type=\"number\" id=\"kValue\" [(ngModel)]=\"k\" (ngModelChange)=\"resetResults()\" />\n    </div>\n\n    <div>\n        <label for=\"result\">Result:</label>\n        <span id=\"result\" *ngIf=\"result === -1\">{{ result }}</span>\n        <span id=\"result2\" *ngIf=\"!(result === -1)\">({{ele1}}, {{ele2}})</span>\n    </div>\n\n    <hr />\n\n    <div>\n        <h3>Code to Complete:</h3>\n        <pre>\n        <div class=\"practice\">\n            <div class=\"code\">\n                <code>\nfor (int i = 0; i < array.length; i++) {{ '{' }}\n    for (int j = <input type=\"text\" id=\"startvalue\" [(ngModel)]=\"idx\" (ngModelChange)=\"checkInput()\"/>; j < array.length; j++) {{ '{' }}\n        if (array[i] + array[j] == k) {{ '{' }}\n            return (array[i], arr[j]);\n        {{ '}' }}\n    {{ '}' }}\n{{ '}' }}\nreturn -1;\n            </code>\n            </div>\n\n            <div class=\"solution\" *ngIf=\"idx\">\n                <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                    <p>You Make A Mistake!</p>\n                </div>\n                <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                    <p>You Are Correct!</p>\n                </div>\n            </div>\n        </div>\n        </pre>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-forloop',\n  templateUrl: './forloop.component.html',\n  styleUrls: ['./forloop.component.css']\n})\nexport class ForloopComponent {\n  k: number = 10;\n  result: string | number = -1;\n  arr = [3,5,7,1,2,4,9,6,1]\n  idx = \"\"\n  checkres = false\n  ele1 = -1\n  ele2 = -1\n\n  resetResults() {\n    for(let i = 0; i < this.arr.length; i++){\n      for(let j = 0; j< this.arr.length; j++){\n        if(this.arr[i] + this.arr[j] == this.k){\n          this.ele1 = this.arr[i]\n          this.ele2 = this.arr[j]\n          this.result = 2\n          return\n        }\n      }\n    }\n    this.result = -1\n  }\n\n  checkInput(){\n    if( this.idx == \"i+1\" || this.idx == \" i + 1 \" ||  this.idx == \"i + 1\" ||  this.idx == \"i+ 1\"){\n      this.checkres = true\n    }\n    else{\n      this.checkres = false\n    }\n  }\n\n  // Add your logic to find two numbers with sum k here\n  // You can set this.result accordingly when numbers are found.\n}\n","import { Component } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n\ninterface Item {\n  value: number;\n  color: string;\n  state: string;\n  x: number;\n}\n\n\n@Component({\n  selector: 'app-insertion-sort',\n  templateUrl: './insertion-sort.component.html',\n  styleUrls: ['./insertion-sort.component.css'],\n  animations: [\n    trigger('swap', [\n      state('inactive', style({\n        backgroundColor: 'lightblue'\n      })),\n      state('active', style({\n        backgroundColor: 'red'\n      })),\n\n      transition('inactive => active', animate('2s')),\n      transition('active => inactive', animate('1s'))\n    ])\n  ]\n})\nexport class InsertionSortComponent {\n  items: Item[]= [];\n  width = 0.5\n  input1 = \"\" \n  input2 = \"\"\n  input3 = \"\"\n  input4 = \"\"\n  checkres = false\n  clickpractice = false\n\n  ngOnInit() {\n    this.generateArray()\n    console.log(this.items)\n  }\n\n  generateArray(){\n    this.items = []\n    for (let i = 0; i < 15; i++) {\n      this.items.push({\n        value: Math.floor(Math.random() * 100) + 1,\n        color: 'lightblue',\n        state: 'inactive',\n        x: i*this.width\n      });\n    }\n  }\n\n  async insertionSort() {\n    this.stopSor = false;\n    for (let i = 1; i < this.items.length; i++) {\n      if(this.stopSor == false){\n        await new Promise(resolve => setTimeout(resolve, 500));\n        let key = this.items[i];\n        key.state = 'active';\n        await new Promise(resolve => setTimeout(resolve, 500));\n        let j = i - 1;\n        while (j >= 0 && this.items[j].value > key.value) {\n          this.items[j + 1] = this.items[j];\n          j = j - 1;\n        }\n        this.items[j + 1] = key;\n        await new Promise(resolve => setTimeout(resolve, 200));\n        key.state = 'inactive';\n      }\n    }\n  }\n  \n  stopSor: boolean = false\n  \n  stopSort(){\n    this.stopSor = true\n  }\n\n  checkInput(){\n    if( this.input1 == \"j\" || this.input1 == \" j \" ||  this.input1 == \" j\"){\n      if((this.input2 == \"j+1\" || this.input2 == \" j + 1 \" || this.input2 == \" j+1\") && this.input3 == this.input1 && this.input4 == this.input2){\n        this.checkres = true\n      }\n    }\n    else{\n      this.checkres = false\n    }\n  }\n\n  practiceCode(){\n    this.clickpractice = !this.clickpractice\n  }\n}\n","\n\n\n\n<div class=\"main-container\">\n    \n    <div class = \"bubble-sort-btn\">\n        <div class=\"chapter-header\">\n            Insertion Sort Algorithm\n        </div>\n        <button class=\"sort-btn\" (click)=\"insertionSort()\">Insertion Sort</button>\n        <button class=\"new-array-btn\" (click)=\"generateArray()\">Generate New Array</button>\n        <button class=\"stop-array-btn\" (click)=\"stopSort()\">Stop</button>\n        <button class=\"stop-array-btn\" (click)=\"practiceCode()\">Practice Code</button>\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"element\" *ngFor=\"let item of items\" [@swap]=\"item.state\" [style.height.px]=\"item.value*2\" [style.background-color]=\"item.color\"  [ngStyle]=\"{'margin-left.px': item.x}\">\n            {{item.value}}\n        </div>\n    </div>\n</div>\n\n\n\n<div class=\"practice-code\" *ngIf=\"clickpractice\">\n    <pre>\n    <div class=\"practice\">\n        <div class=\"code\">\n            <code>\nFilling in the missing places to complete the Selection Sort Algorithm\n<br>\n\n\nint n = arr.length;\n        \nfor (int i = 1; i < n; i++) {{'{'}}\n    int key = arr[i];\n    int j = i - 1;\n    \n    // Move elements of arr[0..i-1] that are greater than key\n    // to one position ahead of their current position\n    while (j >= 0 && arr[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input1\" (ngModelChange)=\"checkInput()\"/>] > key) {{'{'}}\n        arr[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/>] = arr[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input3\" (ngModelChange)=\"checkInput()\"/>];\n        j--;\n    {{'}'}}\n    \n    arr[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input4\" (ngModelChange)=\"checkInput()\"/>] = key;\n{{'}'}}\n\n        </code>\n        </div>\n\n        <div class=\"solution\" *ngIf=\"input1 && input2 && input3 && input4\">\n            <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                <p>You Make A Mistake!</p>\n            </div>\n            <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                <p>You Are Correct!</p>\n            </div>\n        </div>\n    </div>\n    </pre>\n</div>\n\n\n\n","\n<div class=\"container\">\n    <h2>Find the Missing Element in an Array</h2>\n    <p>Given an array containing positive integers from 1 to n (inclusive) with one number missing, your goal is to find and return the missing positive integer from the array.\n    </p>\n\n    <div class=\"array-table center\">\n        <div class=\"array-length\">Array Length: {{arr.length}}</div>\n        <div class=\"array-display\">\n            <div class=\"array-element\" *ngFor=\"let ele of arr; let i = index\">\n                <div>\n                    {{ele}}\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <hr />\n\n    <div>\n        <h3>Code to Complete:</h3>\n        <pre>\n        <div class=\"practice\">\n            <div class=\"code\">\n                <code>\nfor (int i = 1; i < max(array); i++) {{ '{' }}\n    if (array[i] != <input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/>) {{ '{' }}\n        return True;\n    {{ '}' }}\n{{ '}' }}\nreturn False;\n            </code>\n            </div>\n\n            <div class=\"solution\" *ngIf=\"input2\">\n                <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                    <p>You Make A Mistake!</p>\n                </div>\n                <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                    <p>You Are Correct!</p>\n                </div>\n            </div>\n        </div>\n        </pre>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-missing',\n  templateUrl: './missing.component.html',\n  styleUrls: ['./missing.component.css']\n})\nexport class MissingComponent {\n  k: number = 10;\n  result: string | number = -1;\n  arr = [1,2,3,4,5,7,8,9,10]\n\n  input2 = \"\"\n  checkres = false\n  ele1 = -1\n  ele2 = -1\n\n  resetResults() {\n    for(let i = 0; i < this.arr.length; i++){\n      for(let j = 0; j< this.arr.length; j++){\n        if(this.arr[i] + this.arr[j] == this.k){\n          this.ele1 = this.arr[i]\n          this.ele2 = this.arr[j]\n          this.result = 2\n          return\n        }\n      }\n    }\n    this.result = -1\n  }\n\n  checkInput(){\n    if(this.input2 == \"i\" || this.input2 == \" i \" || this.input2 == \" i\"){\n      this.checkres = true\n    }\n\n    else{\n      this.checkres = false\n    }\n  }\n} \n","import { Component } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n\ninterface Item {\n  value: number;\n  color: string;\n  state: string;\n  x: number;\n}\n\n\n@Component({\n  selector: 'app-selection-sort',\n  templateUrl: './selection-sort.component.html',\n  styleUrls: ['./selection-sort.component.css'],\n  animations: [\n    trigger('swap', [\n      state('inactive', style({\n        backgroundColor: 'lightblue'\n      })),\n      state('active', style({\n        backgroundColor: 'red'\n      })),\n\n      transition('inactive => active', animate('2s')),\n      transition('active => inactive', animate('1s'))\n    ])\n  ]\n})\nexport class SelectionSortComponent {\n  items: Item[]= [];\n  width = 0.5\n  activeIndex = -1\n  input1 = \"\" \n  input2 = \"\"\n  checkres = false\n  clickpractice = false\n\n  ngOnInit() {\n    this.generateArray()\n  }\n\n  generateArray(){\n    this.items = []\n    for (let i = 0; i < 15; i++) {\n      this.items.push({\n        value: Math.floor(Math.random() * 100) + 1,\n        color: 'lightblue',\n        state: 'inactive',\n        x: i*this.width\n      });\n    }\n  }\n\n  async selectionSort() {\n    this.stopSor = false;\n    for (let i = 0; i < this.items.length - 1; i++) {\n      if (this.stopSor === false) {\n        let minIndex = i;\n        for (let j = i + 1; j < this.items.length; j++) {\n          this.items[j].state = 'active';\n          await new Promise(resolve => setTimeout(resolve, 500));\n          if (this.items[j].value < this.items[minIndex].value) {\n            minIndex = j;\n          }\n          this.items[j].state = 'inactive';\n        }\n\n        if (minIndex !== i) {\n          this.items[i].state = 'active';\n          this.items[minIndex].state = 'active';\n          await new Promise(resolve => setTimeout(resolve, 500));\n          const temp = this.items[i];\n          this.items[i] = this.items[minIndex];\n          this.items[minIndex] = temp;\n          this.items[i].state = 'inactive';\n          this.items[minIndex].state = 'inactive';\n          // await new Promise(resolve => setTimeout(resolve, 200));\n        }\n        for (let k = 0; k < this.items.length; k++) {\n          if (k <= i) {\n            this.items[k].state = 'inactive';\n          }\n        }\n      }\n    }\n  }\n\n  \n  stopSor: boolean = false\n  \n  stopSort(){\n    this.stopSor = true\n  }\n\n  checkInput(){\n    if( this.input1 == \"minIndex\" && this.input2 == this.input1){\n      this.checkres = true\n    }\n    else{\n      this.checkres = false\n    }\n  }\n\n  practiceCode(){\n    this.clickpractice = !this.clickpractice\n  }\n}\n","\n\n<div class=\"main-container\">\n    \n    <div class = \"bubble-sort-btn\">\n        <div class=\"chapter-header\">\n            Selection Sort Algorithm\n        </div>\n        <button class=\"sort-btn\" (click)=\"selectionSort()\"><b>Selection Sort</b></button>\n        <button class=\"new-array-btn\" (click)=\"generateArray()\"><b>Generate New Array</b></button>\n        <button class=\"stop-array-btn\" (click)=\"stopSort()\">Stop</button>\n        <button class=\"stop-array-btn\" (click)=\"practiceCode()\">Practice Code</button>\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"element\" *ngFor=\"let item of items\"  [style.height.px]=\"item.value*2\" [ngStyle]=\"{'margin-left.px': item.x, 'background-color': item.state === 'inactive' ? 'lightblue' : 'red'}\">\n            {{item.value}}\n          </div>\n    </div>\n</div>\n\n\n\n<div class=\"practice-code\" *ngIf=\"clickpractice\">\n    <pre>\n    <div class=\"practice\">\n        <div class=\"code\">\n            <code>\nFilling in the missing places to complete the Selection Sort Algorithm\n<br>\n\nint n = arr.length;\n\nfor (int i = 0; i < n - 1; i++) {{'{'}}\n    // Find the minimum element in the remaining unsorted array\n    int minIndex = i;\n    for (int j = i + 1; j < n; j++) {{'}'}}\n        if (arr[j] < arr[<input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input1\" (ngModelChange)=\"checkInput()\"/>]) {{'{'}}\n            <input type=\"text\" id=\"startvalue\" [(ngModel)]=\"input2\" (ngModelChange)=\"checkInput()\"/> = j;\n        {{'{'}}\n    {{'{'}}\n\n    // Swap the found minimum element with the element at index i\n    int temp = arr[i];\n    arr[i] = arr[minIndex];\n    arr[minIndex] = temp;\n{{'}'}}\n\n        </code>\n        </div>\n\n        <div class=\"solution\" *ngIf=\"input1 && input2\">\n            <div class=\"checkRes incorrect\" *ngIf=\"!checkres\"> \n                <p>You Make A Mistake!</p>\n            </div>\n            <div class=\"checkRes correct\" *ngIf=\"checkres\"> \n                <p>You Are Correct!</p>\n            </div>\n        </div>\n    </div>\n    </pre>\n</div>\n","<h1 class=\"chapter-header\">\n    Two Dimensional Array\n</h1>\n\n<div class=\"array-container\">\n    <div class=\"array-size\">\n        The Dimenstion of the 2D array is <br> {{arrayRows}} x {{arrayCols}}\n    </div>\n    <div *ngFor=\"let row of array; let i = index\" class=\"array-row\">\n      <div *ngFor=\"let item of row; let j = index\" class=\"array-item\">\n        <div [ngStyle]=\"{'background-color': (this.currRow === i && this.currCol === j && onLoop===true)? '#F5F5DC': 'white'}\">\n          {{item}}\n        </div>\n      </div>\n    </div>\n</div>\n  \n\n<div id=\"array-table-buttons\">\n    <button id=\"array-popup-button\" (click)=\"createArray()\"><b>Create New Array</b></button><br>\n    <button id=\"modify\" (click)=\"modify()\"><b>Modify a Value</b></button>\n    <button id=\"access\" (click)=\"getIndex()\"><b>Get index by value</b></button>\n    <button id=\"access\" (click)=\"getValue()\"><b>Get a value by index</b></button>\n</div>\n\n\n<div id=\"array-popup\" *ngIf=\"onCreate === true && onClose === false\">\n    <div id=\"array-popup-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n\n      <label>Enter new values for the array separated by spaces</label>\n      <input id=\"input-new-array\" placeholder=\"[[1,2],[3,4]]\" [(ngModel)]=\"readInput\"/>\n      <br /><br>\n      <button type=\"submit\" id=\"submit-array\" (click)=\"submitNewArray()\">Submit Array</button>\n    </div>\n</div>\n\n<div id=\"modify-popup\" *ngIf=\"onModify === true && onClose === false\">\n    <div id=\"modify-popup-content\">\n        <span class=\"close\" (click)=\"close()\">&times;</span>\n        <label>Enter the index of the element to be modified</label>\n        <input id=\"modify-index\" placeholder=\"1\" [(ngModel)]=\"needModify\"/>\n        <br><br>\n        <label>Enter the new value (Exp. 3)</label>\n        <input id=\"modify-val\" placeholder=\"2\" [(ngModel)]=\"readInt\"/>\n        <br><br>\n        <button type=\"submit\" id=\"submit-modify\" (click)=\"submitModify()\">Modify Value</button>\n    </div>\n</div>\n\n<div id=\"array-index\" *ngIf=\"onKeyValue === true && onClose === false\">\n    <div id=\"array-index-content\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n\n      <label>Enter a value to get the index of that value in the array</label>\n      <input id=\"input-new-array\" placeholder=\"2\" [(ngModel)]=\"searchVal\"/>\n      <br /><br>\n      <button type=\"submit\" id=\"submit-index\" (click)=\"submitGetIndex()\">Search For Index</button>\n\n      <div class=\"display-output\" *ngIf=\"onSubmitIndex\">\n        The number is on {{idxRow+1}}th row and on {{idxCol+1}}th column\n    </div>\n    </div>\n</div>\n\n\n<div id=\"array-value\" *ngIf=\"onValueKey === true && onClose === false\">\n  <div id=\"array-value-content\">\n    <span class=\"close\" (click)=\"close()\">&times;</span>\n\n    <label>Enter the row that the number is on</label>\n    <input id=\"input-new-array\" placeholder=\"2\" [(ngModel)]=\"idxRow\"/>\n    <label>Enter the column that the number is on</label>\n    <input id=\"input-new-array\" placeholder=\"2\" [(ngModel)]=\"idxCol\"/>\n    <br /><br>\n    <button type=\"submit\" id=\"submit-index\" (click)=\"submitValue()\">Search For Value</button>\n\n    <div class=\"display-output\" *ngIf=\"onSubmitValue\">\n      The number on {{idxRow}} th row and on {{idxCol}} th column is {{array[idxRow-1][idxCol-1]}}\n  </div>\n  </div>\n</div>\n\n<div class = \"runloop\">\n    <div id=\"loop-through\">\n      <button id=\"loop-through-button\" class=\"center\" (click)=\"RunLoopPanel()\">run  Loop</button>\n      <br>\n    </div>\n\n    <div id=\"index-info-popup-content\" *ngIf=\"onLoop === true && onClose === false\">\n      <span class=\"close\" (click)=\"close()\">&times;</span>\n      <div id=\"loop-content\">\n        <button id=\"next-button\" (click)=\"onStep()\">Step</button><br>\n\n        <div id=\"index-info\"><b>Current Row Of An Element: </b>{{currRow}}</div>\n        <div id=\"index-info\"><b>Current Column Of An Element: </b>{{currCol}}</div>\n        <br>\n        <div id=\"curr-num-info\"><b>Current Element In The Array: </b>{{currentNum}}</div>\n        <div id=\"curr-sum-info\"><b>Current Sum: </b>{{currSum}}</div>\n\n        <br>\n        <button id=\"restart-loop\" (click)=\"restartLoop()\">Start Loop Again</button>\n      </div>\n\n      <h2 style=\"text-align: center;\">Indexing Information</h2>\n      <div>\n        <p> \n          In an array, an index starts at 0 and counts up from there. <br>\n          Say that you declare an array called arr with values 2, 4, 6, 8 <br>\n          Declaring that array looks like: <b>arr[] = [2, 4, 6, 8]\n\n          </b><br><br>\n\n          The value 2 is at index 0, the value 4 is at index 1, and so on. <br><br>\n\n          Typically, programmers use the letter 'i' to show the index in a loop. <br><br>\n        </p>\n\n        <span id=\"for-loop\">Example: <b>for (int i=0, i < arr.length, i++)</b></span>\n        <br>\n        <br>\n        <li><b>int i=0</b> initializes the variable i</li> \n        <br>\n        <li><b>i < arr.length</b> is the condition. Here the loop will run as long as the index is less than the length of the array. We use < instead of <= \n          because the last index in the array will always be <i>one less than the ength of the array</i> since indexing starts at zero.<br></li>\n        <li><b>i++</b> increments the index after everything inside the loop has executed.<br><br></li>\n\n        Finding <b>i</b> retrieves the index.<br>\n        Finding <b>arr[i]</b> retrieves the value associate with that index.<br>\n        For example, using the array from above, if i = 2, arr[i] equals 6.<br>\n        \n      </div>\n  </div>\n</div>\n\n<h1 class=\"chapter-header\">\n  Linked List\n</h1>\n\n<app-linked-list></app-linked-list>\n\n\n\n<app-hashmap></app-hashmap>\n\n\n","import { ThisReceiver } from '@angular/compiler';\nimport { Component, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-csc122',\n  templateUrl: './csc122.component.html',\n  styleUrls: ['./csc122.component.css']\n})\nexport class Csc122Component{\n  array: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n  arrayRows: number = this.array.length\n  arrayCols: number = this.array[0].length\n\n  onCreate: boolean = false\n  onModify: boolean = false\n  onValueKey: boolean = false\n  onSubmitIndex: boolean = false\n  onSubmitValue: boolean = false\n  onLoop: boolean = false\n  onKeyValue: boolean = false\n\n  onClose: boolean = true\n\n  readInput: String = \"\"\n  readInt: number = 0\n  needModify: number = 0\n  searchVal: number = 0\n  idxRow: number = -1\n  idxCol: number =  -1\n\n\n\n  close(){\n    this.onClose = true\n    this.onCreate = false\n    this.onModify = false\n    this.onKeyValue = false\n    this.onValueKey = false\n    this.onLoop = false\n  }\n\n\n  createArray(){\n    this.onClose = false\n    this.onCreate = true\n    const temp = JSON.parse(this.readInput.toString()) as number[][]\n    return temp\n  }\n\n  submitNewArray(){\n    let temp = this.createArray()\n    this.array = temp\n\n    this.arrayRows =this.array.length\n    this.arrayCols = this.array[0].length\n    this.onCreate = false\n    this.onClose = true\n  }\n\n  modify(){\n    this.onModify = true \n    this.onClose = false\n\n    let temp = parseFloat(this.needModify.toString())\n    let value = parseFloat(this.readInt.toString())\n    console.log(temp)\n\n    let index: number [][]= [[value,value]]\n    for(let i = 0;i<this.arrayRows;i++){\n      for(let j = 0; j<this.arrayCols;j++){\n        if(this.array[i][j]== temp){\n          index.push([i,j])\n        }\n      }\n    }\n    return index\n  }\n\n  submitModify(){\n    let temp =this.modify()\n    for(let i = 1; i<temp.length;i++){\n      let index = temp[i]\n      this.array[index[0]][index[1]] = temp[0][0]\n    }\n\n    this.onClose = true\n    this.onModify = false\n  }\n\n  getIndex(){\n    this.onKeyValue = true\n    this.onClose = false\n    for(let i = 0;i<this.arrayRows;i++){\n      for(let j = 0; j<this.arrayCols;j++){\n        if(this.array[i][j]== this.searchVal){\n          return [i,j]\n        }\n      }\n    }\n    return [-1,-1]\n  }\n\n  submitGetIndex(){\n    let temp = this.getIndex()\n    if(temp[0] == -1){\n      alert(\"Can not find the value!\")\n    }\n    this.idxRow = temp[0]\n    this.idxCol = temp[1]\n    this.onSubmitIndex = true\n  }\n\n  getValue(){\n    this.onClose = false\n    this.onValueKey = true\n    this.idxCol = parseFloat(this.idxCol.toString())\n    this.idxRow = parseFloat(this.idxRow.toString())\n  }\n\n  submitValue(){\n    this.onSubmitValue = true\n  }\n\n  currRow: number = 0\n  currCol: number = 0\n  currentNum: number = this.array[this.currRow][this.currCol] \n  currSum: number = 0\n\n  RunLoopPanel(){\n    this.onLoop = true\n    this.onClose = false\n    this.currRow == 0\n    this.currCol == 0\n    this.currentNum = this.array[this.currRow][this.currCol] \n    this.currSum += this.currentNum\n    \n  }\n\n  onStep(){\n    if(this.currCol  >= this.arrayCols || this.currRow >= this.arrayRows){\n      return\n    }\n    if(this.currCol < this.arrayCols-1){\n      this.currCol += 1\n      this.currentNum = this.array[this.currRow][this.currCol]\n      this.currSum += this.currentNum\n    }\n    else{\n      this.currRow += 1\n      this.currCol = 0\n      this.currentNum = this.array[this.currRow][this.currCol]\n      this.currSum += this.currentNum\n    }\n  }\n\n  restartLoop(){\n    this.currSum = 0\n    this.RunLoopPanel()\n  }\n}\n","<h1 class=\"chapter-header\">\n    Hash Table\n  </h1>\n  \n  <div class=\"hashmap\">\n    <div class=\"explain\"> Key   ->    Value</div>\n    <div *ngFor=\"let key of logKeys()\" class=\"hash-table-entry\">\n      <div class=\"key-box\">\n        <div class=\"node-content\">\n          {{key}}\n        </div>\n        \n      </div>\n      <div class=\"arrow-line\"></div>\n      <div class=\"arrow-right\"></div>\n      <div class=\"value-boxes\">\n        <div *ngFor=\"let value of myHashTable[key]\" class=\"value-box\">\n          <div class=\"node-content\">\n            {{value}}\n          </div>\n    \n        </div>\n      </div>\n    </div>\n    <div class = \"bubble-sort-btn\">\n      <button class=\"sort-btn\" (click)=\"addValue()\">Add Value to Key</button>\n      <button class=\"new-array-btn\" (click)=\"addKey()\">Add New Key</button>\n      <button class=\"stop-array-btn\">Find a Value</button>\n    </div>\n  </div>\n  \n  <div id=\"array-popup\" *ngIf=\"close === false && addValueBtn === true\">\n    <div id=\"array-popup-content\" >\n      <span class=\"close\" (click)=\"Onclose()\">&times;</span>\n  \n      <label>Choose the key to add:</label>\n      <input id=\"input-new-array\" placeholder=\"1,2,3,4,5\" [(ngModel)]=\"key\"/>\n      <br>  \n      <label>Enter the value to be added:</label>\n      <input id=\"input-new-array\" placeholder=\"1,2,3,4,5\" [(ngModel)]=\"value\"/>\n      <br /><br>\n      <button type=\"submit\" id=\"submit-array\" (click)=\"onSubmitAddvalue()\">Submit Array</button>\n    </div>\n  </div>\n  \n  <div id=\"array-popup\" *ngIf=\"close === false && addKeyBtn === true\">\n    <div id=\"array-popup-content\" >\n      <span class=\"close\" (click)=\"Onclose()\">&times;</span>\n  \n      <label>Choose the key to add:</label>\n      <input id=\"input-new-array\" placeholder=\"1,2,3,4,5\" [(ngModel)]=\"newkey\"/>\n      <br>  \n    \n      <button type=\"submit\" id=\"submit-array\" (click)=\"onSubmitAddKey()\">Submit Array</button>\n    </div>\n  </div>\n  \n  ","import { Component, Input } from '@angular/core';\n\n\n\n@Component({\n  selector: 'app-hashmap',\n  templateUrl: './hashmap.component.html',\n  styleUrls: ['./hashmap.component.css']\n})\nexport class HashmapComponent {\n  myHashTable: {[key: string]: any[]} = {\n    '1': [2, 3],\n    '2': [1, 4],\n    '4': [4,5,6,7,8],\n    'Apple': ['Iphone', 'Macbook','Ipad']\n  };\n  \n  width = 500;\n  height = 300;\n  boxWidth = 50;\n  boxHeight = 50;\n  margin = { top: 10, right: 10, bottom: 10, left: 10 };\n\n  addValueBtn:boolean = false\n  addKeyBtn:boolean = false\n  close: boolean = true\n\n  logKeys() {\n    const keys = Object.keys(this.myHashTable);\n    return keys\n  }\n\n  \n\n  Onclose(){\n    this.addValueBtn = false\n    this.addKeyBtn = false\n    this.close = true\n  }\n\n  key: any = 0\n  value: any = 0\n\n  addValue(){\n    this.addValueBtn = true\n    this.close = false\n  }\n\n  onSubmitAddvalue(){\n    let hasKey = false\n    const keys = Object.keys(this.myHashTable);\n    for(let i of keys){\n      if(this.key == i){\n        hasKey = true\n      }\n    }\n    if(hasKey == false){\n      alert(\"There is no key in the hashtable\")\n    }\n    if(hasKey == true){\n      this.myHashTable[this.key].push(this.value)\n    }\n  }\n\n  addKey(){\n    this.addKeyBtn = true\n    this.close = false\n  }\n\n  newkey: any = ''\n  onSubmitAddKey(){\n    let hasKey = false\n    const keys = Object.keys(this.myHashTable);\n    for(let i of keys){\n      if(this.key == i){\n        hasKey = true\n      }\n    }\n    if(hasKey == false){\n      this.myHashTable[this.newkey] = []\n    }\n    if(hasKey == true){\n      alert(\"Already has the key!\")\n    }\n  }\n}\n","\n\n<div class=\"linkedList-content\">\n    <br><br>\n    <h2>Searching for an element: </h2>\n    <li>Start with the head of the list</li>\n    <li>Move through each node and compare its data with the target</li>\n    <li>If found, return the node</li>\n    <li>If not found, return None</li>\n    <br><br>\n    <h2>Inserting a node:</h2>\n    <li>Create a new node with the desired data</li>\n    <li>If inserting at the head, set the next of the new node to the current head and update the head to the new node</li>\n    <li>If inserting at a different position, find the node before the desired position and set the next of the new node to the next of the node before the desired position and set the next of the node before the desired position to the new node</li>\n    <br><br>\n    <h2>Deleting a node:</h2>\n    <li>If deleting the head, update the head to the next node</li>\n    <li>If deleting a different node, find the node before the node to be deleted and set the next of the node before the node to be deleted to the next of the node to be deleted</li>\n    <li>Free the node to be deleted</li>\n  </div>\n  \n  <br><br><br>\n  \n  \n  \n  <div class=\"container\">\n      <div class=\"node\" *ngFor=\"let item of items; let i = index\">\n        <div class=\"node-content\">\n          <div [ngStyle]=\"{'background-color': (i === this.currIndex) ? '#F5F5DC':'white'}\">\n            <p>{{ item }}</p>\n          </div>\n          \n        </div>\n        <div class=\"arrow-line\"></div>\n        <div class=\"arrow-right\"></div>\n      </div>\n    </div>\n  \n  \n  \n  <div id=\"array-table-buttons\">\n    <button id=\"array-popup-button\" (click)=\"insertNode()\"><b>Insert a node</b></button><br>\n    <!-- <button id=\"modify\"><b>Insert a node</b></button> -->\n    <button id=\"access\" (click)=\"deleteNode()\"><b>Delete a node</b></button>\n  </div>\n  \n  \n  \n  <div id=\"array-popup\" *ngIf=\"onClose === false && onInsert === true\">\n      <div id=\"array-popup-content\">\n        <span class=\"close\" (click)=\"close()\">&times;</span>\n        <label>Value of node to insert:</label>\n        <input id=\"input-new-array\" placeholder=\"0\" [(ngModel)] = \"nodeValue\"/>\n        <br><br>\n        <label>Index of node to insert:</label>\n        <input id=\"input-new-array\" placeholder=\"0\" [(ngModel)] = \"nodeIndex\"/>\n        <br><br>\n        <div id=\"loop-content\">\n          <button id=\"next-button\" (click)=\"nextNode()\">Step</button><br>\n        </div>\n        <div class=\"insert-content\">\n          void insert(int value, int position) {{'{'}} <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node *newNode = new Node(); <div style=\"color: red; font-weight: 600;display: inline;\">\\\\ Create A new node to store the value of the Node we want to insert </div> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode->data = value; <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode->next = nullptr; <div style=\"color: red; font-weight: 600;display: inline;\">\\\\ The new node points to Null</div> <br><br>\n        \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head == nullptr || position == 0) {{'{'}}<div style=\"color: red; font-weight: 600;display: inline;\"> \\\\ Check If the Linked List is empty or </div><br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"color: red; font-weight: 600;display: inline;\">\\\\We want to add the node to the beginning of the Linked List </div><br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode->next = head;<br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = newNode;<br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{'}'}}<br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"color: red; font-weight: 600;display: inline;\" *ngIf=\"addHead\">You add the node at index 0 which mean at to the top of the Linked List</div> <br><br>\n        \n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node *current = head;<br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = 0; <div style=\"color: red; font-weight: 600;display: inline;\">\\\\ track the position we need to add</div><br>\n  \n  \n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"color: red; font-weight: 600;display: inline;\">\\\\ The current node point to node <b>0</b>  which has value of <b>Head</b> </div> <br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"color: red; font-weight: 600;display: inline;\">\\\\ Count equals to <b>0</b></div><br>\n  \n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < position - 1 && current->next != nullptr) {{'{'}}<br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current = current->next; <div style=\"color: red; font-weight: 600;display: inline;\">\\\\ The current node point to node <b>{{currIndex}}</b>  which has value of <b>{{currValue}}</b></div><br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; <div style=\"color: red; font-weight: 600;display: inline;\">\\\\ <b>{{\"Count =\" + position}}</b></div><br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{'}'}} <br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"color: red; font-weight: 600;display: inline;\" *ngIf=\"position === nodeIndex - 1\">\\\\ The current node is at the node before the position to insert a node </div> <br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode->next = current->next;<br>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current->next = newNode;<br>\n            {{'}'}}<br>\n          \n        </div>\n      </div>\n  </div>\n  \n  \n  \n  <div id=\"array-index\" *ngIf=\"onClose === false && onDelete === true\">\n      <div id=\"array-index-content\">\n        <span class=\"close\" (click)=\"close()\">&times;</span>\n  \n        <label>Enter a index of node you want to delete:</label>\n        <input id=\"input-new-array\" placeholder=\"2\" [(ngModel)]=\"nodeIndex\"/>\n        <br><br>\n        <div id=\"loop-content\">\n          <button id=\"next-button\" (click)=\"nextDelete()\">Step</button><br>\n        </div>\n  \n  \n        <div class=\"delete-content\">\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void deleteNode(int position) {{'{'}} <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head == nullptr) return; <br><br>\n    \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node *temp = head; <br>\n    \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (position == 0) {{'{'}} <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = temp->next; <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete temp;<br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{'}'}}<br><br>\n    \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; temp != nullptr && i < position - 1; i++) {{'{'}} <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp->next;<br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{'}'}} <br>\n    \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp == nullptr || temp->next == nullptr) return; <br>\n    \n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node *next = temp->next->next; <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete temp->next; <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp->next = next; <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{'}'}} <br>\n        </div>\n      </div>\n  </div>\n  \n  \n  \n  \n  <div class = \"runloop\">\n    <div id=\"loop-through\">\n      <button id=\"loop-through-button\" class=\"center\">run  Loop</button>\n      <br>\n    </div>\n  \n    <div id=\"index-info-popup-content\" *ngIf=\"onClose === false && onLoop === true\">\n      <span class=\"close\">&times;</span>\n      <div id=\"loop-content\">\n        <button id=\"next-button\">Step</button><br>\n        <br>\n        <button id=\"restart-loop\">Start Loop Again</button>\n      </div>\n  \n      <h2 style=\"text-align: center;\">Indexing Information</h2>\n      <div>\n        <p> \n          In an array, an index starts at 0 and counts up from there. <br>\n          Say that you declare an array called arr with values 2, 4, 6, 8 <br>\n          Declaring that array looks like: <b>arr[] = [2, 4, 6, 8]\n  \n          </b><br><br>\n  \n          The value 2 is at index 0, the value 4 is at index 1, and so on. <br><br>\n  \n          Typically, programmers use the letter 'i' to show the index in a loop. <br><br>\n        </p>\n  \n        <span id=\"for-loop\">Example: <b>for (int i=0, i < arr.length, i++)</b></span>\n        <br>\n        <br>\n        <li><b>int i=0</b> initializes the variable i</li> \n        <br>\n        <li><b>i < arr.length</b> is the condition. Here the loop will run as long as the index is less than the length of the array. We use < instead of <= \n          because the last index in the array will always be <i>one less than the ength of the array</i> since indexing starts at zero.<br></li>\n        <li><b>i++</b> increments the index after everything inside the loop has executed.<br><br></li>\n  \n        Finding <b>i</b> retrieves the index.<br>\n        Finding <b>arr[i]</b> retrieves the value associate with that index.<br>\n        For example, using the array from above, if i = 2, arr[i] equals 6.<br>\n        \n      </div>\n  </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-linked-list',\n  templateUrl: './linked-list.component.html',\n  styleUrls: ['./linked-list.component.css']\n})\nexport class LinkedListComponent implements OnInit {\n  items = [\"Head\",11,12,13,14];\n\n  onClose: boolean = true\n\n  onAdd: boolean = false\n  onInsert: boolean = false\n  onDelete: boolean = false\n  onLoop: boolean = false\n  \n\n  selectedNodeIndex = 0;\n  currValue: any = -1\n  currIndex: any = -1\n  nodeValue: any = -1\n  nodeIndex: any = -1\n  position: any = 0\n  color = 'white';\n  \n  ngOnInit(){\n    this.nodeValue = -1\n    this.nodeIndex = -1\n  }\n\n\n  close(){\n    this.onClose = true\n    this.onAdd = false\n    this.onInsert = false\n    this.onDelete = false\n    this.onLoop = false\n\n    this.nodeIndex = -1\n    this.currValue = -1\n    this.nodeValue = -1\n    this.doneStop = false\n    this.currIndex = -1\n  }\n\n  addHead = false\n  insertNode(){\n    this.onClose = false\n    this.onInsert = true\n    this.currIndex = 0\n    this.currValue = this.items[this.nodeIndex]\n  }\n\n  doneStop: boolean = false\n  nextNode(){\n    if(this.nodeIndex == 0 && this.doneStop == false){\n      this.addHead = true\n      this.items.splice(this.nodeIndex+1,0,this.nodeValue)\n      this.doneStop = true\n    }\n    if(this.position == this.nodeIndex - 1 && this.doneStop == false){\n      this.items.splice(this.nodeIndex,0,this.nodeValue)\n      this.doneStop =true\n    }\n    else if(this.position < this.nodeIndex - 1 && this.doneStop == false){\n      this.currIndex += 1\n      this.currValue  = this.items[this.currIndex]\n      this.position += 1\n    }\n  }\n\n  deleteNode(){\n    this.onClose = false\n    this.onDelete = true\n    this.currIndex = 0\n    this.currValue = this.items[this.nodeIndex]\n  }\n\n  nextDelete(){\n    \n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-csc231',\n  templateUrl: './csc231.component.html',\n  styleUrls: ['./csc231.component.css']\n})\nexport class Csc231Component {\n\n}\n","<p>csc231 works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-csc232',\n  templateUrl: './csc232.component.html',\n  styleUrls: ['./csc232.component.css']\n})\nexport class Csc232Component {\n\n}\n","<p>csc232 works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-csc233',\n  templateUrl: './csc233.component.html',\n  styleUrls: ['./csc233.component.css']\n})\nexport class Csc233Component {\n\n}\n","<p>csc233 works!</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-csc240',\n  templateUrl: './csc240.component.html',\n  styleUrls: ['./csc240.component.css']\n})\nexport class Csc240Component {\n\n}\n","<p>csc240 works!</p>\n","import { Injectable } from '@angular/core';\n\n// This interface is optional, showing how you can add strong typings for custom globals.\n// Just use \"Window\" as the type if you don't have custom global stuff\nexport interface ICustomWindow extends Window {\n    __custom_global_stuff: string;\n}\n\nfunction getWindow (): any {\n    return window;\n}\n\n@Injectable()\nexport class WindowRefService {\n    get nativeWindow (): ICustomWindow {\n        return getWindow();\n    }\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-caesar-cipher',\n  templateUrl: './caesar-cipher.component.html',\n  styleUrls: ['./caesar-cipher.component.css']\n})\nexport class CaesarCipherComponent {\n  plainText = '';\n  shiftValue = 0;\n  cipherText = '';\n\n  encrypt() {\n    this.cipherText = this.shift(this.plainText, this.shiftValue);\n  }\n\n  decrypt() {\n    this.cipherText = this.shift(this.cipherText, -this.shiftValue);\n  }\n  shift(text: string, shift: number) {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabetUpper = alphabet.toUpperCase();\n\n    let result = '';\n    for (const char of text) {\n      const charLower = char.toLowerCase();\n      if (alphabet.indexOf(charLower) === -1) {\n        result += char;\n        continue;\n      }\n\n      const shiftAlphabet = char === charLower ? alphabet : alphabetUpper;\n      const shiftedIndex = (alphabet.indexOf(charLower) + shift + alphabet.length) % alphabet.length;\n      result += shiftAlphabet[shiftedIndex];\n    }\n\n    return result;\n  }\n}\n","\n<div class=\"container\">\n    <div class=\"image\"><img src=\"./assets/courses/cipher.png\" alt=\"\" width=\"700px\" height=\"400px\"></div>\n    <div class=\"app-caesar-cipher\">\n      <h2>Caesar Cipher</h2>\n      <div class=\"input-group\">\n        <label>Enter plain text:</label>\n        <input [(ngModel)]=\"plainText\">\n      </div>\n      <div class=\"input-group\">\n        <label>Enter shift value:</label>\n        <input type=\"number\" [(ngModel)]=\"shiftValue\">\n      </div>\n      <div class=\"button-group\">\n        <button (click)=\"encrypt()\">Encrypt</button>\n        <button (click)=\"decrypt()\">Decrypt</button>\n      </div>\n      <div class=\"output-group\">\n        <label>Cipher text:</label>\n        <p>{{cipherText}}</p>\n      </div>\n    </div>\n  </div>\n  \n  ","<app-illustrated></app-illustrated>\n\n<app-caesar-cipher></app-caesar-cipher>\n\n<h1 class=\"chapter-header\">\n    Public Key Encryption\n</h1>\n<div class=\"gif-image\">\n    <img src=\"./assets/images/publickey.gif\" alt=\"Public Key\">\n</div>\n<div class=\"gif-image2\">\n    <img src=\"./assets/images/publickey3.gif\" alt=\"Public Key\" width=\"1000px\" height=\"500px\">\n</div>\n\n\n<div id=\"array-table-buttons\" class = \"decorTable\">\n    <button id=\"array-popup-button\" (click)=\"openrsa()\">Rivest-Shamir-Adleman (RSA)</button>\n    <button id=\"push-popup-button\">Elliptic Curve Cryptography (ECC)</button>\n    <button id=\"pop-popup-button\" >Digital Signature Algorithm (DSA)</button>\n    <button id=\"modify-popup-button\">Diffie-Hellman key exchange (DHE)</button>\n</div>\n\n\n<div class=\"rsa\" *ngIf=\"rsa\">\n    <app-rsa></app-rsa>\n</div>\n\n\n\n\n\n\n<!-- ##########################Materials##############################  -->\n","import { Component, HostListener, OnInit } from '@angular/core';\nimport { WindowRefService, ICustomWindow} from './WindowRefService';\n\n\n@Component({\n  selector: 'app-csc340',\n  templateUrl: './csc340.component.html',\n  styleUrls: ['./csc340.component.css']\n})\n\nexport class Csc340Component{\n  rsa = false\n  \n  \n  openrsa(){\n    this.rsa = !this.rsa\n  }\n  \n  \n\n}\n","import { Component,OnInit } from '@angular/core';\n// import { AngularFirestore } from '@angular/fire/firestore';\n// import * as eccrypto from 'eccrypto';\n\n@Component({\n  selector: 'app-ecc',\n  templateUrl: './ecc.component.html',\n  styleUrls: ['./ecc.component.css']\n})\n\nexport class EccComponent{\n  plaintext: string = '';\n  publicKey: string = '';\n  encrypted: string = '';\n\n  // encryptedMessage: string = '';\n  // decryptedMessage: string = '';\n\n  // private privateKey: Uint8Array;\n  // private publicKey: Uint8Array;\n\n  // constructor() {\n  //   // Generate an ECC key pair\n  //   eccrypto.generatePrivate().then((privateKey) => {\n  //     this.privateKey = privateKey;\n  //     this.publicKey = eccrypto.getPublic(privateKey);\n  //   });\n  // }\n\n  async encrypt() {\n    // const publicKey = eccrypto.getPublic(Buffer.from(this.publicKey, 'hex'));\n    // const message = Buffer.from(this.plaintext);\n    // const encrypted = await eccrypto.encrypt(publicKey, message);\n    // this.encrypted = encrypted.toString('hex');\n\n    // // Convert the message to a buffer\n    // const messageBuffer = Buffer.from(this.message);\n\n    // // Encrypt the message with the recipient's public key\n    // const encrypted = await eccrypto.encrypt(this.publicKey, messageBuffer);\n\n    // // Convert the encrypted data to a string\n    // this.encryptedMessage = JSON.stringify(encrypted);\n  }\n\n  async decrypt() {\n    // const privateKey = Buffer.from('private key goes here', 'hex');\n    // const encrypted = Buffer.from(this.encrypted, 'hex');\n    // const decrypted = await eccrypto.decrypt(privateKey, encrypted);\n    // this.plaintext = decrypted.toString();\n\n    // // Parse the encrypted data from a string\n    // const encrypted = JSON.parse(this.encryptedMessage);\n\n    // // Decrypt the message with the recipient's private key\n    // const decryptedBuffer = await eccrypto.decrypt(this.privateKey, encrypted);\n\n    // // Convert the decrypted buffer to a string\n    // this.decryptedMessage = decryptedBuffer.toString();\n  }\n}\n","<img src=\"./assets/images/ECC.gif\" alt=\"\">\n\n\n<div>\n    <label for=\"plaintext\">Plaintext:</label>\n    <textarea id=\"plaintext\" [(ngModel)]=\"plaintext\"></textarea>\n  </div>\n  <div>\n    <label for=\"publicKey\">Public Key:</label>\n    <textarea id=\"publicKey\" [(ngModel)]=\"publicKey\"></textarea>\n  </div>\n  <div>\n    <label for=\"encrypted\">Encrypted:</label>\n    <textarea id=\"encrypted\">{{encrypted}}</textarea>\n  </div>\n  <button (click)=\"encrypt()\">Encrypt</button>\n  <button (click)=\"decrypt()\">Decrypt</button>","import { Component, HostListener, OnInit } from '@angular/core';\nimport { Ill } from './ill.interface';\n\ndeclare global {\n  interface Window {\n    ill: any;\n  }\n}\n\n@Component({\n  selector: 'app-illustrated',\n  templateUrl: './illustrated.component.html',\n  styleUrls: ['./illustrated.component.css']\n})\n\nexport class IllustratedComponent implements OnInit{\n  private ill: any;\n\n  ngOnInit() {\n    // Initialize ill object properties\n    // window.onload = () => {\n\n    Array.from(document.querySelectorAll('.record, .calculation')).forEach(el => {\n        (el as HTMLElement).onclick = (event: MouseEvent) => {\n          if (el === event.target && typeof event.offsetY === 'number' && event.offsetY < 60) {\n            this.ill.toggleRecord(el, event);\n          } else {\n            this.ill.selectRecord(el, event);\n          }\n        };\n    });\n\n    Array.from(document.querySelectorAll('.rec-label')).forEach(el => {\n      (el as HTMLElement).onclick = (event: Event) => {\n        this.ill.toggleRecord(el.parentNode, event);\n      };\n    });\n\n    Array.from(document.querySelectorAll('.record')).forEach(el => {\n      this.ill.addToggleAnnotations(el);\n    });\n\n    Array.from(document.querySelectorAll('codesample')).forEach(el => {\n      this.ill.addShowCode(el);\n    });\n\n    this.ill.injectLabels();\n    \n\n    window.onkeyup = (e: KeyboardEvent) => {\n      let els: HTMLElement[];\n      if (e.keyCode === 27) {\n        els = Array.from(document.querySelectorAll('.record.annotate'));\n        if (els.length) {\n          els.forEach(rec => rec.classList.remove('annotate'));\n        } else {\n          this.ill.unselectAllRecords();\n        }\n      }\n    };\n    \n\n    if (typeof window !== 'undefined') {\n      window.ill = this.ill;\n    }\n\n  }\n\n\n\n  constructor() {\n    this.ill = {};\n    this.ill.elementIsVisible = (el: HTMLElement) => {\n      const rect = el.getBoundingClientRect()\n      const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight)\n      return !(rect.bottom < 0 || rect.top - viewHeight >= 0)\n    };\n\n    this.ill.ensureElementInView = (el: HTMLElement) => {\n      if (!this.ill.elementIsVisible(el)) {\n        el.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n\n    this.ill.unselectAllRecords = () => {\n      const records = Array.from(document.querySelectorAll('.illustrated .record.selected, .illustrated .calculation.selected'));\n      for (const record of records) {\n        record.classList.remove('selected');\n      }\n    };\n\n    this.ill.toggleRecord = (element: HTMLElement, event: Event) => {\n      const selected = element.classList.contains('selected');\n      this.ill.unselectAllRecords();\n\n      if (!selected) {\n        element.classList.add('selected');\n      } else {\n        this.ill.closeAllCode();\n      }\n\n      event.stopPropagation();\n      this.ill.ensureElementInView(element);\n    };\n\n    this.ill.selectRecord = (element: HTMLElement, event: Event) => {\n      this.ill.unselectAllRecords();\n      element.classList.add('selected');\n      event.stopPropagation();\n      this.ill.ensureElementInView(element);\n    };\n\n    this.ill.showCode = (element: HTMLElement, event: Event) => {\n      if (element.parentNode) {\n        (element.parentNode as HTMLElement).classList.add('show');\n      }\n      event.stopPropagation();\n    };\n\n    this.ill.closeAllCode = () => {\n      const codeSamples = Array.from(document.querySelectorAll('codesample.show'));\n      for (const codeSample of codeSamples) {\n        codeSample.classList.remove('show');\n      }\n    };\n\n    this.ill.toggleAnnotate = (el: HTMLElement) => {\n      el.classList.toggle('annotate');\n    };\n\n    this.ill.cancel = (event: Event) => {\n      if (event) {\n        event.stopPropagation();\n      }\n    };\n    this.ill.addShowCode = (el: HTMLElement) => {\n      const showCodeTmplElement = document.getElementById('showCodeTmpl');\n      if (showCodeTmplElement) {\n        const showCodeTmpl = showCodeTmplElement.innerHTML;\n        el.innerHTML = showCodeTmpl + el.innerHTML;\n      }\n    };\n\n    this.ill.addToggleAnnotations = (record: HTMLElement) => {\n      const expl = record.querySelector('.rec-explanation') as Element;\n      if (expl && expl instanceof Element) {\n        const annotateTmpl = document.getElementById('annotateTmpl')?.cloneNode(true);\n        if (annotateTmpl) {\n          expl.insertAdjacentElement('afterend', annotateTmpl as Element);\n        }\n      }\n    };\n\n    this.ill.injectLabels = () => {\n      const elements = Array.from(document.querySelectorAll('.string > .explanation, .decryption > .explanation'));\n      for (const element of elements) {\n        const expl = element;\n        const parentNode = expl.parentNode;\n        if (parentNode) {\n          const label = parentNode.querySelector('.label');\n          if (label) {\n            const labelText = label.textContent;\n            if (labelText !== null) {\n              const h4 = document.createElement('h4');\n              const labelTextNode = document.createTextNode(labelText);\n              h4.appendChild(labelTextNode);\n              expl.insertAdjacentElement('afterbegin', h4);\n            }\n          }\n        }\n      }\n    };\n\n  }\n\n  \n  \n}\n","\n<div class=\"illustrated\">\n    <div class=\"container\">\n        <h1>The Illustrated TLS Connection</h1>\n        <h3>Every byte of a TLS connection explained and reproduced.</h3>\n        <div class=\"outerblock\">\n        <p>In this demonstration a client connects to a server,\n        negotiates a TLS 1.2 session, sends \"ping\", receives \"pong\",\n        and then terminates the session. Click below to begin\n        exploring.</p>\n        </div>\n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Hello</div>\n        <img class=\"illustration\" src=\"./assets/images/key1.png\" width=\"135\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The session begins with the client saying \"Hello\".\n            The client provides the following:\n            <ul>\n            <li>protocol version\n            <li>client random data (used later in the handshake)\n            <li>an optional session id to resume\n            <li>a list of cipher suites\n            <li>a list of compression methods\n            <li>a list of extensions\n            </ul>\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n                16 03 01 00 a5\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 01</p> - protocol version is 3.1 (also known as TLS 1.0)\n                    <li> <p>00 a5</p> - 0xA5 (165) bytes of handshake message follows\n                    </ul>\n                    Interestingly the version is 3.1 (TLS 1.0) instead\n                    of the expected \"3,3\" (TLS 1.2).  Looking through the\n                    golang crypto/tls library we find the following\n                    comment:\n        <pre><code>if vers == 0 {{\"{\"}}\n            // Some TLS servers fail if the record version is\n            // greater than TLS 1.0 for the initial ClientHello.\n            vers = VersionTLS10\n        {{\"}\"}}</code></pre>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        01 00 00 a1\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>01</p> - handshake message type 0x01 (client hello)\n                    <li> <p>00 00 a1</p> - 0xA1 (161) bytes of client hello follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Client Version</span>\n                <span class=\"bytes\">\n        03 03\n                </span>\n                <div class=\"explanation\">\n                    The protocol version of \"3,3\" (meaning TLS 1.2) is given.\n                    <br/><br/>\n                    The unusual version number (\"3,3\" representing\n                    TLS 1.2) is due to TLS 1.0 being a minor\n                    revision of the SSL 3.0 protocol.  Therefore\n                    TLS 1.0 is represented by \"3,1\", TLS 1.1 is\n                    \"3,2\", and so on.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Client Random</span>\n                <span class=\"bytes\">\n        00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n                </span>\n                <div class=\"explanation\">\n                    The client provides 32 bytes of random data.\n                    In this example we've made the random data a predictable string.\n                    <br/><br/>\n                    The TLS 1.2 spec says that the first 4 bytes\n                    should be the current time in seconds-since-1970\n                    but this is\n                    <a href=\"https://tools.ietf.org/html/draft-mathewson-no-gmtunixtime-00\">now recommended against</a>\n                    as it enables fingerprinting of hosts and servers.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Session ID</span>\n                <span class=\"bytes\">\n        00\n                </span>\n                <div class=\"explanation\">\n                    The client can provide the ID of a previous\n                    TLS session against this server which it\n                    is able to resume.  For this to work both\n                    the server and client will have remembered\n                    key information from the previous connection\n                    in memory.  Resuming a connection saves a\n                    lot of computation and network round-trip\n                    time so it is performed whenever possible.\n                    <ul>\n                    <li> <p>00</p> - length of zero (no session id is provided)\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Cipher Suites</span>\n                <span class=\"bytes\">\n        00 20 cc a8 cc a9 c0 2f c0 30 c0 2b c0 2c c0 13 c0 09 c0 14 c0 0a 00 9c 00 9d 00 2f 00 35 c0 12\n        00 0a\n                </span>\n                <div class=\"explanation\">\n                    The client provides an ordered list of which\n                    cryptographic methods it will support for\n                    key exchange, encryption with that exchanged\n                    key, and message authentication.\n                    The list is in the order preferred by the\n                    client, with highest preference first.\n                    <ul>\n                    <li> <p>00 20</p> - 0x20 (32) bytes of cipher suite data\n                    <li> <p>cc a8</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</p>\n                    <li> <p>cc a9</p> - assigned value for  <p>TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</p>\n                    <li> <p>c0 2f</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</p>\n                    <li> <p>c0 30</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</p>\n                    <li> <p>c0 2b</p> - assigned value for  <p>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</p>\n                    <li> <p>c0 2c</p> - assigned value for  <p>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</p>\n                    <li> <p>c0 13</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</p>\n                    <li> <p>c0 09</p> - assigned value for  <p>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</p>\n                    <li> <p>c0 14</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</p>\n                    <li> <p>c0 0a</p> - assigned value for  <p>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</p>\n                    <li> <p>00 9c</p> - assigned value for  <p>TLS_RSA_WITH_AES_128_GCM_SHA256</p>\n                    <li> <p>00 9d</p> - assigned value for  <p>TLS_RSA_WITH_AES_256_GCM_SHA384</p>\n                    <li> <p>00 2f</p> - assigned value for  <p>TLS_RSA_WITH_AES_128_CBC_SHA</p>\n                    <li> <p>00 35</p> - assigned value for  <p>TLS_RSA_WITH_AES_256_CBC_SHA</p>\n                    <li> <p>c0 12</p> - assigned value for  <p>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</p>\n                    <li> <p>00 0a</p> - assigned value for  <p>TLS_RSA_WITH_3DES_EDE_CBC_SHA</p>\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Compression Methods</span>\n                <span class=\"bytes\">\n        01 00\n                </span>\n                <div class=\"explanation\">\n                    The client provides an ordered list of which\n                    compression methods it will support.  This\n                    compression would be applied before encryption\n                    (as encrypted data is usually incompressible).\n                    <ul>\n                    <li> <p>01</p> - 0x1 (1) bytes of compression methods follows\n                    <li> <p>00</p> - assigned value for no compression\n                    </ul>\n                    Compression has characteristics that can weaken\n                    the security of the encrypted data\n                    (see <a href=\"https://en.wikipedia.org/wiki/CRIME\">CRIME</a>).\n                    so this feature has been removed from future TLS protocols.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extensions Length</span>\n                <span class=\"bytes\">\n        00 58\n                </span>\n                <div class=\"explanation\">\n                    The client has provided a list of optional\n                    extensions which the server can use to\n                    take action or enable new features.\n                    <ul>\n                    <li> <p>00 58</p> - the extensions will take 0x58 (88) bytes of data\n                    </ul>\n                    Each extension will start with two bytes\n                    that indicate which extension it is, followed\n                    by a two-byte content length field, followed\n                    by the contents of the extension.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Server Name</span>\n                <span class=\"bytes\">\n        00 00 00 18 00 16 00 00 13 65 78 61 6d 70 6c 65 2e 75 6c 66 68 65 69 6d 2e 6e 65 74\n                </span>\n                <div class=\"explanation\">\n                    The client has provided the name of the\n                    server it is contacting, also known as SNI\n                    (Server Name Indication).\n                    <br/><br/>\n                    Without this extension a HTTPS server would\n                    not be able to provide service for multiple\n                    hostnames on a single IP address (virtual\n                    hosts) because it couldn't know which\n                    hostname's certificate to send until\n                    after the TLS session was negotiated and the\n                    HTTP request was made.\n                    <ul>\n                        <li> <p>00 00</p> - assigned value for extension \"server name\"\n                        <li> <p>00 18</p> - 0x18 (24) bytes of \"server name\" extension data follows\n                        <li> <p>00 16</p> - 0x16 (22) bytes of first (and only) list entry follows\n                        <li> <p>00</p> - list entry is type 0x00 \"DNS hostname\"\n                        <li> <p>00 13</p> - 0x13 (19) bytes of hostname follows\n                        <li> <p>65 78 61 ... 6e 65 74</p> - \"example.ulfheim.net\"\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Status Request</span>\n                <span class=\"bytes\">\n        00 05 00 05 01 00 00 00 00\n                </span>\n                <div class=\"explanation\">\n                    The client provides permission for the\n                    server to provide OCSP information in its response.\n                    OCSP can be used to check whether a certificate\n                    has been revoked.\n                    <br/><br/>\n                    This form of the client sending an empty\n                    extension is necessary because\n                    it is a fatal error for the server\n                    to reply with an extension that the client\n                    did not provide first.  Therefore the client\n                    sends an empty form of the extension, and\n                    the server replies with the extension\n                    populated with data.\n                    <ul>\n                        <li> <p>00 05</p> - assigned value for extension \"status request\"\n                        <li> <p>00 05</p> - 0x5 (5) bytes of \"status request\" extension data follows\n                        <li> <p>01</p> - assigned value for \"certificate status type: OCSP\"\n                        <li> <p>00 00</p> - 0x0 (0) bytes of responderID information\n                        <li> <p>00 00</p> - 0x0 (0) bytes of request extension information\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Supported Groups</span>\n                <span class=\"bytes\">\n        00 0a 00 0a 00 08 00 1d 00 17 00 18 00 19\n                </span>\n                <div class=\"explanation\">\n                    The client has indicated that it supports\n                    elliptic curve (EC) cryptography for 4\n                    curves.  This extension was originally\n                    named \"elliptic curves\" but has been renamed\n                    \"supported groups\" to be generic to other\n                    cryptography types.\n                    <ul>\n                        <li> <p>00 0a</p> - assigned value for extension \"supported groups\"\n                        <li> <p>00 0a</p> - 0xA (10) bytes of \"supported groups\" extension data follows\n                        <li> <p>00 08</p> - 0x8 (8) bytes of data are in the curves list\n                        <li> <p>00 1d</p> - assigned value for the curve \"x25519\"\n                        <li> <p>00 17</p> - assigned value for the curve \"secp256r1\"\n                        <li> <p>00 18</p> - assigned value for the curve \"secp384r1\"\n                        <li> <p>00 19</p> - assigned value for the curve \"secp521r1\"\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - EC Point Formats</span>\n                <span class=\"bytes\">\n        00 0b 00 02 01 00\n                </span>\n                <div class=\"explanation\">\n                    During elliptic curve (EC) cryptography the\n                    client and server will exchange information\n                    on the points selected, in either compressed\n                    or uncompressed form.  This extension\n                    indicates that the client can only parse\n                    uncompressed information from the server.\n                    <br/><br/>\n                    In the next version of TLS the ability to\n                    negotiate points does not exist (instead a\n                    single point is pre-selected for each curve),\n                    so this extension would not be sent.\n                    <ul>\n                        <li> <p>00 0b</p> - assigned value for extension \"EC points format\"\n                        <li> <p>00 02</p> - 0x2 (2) bytes of \"EC points format\" extension data follows\n                        <li> <p>01</p> - 0x1 (1) bytes of data are in the supported formats list\n                        <li> <p>00</p> - assigned value for uncompressed form\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Signature Algorithms</span>\n                <span class=\"bytes\">\n        00 0d 00 12 00 10 04 01 04 03 05 01 05 03 06 01 06 03 02 01 02 03\n                </span>\n                <div class=\"explanation\">\n                    As TLS has developed it has become necessary to\n                    support stronger signature algorithms such\n                    as SHA-256 while still supporting earlier\n                    implementations that used MD5 and SHA1.\n                    This extension indicates which signature\n                    algorithms the client is capable of\n                    understanding and may influence the choice\n                    of certificate that the server sends to the\n                    client.\n                    <ul>\n                        <li> <p>00 0d</p> - assigned value for extension \"Signature Algorithms\"\n                        <li> <p>00 12</p> - 0x12 (18) bytes of \"Signature Algorithms\" extension data follows\n                        <li> <p>00 10</p> - 0x10 (16) bytes of data are in the following list of algorithms\n                        <li> <p>04 01</p> - assigned value for RSA/PKCS1/SHA256\n                        <li> <p>04 03</p> - assigned value for ECDSA/SECP256r1/SHA256\n                        <li> <p>05 01</p> - assigned value for RSA/PKCS1/SHA386\n                        <li> <p>05 03</p> - assigned value for ECDSA/SECP384r1/SHA384\n                        <li> <p>06 01</p> - assigned value for RSA/PKCS1/SHA512\n                        <li> <p>06 03</p> - assigned value for ECDSA/SECP521r1/SHA512\n                        <li> <p>02 01</p> - assigned value for RSA/PKCS1/SHA1\n                        <li> <p>02 03</p> - assigned value for ECDSA/SHA1\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Renegotiation Info</span>\n                <span class=\"bytes\">\n        ff 01 00 01 00\n                </span>\n                <div class=\"explanation\">\n                    The presence of this extension prevents\n                    <a href=\"https://kryptera.se/Renegotiating%20TLS.pdf\">a type of attack</a>\n                    performed with TLS renegotiation.\n                    <br/><br/>\n                    The ability to renegotiate a connection has been removed from the next version of this\n                    protocol (TLS 1.3) so this extension will no longer be necessary in the future.\n                    <ul>\n                        <li> <p>ff 01</p> - assigned value for extension \"Renegotiation Info\"\n                        <li> <p>00 01</p> - 0x1 (1) bytes of \"Renegotiation Info\" extension data follows\n                        <li> <p>00</p> - length of renegotiation data is zero, because this is a new connection\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - SCT</span>\n                <span class=\"bytes\">\n        00 12 00 00\n                </span>\n                <div class=\"explanation\">\n                    The client provides permission for the\n                    server to return a signed certificate\n                    timestamp.\n                    <br/><br/>\n                    This form of the client sending an empty\n                    extension is necessary because\n                    it is a fatal error for the server\n                    to reply with an extension that the client\n                    did not provide first.  Therefore the client\n                    sends an empty form of the extension, and\n                    the server replies with the extension\n                    populated with data, or changes behavior\n                    based on the client having sent the\n                    extension.\n                    <ul>\n                        <li> <p>00 12</p> - assigned value for extension \"signed certificate timestamp\"\n                        <li> <p>00 00</p> - 0x0 (0) bytes of \"signed certificate timestamp\" extension data follows\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n        \n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Hello</div>\n        <img class=\"illustration\" src=\"./assets/images/key2.png\" width=\"124\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The server says \"Hello\" back.  The server provides the following:\n            <ul>\n            <li>the selected protocol version\n            <li>server random data (used later in the handshake)\n            <li>the session id\n            <li>the selected cipher suite\n            <li>the selected compression method\n            <li>a list of extensions\n            </ul>\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 00 31\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 31</p> - 0x31 (49) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        02 00 00 2d\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>02</p> - handshake message type 0x02 (server hello)\n                    <li> <p>00 00 2d</p> - 0x2D (45) bytes of server hello data follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Server Version</span>\n                <span class=\"bytes\">\n        03 03\n                </span>\n                <div class=\"explanation\">\n                    The protocol version of \"3,3\" (TLS 1.2) is given.\n                    <br/><br/>\n                    The unusual version number (\"3,3\" representing\n                    TLS 1.2) is due to TLS 1.0 being a minor\n                    revision of the SSL 3.0 protocol.  Therefore\n                    TLS 1.0 is represented by \"3,1\", TLS 1.1 is\n                    \"3,2\", and so on.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Server Random</span>\n                <span class=\"bytes\">\n        70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\n                </span>\n                <div class=\"explanation\">\n                    The server provides 32 bytes of random data.\n                    In this example we've made the random data a predictable string.\n                    <br/><br/>\n                    The TLS 1.2 spec says that the first 4 bytes\n                    should be the current time in seconds-since-1970\n                    but this is\n                    <a href=\"https://tools.ietf.org/html/draft-mathewson-no-gmtunixtime-00\">now recommended against</a>\n                    as it enables fingerprinting of hosts and servers.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Session ID</span>\n                <span class=\"bytes\">\n        00\n                </span>\n                <div class=\"explanation\">\n                    The server can provide an ID for this session\n                    which a client can provide on a later session\n                    negotiation in an attempt to re-use the key\n                    data and skip most of the TLS negotiation\n                    process.  For this to work both the server\n                    and client will store key information from\n                    the previous connection in memory.  Resuming\n                    a connection saves a lot of computation and\n                    network round-trip time so it is performed\n                    whenever possible.\n                    <ul>\n                    <li> <p>00</p> - length of zero (no session id is used)\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Cipher Suite</span>\n                <span class=\"bytes\">\n        c0 13\n                </span>\n                <div class=\"explanation\">\n                    The server has selected cipher suite 0xC013\n                    (TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA) from the\n                    list of options given by the client.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Compression Method</span>\n                <span class=\"bytes\">\n        00\n                </span>\n                <div class=\"explanation\">\n                    The server has selected compression method\n                    0x00 (\"Null\", which performs no compression)\n                    from the list of options given by the client.\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extensions Length</span>\n                <span class=\"bytes\">\n        00 05\n                </span>\n                <div class=\"explanation\">\n                    The server has returned a list of extensions\n                    to the client.  Because the server is\n                    forbidden from replying with an extension\n                    that the client did not send in its hello\n                    message, the server knows that the client\n                    will support all extensions listed.\n                    <ul>\n                    <li> <p>00 05</p> - the extensions will take 0x5 (5) bytes of data\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Extension - Renegotiation Info</span>\n                <span class=\"bytes\">\n        ff 01 00 01 00\n                </span>\n                <div class=\"explanation\">\n                    The presence of this extension prevents\n                    <a href=\"https://kryptera.se/Renegotiating%20TLS.pdf\">a type of attack</a>\n                    performed with TLS renegotiation.\n                    <br/><br/>\n                    The ability to renegotiate a connection has been removed from the next version of this\n                    protocol (TLS 1.3) so this extension will no longer be necessary in the future.\n                    <ul>\n                        <li> <p>ff 01</p> - assigned value for extension \"Renegotiation Info\"\n                        <li> <p>00 01</p> - 0x1 (1) bytes of \"Renegotiation Info\" extension data follows\n                        <li> <p>00</p> - length of renegotiation data is zero, because this is a new connection\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Certificate</div>\n        <img class=\"illustration\" src=\"./assets/images//key3.png\" width=\"130\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The server provides a certificate containing the following:\n            <ul>\n            <li>the hostname of the server\n            <li>the public key used by this server\n            <li>proof from a trusted third party that the owner of this hostname holds the private key for this public key\n            </ul>\n            <a href=\"certificate.html\" target=\"_blank\">Explore the server certificate</a>.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 03 2f\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>03 2f</p> - 0x32F (815) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        0b 00 03 2b\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>0b</p> - handshake message type 0x0B (certificate)\n                    <li> <p>00 03 2b</p> - 0x32B (811) of certificate message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Certificates Length</span>\n                <span class=\"bytes\">\n        00 03 28\n                </span>\n                <div class=\"explanation\">\n                    The certificate message begins with the\n                    length of all certificate data that will follow.\n                    <ul>\n                    <li> <p>00 03 28</p> - 0x328 (808) bytes of certificate list follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Certificate Length</span>\n                <span class=\"bytes\">\n        00 03 25\n                </span>\n                <div class=\"explanation\">\n                    The length of the first (and only) certificate.\n                    <ul>\n                    <li> <p>00 03 25</p> - 0x325 (805) bytes of certificate follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Certificate</span>\n                <span class=\"bytes\">\n        30 82 03 21 30 82 02 09 a0 03 02 01 02 02 08 15 5a 92 ad c2 04 8f 90 30 0d 06 09 2a 86 48 86 f7\n        0d 01 01 0b 05 00 30 22 31 0b 30 09 06 03 55 04 06 13 02 55 53 31 13 30 11 06 03 55 04 0a 13 0a\n        45 78 61 6d 70 6c 65 20 43 41 30 1e 17 0d 31 38 31 30 30 35 30 31 33 38 31 37 5a 17 0d 31 39 31\n        30 30 35 30 31 33 38 31 37 5a 30 2b 31 0b 30 09 06 03 55 04 06 13 02 55 53 31 1c 30 1a 06 03 55\n        04 03 13 13 65 78 61 6d 70 6c 65 2e 75 6c 66 68 65 69 6d 2e 6e 65 74 30 82 01 22 30 0d 06 09 2a\n        86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30 82 01 0a 02 82 01 01 00 c4 80 36 06 ba e7 47 6b\n        08 94 04 ec a7 b6 91 04 3f f7 92 bc 19 ee fb 7d 74 d7 a8 0d 00 1e 7b 4b 3a 4a e6 0f e8 c0 71 fc\n        73 e7 02 4c 0d bc f4 bd d1 1d 39 6b ba 70 46 4a 13 e9 4a f8 3d f3 e1 09 59 54 7b c9 55 fb 41 2d\n        a3 76 52 11 e1 f3 dc 77 6c aa 53 37 6e ca 3a ec be c3 aa b7 3b 31 d5 6c b6 52 9c 80 98 bc c9 e0\n        28 18 e2 0b f7 f8 a0 3a fd 17 04 50 9e ce 79 bd 9f 39 f1 ea 69 ec 47 97 2e 83 0f b5 ca 95 de 95\n        a1 e6 04 22 d5 ee be 52 79 54 a1 e7 bf 8a 86 f6 46 6d 0d 9f 16 95 1a 4c f7 a0 46 92 59 5c 13 52\n        f2 54 9e 5a fb 4e bf d7 7a 37 95 01 44 e4 c0 26 87 4c 65 3e 40 7d 7d 23 07 44 01 f4 84 ff d0 8f\n        7a 1f a0 52 10 d1 f4 f0 d5 ce 79 70 29 32 e2 ca be 70 1f df ad 6b 4b b7 11 01 f4 4b ad 66 6a 11\n        13 0f e2 ee 82 9e 4d 02 9d c9 1c dd 67 16 db b9 06 18 86 ed c1 ba 94 21 02 03 01 00 01 a3 52 30\n        50 30 0e 06 03 55 1d 0f 01 01 ff 04 04 03 02 05 a0 30 1d 06 03 55 1d 25 04 16 30 14 06 08 2b 06\n        01 05 05 07 03 02 06 08 2b 06 01 05 05 07 03 01 30 1f 06 03 55 1d 23 04 18 30 16 80 14 89 4f de\n        5b cc 69 e2 52 cf 3e a3 00 df b1 97 b8 1d e1 c1 46 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b 05 00\n        03 82 01 01 00 59 16 45 a6 9a 2e 37 79 e4 f6 dd 27 1a ba 1c 0b fd 6c d7 55 99 b5 e7 c3 6e 53 3e\n        ff 36 59 08 43 24 c9 e7 a5 04 07 9d 39 e0 d4 29 87 ff e3 eb dd 09 c1 cf 1d 91 44 55 87 0b 57 1d\n        d1 9b df 1d 24 f8 bb 9a 11 fe 80 fd 59 2b a0 39 8c de 11 e2 65 1e 61 8c e5 98 fa 96 e5 37 2e ef\n        3d 24 8a fd e1 74 63 eb bf ab b8 e4 d1 ab 50 2a 54 ec 00 64 e9 2f 78 19 66 0d 3f 27 cf 20 9e 66\n        7f ce 5a e2 e4 ac 99 c7 c9 38 18 f8 b2 51 07 22 df ed 97 f3 2e 3e 93 49 d4 c6 6c 9e a6 39 6d 74\n        44 62 a0 6b 42 c6 d5 ba 68 8e ac 3a 01 7b dd fc 8e 2c fc ad 27 cb 69 d3 cc dc a2 80 41 44 65 d3\n        ae 34 8c e0 f3 4a b2 fb 9c 61 83 71 31 2b 19 10 41 64 1c 23 7f 11 a5 d6 5c 84 4f 04 04 84 99 38\n        71 2b 95 9e d6 85 bc 5c 5d d6 45 ed 19 90 94 73 40 29 26 dc b4 0e 34 69 a1 59 41 e8 e2 cc a8 4b\n        b6 08 46 36 a0\n                </span>\n                <div class=\"explanation\">\n                    The certificate is in ASN.1 DER\n                    encoding.  The details of this format and\n                    the content of this binary payload are\n                    documented <a href=\"certificate.html\" target=\"_blank\">on another page</a>.\n                    <a href=\"files/server.crt\" download=\"server.crt\">The certificate</a>\n                    can be converted to the binary data in this message\n                    at the command line:\n                    \n        <pre><code>$ openssl x509 -outform der &lt; server.crt | hexdump\n    \n        0000000 30 82 03 21 30 82 02 09 a0 03 02 01 02 02 08 15\n        0000010 5a 92 ad c2 04 8f 90 30 0d 06 09 2a 86 48 86 f7\n        ... snip ...\n        </code></pre>\n                    \n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"calculation server\">\n        <div class=\"rec-label\">Server Key Exchange Generation</div>\n        <img class=\"illustration\" src=\"./assets/images/key4.png\" width=\"106\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The server calculates a private/public keypair\n            for key exchange.  Key exchange is a mathematic technique\n            by which two parties can agree on the same number without\n            an eavesdropper being able to tell what that number is.\n            <br/><br/>\n            It will do this via an elliptical curve method, using the x25519 curve.\n            <br/><br/>\n            The private key is chosen by selecting an integer between\n            0 and 2<sup>256</sup>-1.  It does this by generating 32\n            bytes (256 bits) of random data.  The\n            <a href=\"files/server-ephemeral-private.key\" download=\"server-ephemeral-private.key\">private key</a>\n            selected is:\n    \n        <pre class=\"ind2\"> <p class=\"longboi\">909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf</p></pre>\n    \n            The <a href=\"files/server-ephemeral-public.key\" download=\"server-ephemeral-public.key\">public key</a>\n            is chosen by multiplying the point x=9 on the x25519 curve\n            by the private key.  The public key calculated is:\n    \n        <pre class=\"ind2\"> <p class=\"longboi\">9fd7ad6dcff4298dd3f96d5b1b2af910a0535b1488d7f8fabb349a982880b615</p></pre>\n    \n            The public key calculation can be confirmed with command line tools:\n            \n        <pre><code class=\"codesample\">### requires openssl 1.1.0 or higher\n        $ openssl pkey -noout -text &lt; server-ephemeral-private.key\n    \n        X25519 Private-Key:\n        priv:\n            90:91:92:93:94:95:96:97:98:99:9a:9b:9c:9d:9e:\n            9f:a0:a1:a2:a3:a4:a5:a6:a7:a8:a9:aa:ab:ac:ad:\n            ae:af\n        pub:\n            9f:d7:ad:6d:cf:f4:29:8d:d3:f9:6d:5b:1b:2a:f9:\n            10:a0:53:5b:14:88:d7:f8:fa:bb:34:9a:98:28:80:\n            b6:15\n        </code></pre>\n            \n        </div>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Key Exchange</div>\n        <img class=\"illustration\" src=\"./assets/images/key5.png\" width=\"138\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The server provides information for key exchange.  As part of the\n            key exchange process both the server and the client will have a\n            keypair of public and private keys, and will send the other party\n            their public key.  The shared encryption key will then be generated\n            using a combination of each party's private key and the other party's\n            public key.\n            <br/><br/>\n            The parties have agreed on a cipher suite using ECDHE, meaning the\n            keypairs will be based on a selected <b>E</b>lliptic <b>C</b>urve,\n            <b>D</b>iffie-<b>H</b>ellman will be used, and the keypairs are\n            <b>E</b>phemeral (generated for each connection) rather\n            than using the public/private key from the certificate.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 01 2c\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>01 2c</p> - 0x12C (300) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        0c 00 01 28\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>0c</p> - handshake message type 0x0c (server key exchange)\n                    <li> <p>00 01 28</p> - 0x128 (296) bytes of server key exchange follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Curve Info</span>\n                <span class=\"bytes\">\n        03 00 1d\n                </span>\n                <div class=\"explanation\">\n                    The server chooses the elliptic curve that points will be calculated from.\n                    <ul>\n                    <li> <p>03</p> - assigned value for \"named_curve\": the following bytes will identify a specific curve\n                    <li> <p>00 1d</p> - curve 0x001d (\"curve x25519\")\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Public Key</span>\n                <span class=\"bytes\">\n        20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6\n        15\n                </span>\n                <div class=\"explanation\">\n                    The server provides its public key from the step \"Server Key Exchange Generation\".\n                    <ul>\n                    <li> <p>20</p> - length of 0x20 (32) bytes\n                    <li> <p>9f d7 ... b6 15</p> - public key\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Signature</span>\n                <span class=\"bytes\">\n        04 01 01 00 04 02 b6 61 f7 c1 91 ee 59 be 45 37 66 39 bd c3 d4 bb 81 e1 15 ca 73 c8 34 8b 52 5b\n        0d 23 38 aa 14 46 67 ed 94 31 02 14 12 cd 9b 84 4c ba 29 93 4a aa cc e8 73 41 4e c1 1c b0 2e 27\n        2d 0a d8 1f 76 7d 33 07 67 21 f1 3b f3 60 20 cf 0b 1f d0 ec b0 78 de 11 28 be ba 09 49 eb ec e1\n        a1 f9 6e 20 9d c3 6e 4f ff d3 6b 67 3a 7d dc 15 97 ad 44 08 e4 85 c4 ad b2 c8 73 84 12 49 37 25\n        23 80 9e 43 12 d0 c7 b3 52 2e f9 83 ca c1 e0 39 35 ff 13 a8 e9 6b a6 81 a6 2e 40 d3 e7 0a 7f f3\n        58 66 d3 d9 99 3f 9e 26 a6 34 c8 1b 4e 71 38 0f cd d6 f4 e8 35 f7 5a 64 09 c7 dc 2c 07 41 0e 6f\n        87 85 8c 7b 94 c0 1c 2e 32 f2 91 76 9e ac ca 71 64 3b 8b 98 a9 63 df 0a 32 9b ea 4e d6 39 7e 8c\n        d0 1a 11 0a b3 61 ac 5b ad 1c cd 84 0a 6c 8a 6e aa 00 1a 9d 7d 87 dc 33 18 64 35 71 22 6c 4d d2\n        c2 ac 41 fb\n                </span>\n                <div class=\"explanation\">\n                    Because the server is generating ephemeral keys\n                    it is not using the public key provided in\n                    the server certificate.  To prove that the\n                    server owns the server certificate (giving the certificate\n                    validity in this TLS session), it signs the\n                    ephemeral public key with the certificate's\n                    private key.  This signature can be\n                    validated with the certificate's public\n                    key.\n                    <ul>\n                    <li> <p>04 01</p> - reserved value for RSA signature with SHA256 hash\n                    <li> <p>01 00</p> - length of signature (0x100 or 256 bytes)\n                    <li> <p>04 02 b6 ... ac 41 fb</p> - the\n                            computed signature for  <p>SHA256(client_hello_random\n                            + server_hello_random + curve_info + public_key)</p>\n                    </ul>\n                    We can compute the signature ourselves using\n                    the <a href=\"files/server.key\" download=\"server.key\">server's private key</a>,\n                    at the command line:\n                    \n        <pre><code>### client random from Client Hello\n        $ echo -en '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07'  > /tmp/compute\n        $ echo -en '\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f' >> /tmp/compute\n        $ echo -en '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17' >> /tmp/compute\n        $ echo -en '\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f' >> /tmp/compute\n        ### server random from Server Hello\n        $ echo -en '\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77' >> /tmp/compute\n        $ echo -en '\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f' >> /tmp/compute\n        $ echo -en '\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87' >> /tmp/compute\n        $ echo -en '\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f' >> /tmp/compute\n        ### the curve info section from this message\n        $ echo -en '\\x03\\x00\\x1d' >> /tmp/compute\n        ### the public key sections from this msg\n        $ echo -en '\\x20\\x9f\\xd7\\xad\\x6d\\xcf\\xf4\\x29' >> /tmp/compute\n        $ echo -en '\\x8d\\xd3\\xf9\\x6d\\x5b\\x1b\\x2a\\xf9' >> /tmp/compute\n        $ echo -en '\\x10\\xa0\\x53\\x5b\\x14\\x88\\xd7\\xf8' >> /tmp/compute\n        $ echo -en '\\xfa\\xbb\\x34\\x9a\\x98\\x28\\x80\\xb6\\x15' >> /tmp/compute\n        $ openssl dgst -sign server.key -sha256 /tmp/compute | hexdump\n    \n        0000000 04 02 b6 61 f7 c1 91 ee 59 be 45 37 66 39 bd c3\n        ... snip ...\n        00000f0 7d 87 dc 33 18 64 35 71 22 6c 4d d2 c2 ac 41 fb\n        </code></pre>\n                    \n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Hello Done</div>\n        <div class=\"rec-explanation\">\n            The server indicates it's finished with its half of the handshake.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 00 04\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 04</p> - 0x4 (4) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        0e 00 00 00\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>0e</p> - handshake message type 0x0e (server hello done)\n                    <li> <p>00 00 00</p> - 0x0 (0) bytes of hello done follows\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"calculation client\">\n        <div class=\"rec-label\">Client Key Exchange Generation</div>\n        <img class=\"illustration\" src=\"./assets/images/key6.png\" width=\"105\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The client calculates a private/public keypair\n            for key exchange.  Key exchange is a mathematic technique\n            by which two parties can agree on the same number without\n            an eavesdropper being able to tell what that number is.\n            <br/><br/>\n            It will do this via an elliptical curve method, using the x25519 curve.\n            <br/><br/>\n            The private key is chosen by selecting an integer between\n            0 and 2<sup>256</sup>-1.  It does this by generating 32\n            bytes (256 bits) of random data.  The\n            <a href=\"files/client-ephemeral-private.key\" download=\"client-ephemeral-private.key\">private key</a>\n            selected is:\n    \n        <pre class=\"ind2\"> <p class=\"longboi\">202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f</p></pre>\n    \n            The <a href=\"files/client-ephemeral-public.key\" download=\"client-ephemeral-public.key\">public key</a>\n            is chosen by multiplying the point x=9 on the x25519 curve\n            by the private key.  The public key calculated is:\n    \n        <pre class=\"ind2\"> <p class=\"longboi\">358072d6365880d1aeea329adf9121383851ed21a28e3b75e965d0d2cd166254</p></pre>\n    \n            The public key calculation can be confirmed at the command line:\n            \n        <pre><code>### requires openssl 1.1.0 or higher\n        $ openssl pkey -noout -text &lt; client-ephemeral-private.key\n    \n        X25519 Private-Key:\n        priv:\n            20:21:22:23:24:25:26:27:28:29:2a:2b:2c:2d:2e:\n            2f:30:31:32:33:34:35:36:37:38:39:3a:3b:3c:3d:\n            3e:3f\n        pub:\n            35:80:72:d6:36:58:80:d1:ae:ea:32:9a:df:91:21:\n            38:38:51:ed:21:a2:8e:3b:75:e9:65:d0:d2:cd:16:\n            62:54\n        </code></pre>\n            \n        </div>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Key Exchange</div>\n        <img class=\"illustration\" src=\"./assets/images/key7.png\" width=\"116\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The client provides information for key exchange.  As part of the\n            key exchange process both the server and the client will have a\n            keypair of public and private keys, and will send the other party\n            their public key.  The shared encryption key will then be generated\n            using a combination of each party's private key and the other party's\n            public key.\n            <br/><br/>\n            The parties have agreed on a cipher suite using ECDHE, meaning the\n            keypairs will be based on a selected <b>E</b>lliptic <b>C</b>urve,\n            <b>D</b>iffie-<b>H</b>ellman will be used, and the keypairs are\n            <b>E</b>phemeral (generated for each connection) rather\n            than using the public/private key from the certificate.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 00 25\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 25</p> - 0x25 (37) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        10 00 00 21\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>10</p> - handshake message type 0x10 (client key exchange)\n                    <li> <p>00 00 21</p> - 0x21 (33) bytes of client key exchange follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Public Key</span>\n                <span class=\"bytes\">\n        20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62\n        54\n                </span>\n                <div class=\"explanation\">\n                    The client provides its public key from the step \"Client Key Exchange Generation\".\n                    <ul>\n                    <li> <p>20</p> - length of 0x20 (32) bytes\n                    <li> <p>35 80 ... 62 54</p> - public key\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"calculation client\">\n        <div class=\"rec-label\">Client Encryption Keys Calculation</div>\n        <img class=\"illustration\" src=\"./assets/images/key8.png\" width=\"97\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The client now has the information to calculate the encryption\n            keys that will be used by each side.  It uses the following\n            information in this calculation:\n            <ul>\n            <li>server random (from Server Hello)\n            <li>client random (from Client Hello)\n            <li>server public key (from Server Key Exchange)\n            <li>client private key (from Client Key Generation)\n            </ul>\n            The client multiplies the server's public key with the\n            client's private key using the curve25519() algorithm.  The\n            32-byte result is called the PreMasterSecret, and is found\n            to be:\n            <pre class=\"ind2\"> <p class=\"longboi\">df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624</p></pre>\n    \n            I've provided <a href=\"files/curve25519-mult.c\">a tool</a> to perform this calculation:\n            \n        <pre><code>$ gcc -o curve25519-mult curve25519-mult.c\n        $ ./curve25519-mult client-ephemeral-private.key \\\n                            server-ephemeral-public.key | hexdump\n    \n        0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad\n        0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24\n        </code></pre>\n            \n    \n            The client then calculates 48 bytes of the MasterSecret\n            from the PreMasterSecret using the following method:\n    \n            <pre class=\"ind1\">seed = \"master secret\" + client_random + server_random\n        a0 = seed\n        a1 = HMAC-SHA256(key=PreMasterSecret, data=a0)\n        a2 = HMAC-SHA256(key=PreMasterSecret, data=a1)\n        p1 = HMAC-SHA256(key=PreMasterSecret, data=a1 + seed)\n        p2 = HMAC-SHA256(key=PreMasterSecret, data=a2 + seed)\n        MasterSecret = p1[all 32 bytes] + p2[first 16 bytes]</pre>\n    \n            Here we demonstrate on the command line:\n            \n        <pre><code>### set up our PreMasterSecret as a hex string\n        $ pmshex=df4a291baa1eb7cfa6934b29b474baad\n        $ pmshex=${{\"{\"}}pmshex{{\"}\"}}2697e29f1f920dcc77c8a0a088447624\n        ### client random from Client Hello\n        $ echo -en '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07' >  /tmp/c_rand\n        $ echo -en '\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f' >> /tmp/c_rand\n        $ echo -en '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17' >> /tmp/c_rand\n        $ echo -en '\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f' >> /tmp/c_rand\n        ### server random from Server Hello\n        $ echo -en '\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77' >  /tmp/s_rand\n        $ echo -en '\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f' >> /tmp/s_rand\n        $ echo -en '\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87' >> /tmp/s_rand\n        $ echo -en '\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f' >> /tmp/s_rand\n        ### build the seed\n        $ echo -en 'master secret' > /tmp/seed\n        $ cat /tmp/c_rand /tmp/s_rand >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a1\n        $ cat /tmp/a1 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a2\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p1\n        $ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p2\n        ### first 48 bytes is MasterSecret\n        $ cat /tmp/p1 /tmp/p2 | head -c 48 > /tmp/mastersecret\n        $ hexdump /tmp/mastersecret\n    \n        0000000 91 6a bf 9d a5 59 73 e1 36 14 ae 0a 3f 5d 3f 37\n        0000010 b0 23 ba 12 9a ee 02 cc 91 34 33 81 27 cd 70 49\n        0000020 78 1c 8e 19 fc 1e b2 a7 38 7a c0 6a e2 37 34 4c\n        </code></pre>\n            \n    \n            This gives us a MasterSecret of:\n        <pre class=\"ind1\"> <p class=\"longboi\">916abf9da55973e13614ae0a3f5d3f37b023ba129aee02cc9134338127cd7049781c8e19fc1eb2a7387ac06ae237344c</p></pre>\n    \n            We then generate the final encryption keys using a key expansion:\n    \n        <pre class=\"ind1\">\n        seed = \"key expansion\" + server_random + client_random\n        a0 = seed\n        a1 = HMAC-SHA256(key=MasterSecret, data=a0)\n        a2 = HMAC-SHA256(key=MasterSecret, data=a1)\n        a3 = HMAC-SHA256(key=MasterSecret, data=a2)\n        a4 = ...\n        p1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\n        p2 = HMAC-SHA256(key=MasterSecret, data=a2 + seed)\n        p3 = HMAC-SHA256(key=MasterSecret, data=a3 + seed)\n        p4 = ...\n        p = p1 + p2 + p3 + p4 ...\n        client write mac key = [first 20 bytes of p]\n        server write mac key = [next 20 bytes of p]\n        client write key = [next 16 bytes of p]\n        server write key = [next 16 bytes of p]\n        client write IV = [next 16 bytes of p]\n        server write IV = [next 16 bytes of p]\n        </pre>\n    \n            We can demonstrate this on the command line:\n            \n        <pre><code>### continued from above command line example\n        ### set up our MasterSecret as a hex string\n        $ mshex=$(hexdump -ve '/1 \"%02x\"' /tmp/mastersecret)\n        ### build the seed\n        $ echo -en 'key expansion' > /tmp/seed\n        $ cat /tmp/s_rand /tmp/c_rand >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\n        $ cat /tmp/a1 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a2\n        $ cat /tmp/a2 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a3\n        $ cat /tmp/a3 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a4\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\n        $ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p2\n        $ cat /tmp/a3 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p3\n        $ cat /tmp/a4 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p4\n        ### combine them into a single stream\n        $ cat /tmp/p1 /tmp/p2 /tmp/p3 /tmp/p4 > /tmp/p\n        $ dd if=/tmp/p of=/tmp/client_mac_key bs=1 skip=0  count=20\n        $ dd if=/tmp/p of=/tmp/server_mac_key bs=1 skip=20 count=20\n        $ dd if=/tmp/p of=/tmp/client_key     bs=1 skip=40 count=16\n        $ dd if=/tmp/p of=/tmp/server_key     bs=1 skip=56 count=16\n        $ dd if=/tmp/p of=/tmp/client_iv      bs=1 skip=72 count=16\n        $ dd if=/tmp/p of=/tmp/server_iv      bs=1 skip=88 count=16\n        $ hexdump /tmp/client_mac_key\n        0000000 1b 7d 11 7c 7d 5f 69 0b c2 63 ca e8 ef 60 af 0f\n        0000010 18 78 ac c2\n    \n        $ hexdump /tmp/server_mac_key\n        0000000 2a d8 bd d8 c6 01 a6 17 12 6f 63 54 0e b2 09 06\n        0000010 f7 81 fa d2\n    \n        $ hexdump /tmp/client_key\n        0000000 f6 56 d0 37 b1 73 ef 3e 11 16 9f 27 23 1a 84 b6\n    \n        $ hexdump /tmp/server_key\n        0000000 75 2a 18 e7 a9 fc b7 cb cd d8 f9 8d d8 f7 69 eb\n    \n        $ hexdump /tmp/client_iv\n        0000000 a0 d2 55 0c 92 38 ee bf ef 5c 32 25 1a bb 67 d6\n    \n        $ hexdump /tmp/server_iv\n        0000000 43 45 28 db 49 37 d5 40 d3 93 13 5e 06 a1 1b b8\n        </code></pre>\n            \n    \n            From this we get the following key data:\n            <ul>\n            <li>client MAC key:  <p class=\"longboi\">1b7d117c7d5f690bc263cae8ef60af0f1878acc2</p>\n            <li>server MAC key:  <p class=\"longboi\">2ad8bdd8c601a617126f63540eb20906f781fad2</p>\n            <li>client write key:  <p class=\"longboi\">f656d037b173ef3e11169f27231a84b6</p>\n            <li>server write key:  <p class=\"longboi\">752a18e7a9fcb7cbcdd8f98dd8f769eb</p>\n            <li>client write IV:  <p class=\"longboi\">a0d2550c9238eebfef5c32251abb67d6</p>\n            <li>server write IV:  <p class=\"longboi\">434528db4937d540d393135e06a11bb8</p>\n            </ul>\n        </div>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Change Cipher Spec</div>\n        <div class=\"rec-explanation\">\n            The client indicates that it has calculated the shared\n            encryption keys and that all following messages from the\n            client will be encrypted with the client write key.\n            <br/><br/>\n            In the next version of TLS this message type has been removed because it can be inferred.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record</span>\n                <span class=\"bytes\">\n        14 03 03 00 01 01\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>14</p> - type is 0x14 (ChangeCipherSpec record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 01</p> - 0x1 (1) bytes of change cipher spec follows\n                    <li> <p>01</p> - the payload of this message is defined as the byte 0x01\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Handshake Finished</div>\n        <div class=\"rec-explanation\">\n            To verify that the handshake was successful and not tampered\n            with, the client calculates verification data and encrypts\n            it with the client write key.\n            <br/><br/>\n            The verification data is built from a hash of all handshake\n            messages and verifies the integrity of the handshake process.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 00 40\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 40</p> - 0x40 (64) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Encryption IV</span>\n                <span class=\"bytes\">\n        40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f\n                </span>\n                <div class=\"explanation\">\n                    The client has sent an initialization vector for decrypting this block.\n                    Because we have overridden the rand function it\n                    is a predictable sequence.\n                </div>\n            </span>\n    \n            <span class=\"string encrypted\">\n                <span class=\"label\">Encrypted Data</span>\n                <span class=\"bytes\">\n        22 7b c9 ba 81 ef 30 f2 a8 a7 8f f1 df 50 84 4d 58 04 b7 ee b2 e2 14 c3 2b 68 92 ac a3 db 7b 78\n        07 7f dd 90 06 7c 51 6b ac b3 ba 90 de df 72 0f\n                </span>\n                <div class=\"explanation\">\n                    This data is encrypted with the client write\n                    key.  Because it contains a message\n                    authentication code (MAC) and padding it\n                    is larger than the decrypted data.\n                    <br/><br/>\n                    See below for the decrypted data.\n                </div>\n            </span>\n    \n            <div class=\"decryption\">\n                <div class=\"label\">Decryption</div>\n                <div class=\"explanation\">\n                    This data can be decrypted using the encryption\n                    IV and the client write key that was generated\n                    in the step \"Client Encryption Keys\n                    Calculation\".\n                    \n        <pre><code>### client key\n        $ hexkey=f656d037b173ef3e11169f27231a84b6\n        ### IV for this record\n        $ hexiv=404142434445464748494a4b4c4d4e4f\n        ### encrypted data\n        $ echo '22 7b c9 ba 81 ef 30 f2 a8 a7 8f f1 df 50 84 4d'  > /tmp/msg1\n        $ echo '58 04 b7 ee b2 e2 14 c3 2b 68 92 ac a3 db 7b 78' >> /tmp/msg1\n        $ echo '07 7f dd 90 06 7c 51 6b ac b3 ba 90 de df 72 0f' >> /tmp/msg1\n        $ xxd -r -p /tmp/msg1 \\\n        | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n    \n        0000000 14 00 00 0c cf 91 96 26 f1 36 0c 53 6a aa d7 3a\n        0000010 a5 a0 3d 23 30 56 e4 ac 6e ba 7f d9 e5 31 7f ac\n        0000020 2d b5 b7 0e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b\n    \n        The last 32 bytes contain a 20-byte MAC and padding to bring the data to a\n        multiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n    \n        ### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n        $ sequence='0000000000000000'\n        $ rechdr='16 03 03'\n        $ datalen='00 10'\n        $ data='14 00 00 0c cf 91 96 26 f1 36 0c 53 6a aa d7 3a'\n        ### from \"Encryption Keys Calculation\"\n        $ mackey=1b7d117c7d5f690bc263cae8ef60af0f1878acc2\n        $ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n        | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n    \n        a5a03d233056e4ac6eba7fd9e5317fac2db5b70e\n        </code></pre>\n                    \n                </div>\n            </div>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        14 00 00 0c\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>14</p> - handshake message type 0x14 (finished)\n                    <li> <p>00 00 0c</p> - 0xC (12) bytes of handshake finished follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Verify Data</span>\n                <span class=\"bytes\">\n        cf 91 96 26 f1 36 0c 53 6a aa d7 3a\n                </span>\n                <div class=\"explanation\">\n                    The verify_data is built from the master secret and the\n                    hash of the payload of all handshake records (type=0x16) previous to this one.\n                    <br/><br/>\n                    The SHA256 of all handshake messages before this one\n                    is  <p class=\"longboi\">061dda04b3c2217ff73bd79b9cf88a2bb6ec505404aac8722db03ef417b54cb4</p>.\n                    <br/><br/>\n                    The calculation for verify_data is as follows:\n        <pre class=\"ind1\">\n        seed = \"client finished\" + SHA256(all handshake messages)\n        a0 = seed\n        a1 = HMAC-SHA256(key=MasterSecret, data=a0)\n        p1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\n        verify_data = p1[first 12 bytes]\n        </pre>\n                    The verify data calculated from this hash is  <p class=\"longboi\">cf919626f1360c536aaad73a</p>.\n                    We can show this on the command line:\n                    \n        <pre><code>### set up our MasterSecret as a hex string\n        $ mshex=$(hexdump -ve '/1 \"%02x\"' /tmp/mastersecret)\n        ### build the seed\n        $ echo -en 'client finished' > /tmp/seed\n        ### add SHA256(all_messages) to seed\n        $ echo -en '\\x06\\x1d\\xda\\x04\\xb3\\xc2\\x21\\x7f' >> /tmp/seed\n        $ echo -en '\\xf7\\x3b\\xd7\\x9b\\x9c\\xf8\\x8a\\x2b' >> /tmp/seed\n        $ echo -en '\\xb6\\xec\\x50\\x54\\x04\\xaa\\xc8\\x72' >> /tmp/seed\n        $ echo -en '\\x2d\\xb0\\x3e\\xf4\\x17\\xb5\\x4c\\xb4' >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\n        $ head -c 12 /tmp/p1 > /tmp/verify_data\n        $ hexdump /tmp/verify_data\n    \n        0000000 cf 91 96 26 f1 36 0c 53 6a aa d7 3a\n        </code></pre>\n                    \n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"calculation server\">\n        <div class=\"rec-label\">Server Encryption Keys Calculation</div>\n        <img class=\"illustration\" src=\"./assets/images/key9.png\" width=\"97\" height=\"250\"/>\n        <div class=\"rec-explanation\">\n            The server now has the information to calculate the encryption\n            keys that will be used by each side.  It uses the following\n            information in this calculation:\n            <ul>\n            <li>server random (from Server Hello)\n            <li>client random (from Client Hello)\n            <li>client public key (from Client Key Exchange)\n            <li>server private key (from Server Key Generation)\n            </ul>\n            The server multiplies the client's public key with the\n            server's private key using the curve25519() algorithm.  The\n            32-byte result is called the PreMasterSecret, and is found\n            to be:\n            <pre class=\"ind2\"> <p class=\"longboi\">df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624</p></pre>\n    \n            I've provided <a href=\"files/curve25519-mult.c\">a tool</a> to perform this calculation:\n            \n        <pre><code>$ gcc -o curve25519-mult curve25519-mult.c\n        $ ./curve25519-mult server-ephemeral-private.key \\\n                            client-ephemeral-public.key | hexdump\n    \n        0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad\n        0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24\n        </code></pre>\n            \n            This is identical to the PreMasterSecret found by the client,\n            therefore the following calculations will be identical.\n            <br/><br/>\n            The server then calculates 48 bytes of the MasterSecret\n            from the PreMasterSecret using the following method:\n    \n            <pre class=\"ind1\">seed = \"master secret\" + client_random + server_random\n        a0 = seed\n        a1 = HMAC-SHA256(key=PreMasterSecret, data=a0)\n        a2 = HMAC-SHA256(key=PreMasterSecret, data=a1)\n        p1 = HMAC-SHA256(key=PreMasterSecret, data=a1 + seed)\n        p2 = HMAC-SHA256(key=PreMasterSecret, data=a2 + seed)\n        MasterSecret = p1[all 32 bytes] + p2[first 16 bytes]</pre>\n    \n            Here we demonstrate on the command line:\n            \n        <pre><code>### set up our PreMasterSecret as a hex string\n        $ pmshex=df4a291baa1eb7cfa6934b29b474baad\n        $ pmshex=${{\"{\"}}pmshex{{\"}\"}}2697e29f1f920dcc77c8a0a088447624\n        ### client random from Client Hello\n        $ echo -en '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07' >  /tmp/c_rand\n        $ echo -en '\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f' >> /tmp/c_rand\n        $ echo -en '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17' >> /tmp/c_rand\n        $ echo -en '\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f' >> /tmp/c_rand\n        ### server random from Server Hello\n        $ echo -en '\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77' >  /tmp/s_rand\n        $ echo -en '\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f' >> /tmp/s_rand\n        $ echo -en '\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87' >> /tmp/s_rand\n        $ echo -en '\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f' >> /tmp/s_rand\n        ### build the seed\n        $ echo -en 'master secret' > /tmp/seed\n        $ cat /tmp/c_rand /tmp/s_rand >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a1\n        $ cat /tmp/a1 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a2\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p1\n        $ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p2\n        ### first 48 bytes is MasterSecret\n        $ cat /tmp/p1 /tmp/p2 | head -c 48 > /tmp/mastersecret\n        $ hexdump /tmp/mastersecret\n    \n        0000000 91 6a bf 9d a5 59 73 e1 36 14 ae 0a 3f 5d 3f 37\n        0000010 b0 23 ba 12 9a ee 02 cc 91 34 33 81 27 cd 70 49\n        0000020 78 1c 8e 19 fc 1e b2 a7 38 7a c0 6a e2 37 34 4c\n        </code></pre>\n            \n    \n            This gives us a MasterSecret of:\n        <pre class=\"ind1\"> <p class=\"longboi\">916abf9da55973e13614ae0a3f5d3f37b023ba129aee02cc9134338127cd7049781c8e19fc1eb2a7387ac06ae237344c</p></pre>\n    \n            We then generate the final encryption keys using a key expansion:\n    \n        <pre class=\"ind1\">\n        seed = \"key expansion\" + server_random + client_random\n        a0 = seed\n        a1 = HMAC-SHA256(key=MasterSecret, data=a0)\n        a2 = HMAC-SHA256(key=MasterSecret, data=a1)\n        a3 = HMAC-SHA256(key=MasterSecret, data=a2)\n        a4 = ...\n        p1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\n        p2 = HMAC-SHA256(key=MasterSecret, data=a2 + seed)\n        p3 = HMAC-SHA256(key=MasterSecret, data=a3 + seed)\n        p4 = ...\n        p = p1 + p2 + p3 + p4 ...\n        client write mac key = [first 20 bytes of p]\n        server write mac key = [next 20 bytes of p]\n        client write key = [next 16 bytes of p]\n        server write key = [next 16 bytes of p]\n        client write IV = [next 16 bytes of p]\n        server write IV = [next 16 bytes of p]\n        </pre>\n    \n            We can demonstrate this on the command line:\n            \n        <pre><code>### continued from above command line example\n        ### set up our MasterSecret as a hex string\n        $ mshex=$(hexdump -ve '/1 \"%02x\"' /tmp/mastersecret)\n        ### build the seed\n        $ echo -en 'key expansion' > /tmp/seed\n        $ cat /tmp/s_rand /tmp/c_rand >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\n        $ cat /tmp/a1 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a2\n        $ cat /tmp/a2 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a3\n        $ cat /tmp/a3 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a4\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\n        $ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p2\n        $ cat /tmp/a3 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p3\n        $ cat /tmp/a4 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p4\n        $ cat /tmp/p1 /tmp/p2 /tmp/p3 /tmp/p4 > /tmp/p\n        $ dd if=/tmp/p of=/tmp/client_mac_key bs=1 skip=0  count=20\n        $ dd if=/tmp/p of=/tmp/server_mac_key bs=1 skip=20 count=20\n        $ dd if=/tmp/p of=/tmp/client_key     bs=1 skip=40 count=16\n        $ dd if=/tmp/p of=/tmp/server_key     bs=1 skip=56 count=16\n        $ dd if=/tmp/p of=/tmp/client_iv      bs=1 skip=72 count=16\n        $ dd if=/tmp/p of=/tmp/server_iv      bs=1 skip=88 count=16\n        $ hexdump /tmp/client_mac_key\n        0000000 1b 7d 11 7c 7d 5f 69 0b c2 63 ca e8 ef 60 af 0f\n        0000010 18 78 ac c2\n    \n        $ hexdump /tmp/server_mac_key\n        0000000 2a d8 bd d8 c6 01 a6 17 12 6f 63 54 0e b2 09 06\n        0000010 f7 81 fa d2\n    \n        $ hexdump /tmp/client_key\n        0000000 f6 56 d0 37 b1 73 ef 3e 11 16 9f 27 23 1a 84 b6\n    \n        $ hexdump /tmp/server_key\n        0000000 75 2a 18 e7 a9 fc b7 cb cd d8 f9 8d d8 f7 69 eb\n    \n        $ hexdump /tmp/client_iv\n        0000000 a0 d2 55 0c 92 38 ee bf ef 5c 32 25 1a bb 67 d6\n    \n        $ hexdump /tmp/server_iv\n        0000000 43 45 28 db 49 37 d5 40 d3 93 13 5e 06 a1 1b b8\n        </code></pre>\n            \n    \n            From this we get the following key data:\n            <ul>\n            <li>client MAC key:  <p class=\"longboi\">1b7d117c7d5f690bc263cae8ef60af0f1878acc2</p>\n            <li>server MAC key:  <p class=\"longboi\">2ad8bdd8c601a617126f63540eb20906f781fad2</p>\n            <li>client write key:  <p class=\"longboi\">f656d037b173ef3e11169f27231a84b6</p>\n            <li>server write key:  <p class=\"longboi\">752a18e7a9fcb7cbcdd8f98dd8f769eb</p>\n            <li>client write IV:  <p class=\"longboi\">a0d2550c9238eebfef5c32251abb67d6</p>\n            <li>server write IV:  <p class=\"longboi\">434528db4937d540d393135e06a11bb8</p>\n            </ul>\n        </div>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Change Cipher Spec</div>\n        <div class=\"rec-explanation\">\n            The server indicates that it has calculated the shared\n            encryption keys and that all following messages from the\n            server will be encrypted with the server write key.\n            <br/><br/>\n            In the next version of TLS this message type has been removed because it can be inferred.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record</span>\n                <span class=\"bytes\">\n        14 03 03 00 01 01\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>14</p> - type is 0x14 (ChangeCipherSpec record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 01</p> - 0x1 (1) bytes of change cipher spec follows\n                    <li> <p>01</p> - the payload of this message is defined as the byte 0x01\n                    </ul>\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Handshake Finished</div>\n        <div class=\"rec-explanation\">\n            To verify that the handshake was successful and not tampered\n            with, the server calculates verification data and encrypts\n            it with the server write key.\n            <br/><br/>\n            The verification data is built from a hash of all handshake\n            messages and verifies the integrity of the handshake process.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        16 03 03 00 40\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>16</p> - type is 0x16 (handshake record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 40</p> - 0x40 (64) bytes of handshake message follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Encryption IV</span>\n                <span class=\"bytes\">\n        51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60\n                </span>\n                <div class=\"explanation\">\n                    The server has sent an initialization vector for decrypting this block.\n                    Because we have overridden the rand function it\n                    is a predictable sequence.\n                </div>\n            </span>\n    \n            <span class=\"string encrypted\">\n                <span class=\"label\">Encrypted Data</span>\n                <span class=\"bytes\">\n        18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b\n        da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d\n                </span>\n                <div class=\"explanation\">\n                    This data is encrypted with the server write\n                    key.  Because it contains a message\n                    authentication code (MAC) and padding it\n                    is larger than the decrypted data.\n                    <br/><br/>\n                    See below for the decrypted data.\n                </div>\n            </span>\n    \n            <div class=\"decryption\">\n                <div class=\"label\">Decryption</div>\n                <div class=\"explanation\">\n                    This data can be decrypted using the encryption\n                    IV and the server write key that was generated\n                    in the step \"Server Encryption Keys\n                    Calculation\".\n                    \n        <pre><code>### server key\n        $ hexkey=752a18e7a9fcb7cbcdd8f98dd8f769eb\n        ### IV for this record\n        $ hexiv=5152535455565758595a5b5c5d5e5f60\n        ### encrypted data\n        $ echo '18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a'  > /tmp/msg1\n        $ echo 'ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b' >> /tmp/msg1\n        $ echo 'da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d' >> /tmp/msg1\n        $ xxd -r -p /tmp/msg1 \\\n        | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n    \n        0000000 14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\n        0000010 20 c4 97 46 d2 a3 0f 23 57 39 90 58 07 53 52 43\n        0000020 af f2 bf e0 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b\n    \n        The last 32 bytes contain a 20-byte MAC and padding to bring the data to a\n        multiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n    \n        ### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n        $ sequence='0000000000000000'\n        $ rechdr='16 03 03'\n        $ datalen='00 10'\n        $ data='14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e'\n        ### from \"Encryption Keys Calculation\"\n        $ mackey=2ad8bdd8c601a617126f63540eb20906f781fad2\n        $ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n        | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n    \n        20c49746d2a30f235739905807535243aff2bfe0\n        </code></pre>\n                    \n                </div>\n            </div>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Handshake Header</span>\n                <span class=\"bytes\">\n        14 00 00 0c\n                </span>\n                <div class=\"explanation\">\n                    Each handshake message starts with a type and a length.\n                    <ul>\n                    <li> <p>14</p> - handshake message type 0x14 (finished)\n                    <li> <p>00 00 0c</p> - 0xC (12) bytes of handshake finished follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Verify Data</span>\n                <span class=\"bytes\">\n        84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\n                </span>\n                <div class=\"explanation\">\n                    The verify_data is built from the master secret and the\n                    hash of the payload of all handshake records (type=0x16) previous to this one.\n                    <br/><br/>\n                    The SHA256 of all handshake messages before this one\n                    is  <p class=\"longboi\">b2017ba28d0e27f03ae327456b6ff00b4d5bbf0ef7cda83ce1029b521c3e7c35</p>.\n                    <br/><br/>\n                    The calculation for verify_data is as follows:\n        <pre class=\"ind1\">\n        seed = \"server finished\" + SHA256(all handshake messages)\n        a0 = seed\n        a1 = HMAC-SHA256(key=MasterSecret, data=a0)\n        p1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\n        verify_data = p1[first 12 bytes]\n        </pre>\n                    The verify data calculated from this hash is  <p class=\"longboi\">844d3c10746dd722f92f0c7e</p>.\n                    We can show this on the command line:\n                    \n                    <pre><code>### set up our MasterSecret as a hex string\n        $ mshex=$(hexdump -ve '/1 \"%02x\"' /tmp/mastersecret)\n        ### build the seed\n        $ echo -en 'server finished' > /tmp/seed\n        ### add SHA256(all_messages) to seed\n        $ echo -en '\\xb2\\x01\\x7b\\xa2\\x8d\\x0e\\x27\\xf0' >> /tmp/seed\n        $ echo -en '\\x3a\\xe3\\x27\\x45\\x6b\\x6f\\xf0\\x0b' >> /tmp/seed\n        $ echo -en '\\x4d\\x5b\\xbf\\x0e\\xf7\\xcd\\xa8\\x3c' >> /tmp/seed\n        $ echo -en '\\xe1\\x02\\x9b\\x52\\x1c\\x3e\\x7c\\x35' >> /tmp/seed\n        ### a0 is the same as the seed\n        $ cat /tmp/seed > /tmp/a0\n        ### a(n) is hmac-sha256(key=secret, data=a(n-1))\n        $ cat /tmp/a0 | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\n        ### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n        $ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n        -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\n        $ head -c 12 /tmp/p1 > /tmp/verify_data\n        $ hexdump /tmp/verify_data\n    \n        0000000 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\n        </code></pre>\n                    \n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Application Data</div>\n        <div class=\"rec-explanation\">\n            The client sends the data \"ping\".\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        17 03 03 00 30\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>17</p> - type is 0x17 (application data)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 30</p> - 0x30 (48) bytes of application data follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Encryption IV</span>\n                <span class=\"bytes\">\n        00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n                </span>\n                <div class=\"explanation\">\n                    The client has sent an initialization vector for decrypting this block.\n                    Because we have overridden the rand function it\n                    is a predictable sequence.\n                </div>\n            </span>\n    \n            <span class=\"string encrypted\">\n                <span class=\"label\">Encrypted Data</span>\n                <span class=\"bytes\">\n        6c 42 1c 71 c4 2b 18 3b fa 06 19 5d 13 3d 0a 09 d0 0f c7 cb 4e 0f 5d 1c da 59 d1 47 ec 79 0c 99\n                </span>\n                <div class=\"explanation\">\n                    This data is encrypted with the client write\n                    key.  Because it contains a message\n                    authentication code (MAC) and padding it\n                    is larger than the decrypted data.\n                    <br/><br/>\n                    See below for the decrypted data.\n                </div>\n            </span>\n    \n            <div class=\"decryption\">\n                <div class=\"label\">Decryption</div>\n                <div class=\"explanation\">\n                    This data can be decrypted using the encryption\n                    IV and the client write key that was generated\n                    in the step \"Client Encryption Keys\n                    Calculation\".\n                    \n        <pre><code>### client key\n        $ hexkey=f656d037b173ef3e11169f27231a84b6\n        ### IV for this record\n        $ hexiv=000102030405060708090a0b0c0d0e0f\n        ### encrypted data\n        $ echo '6c 42 1c 71 c4 2b 18 3b fa 06 19 5d 13 3d 0a 09'  > /tmp/msg1\n        $ echo 'd0 0f c7 cb 4e 0f 5d 1c da 59 d1 47 ec 79 0c 99' >> /tmp/msg1\n        $ xxd -r -p /tmp/msg1 \\\n        | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n    \n        0000000 70 69 6e 67 60 10 12 49 f7 4a 03 77 c9 ca cf 63\n        0000010 09 75 13 70 d8 0c fc aa 07 07 07 07 07 07 07 07\n    \n        The last 28 bytes contain a 20-byte MAC and padding to bring the data to a\n        multiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n    \n        ### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n        $ sequence='0000000000000001'\n        $ rechdr='17 03 03'\n        $ datalen='00 04'\n        $ data='70 69 6e 67'\n        ### from \"Encryption Keys Calculation\"\n        $ mackey=1b7d117c7d5f690bc263cae8ef60af0f1878acc2\n        $ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n        | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n    \n        60101249f74a0377c9cacf6309751370d80cfcaa\n        </code></pre>\n                    \n                </div>\n            </div>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Application Data</span>\n                <span class=\"bytes\">\n        70 69 6e 67\n                </span>\n                <div class=\"explanation\">\n                    The bytes \"ping\".\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record server\">\n        <div class=\"rec-label\">Server Application Data</div>\n        <div class=\"rec-explanation\">\n            The server replies with the data \"pong\".\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        17 03 03 00 30\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>17</p> - type is 0x17 (application data)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 30</p> - 0x30 (48) bytes of application data follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Encryption IV</span>\n                <span class=\"bytes\">\n        61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70\n                </span>\n                <div class=\"explanation\">\n                    The server has sent an initialization vector for decrypting this block.\n                    Because we have overridden the rand function it\n                    is a predictable sequence.\n                </div>\n            </span>\n    \n            <span class=\"string encrypted\">\n                <span class=\"label\">Encrypted Data</span>\n                <span class=\"bytes\">\n        97 83 48 8a f5 fa 20 bf 7a 2e f6 9d eb b5 34 db 9f b0 7a 8c 27 21 de e5 40 9f 77 af 0c 3d de 56\n                </span>\n                <div class=\"explanation\">\n                    This data is encrypted with the server write\n                    key.  Because it contains a message\n                    authentication code (MAC) and padding it\n                    is larger than the decrypted data.\n                    <br/><br/>\n                    See below for the decrypted data.\n                </div>\n            </span>\n    \n            <div class=\"decryption\">\n                <div class=\"label\">Decryption</div>\n                <div class=\"explanation\">\n                    This data can be decrypted using the encryption\n                    IV and the server write key that was generated\n                    in the step \"Server Encryption Keys\n                    Calculation\".\n                    \n        <pre><code>### server key\n        $ hexkey=752a18e7a9fcb7cbcdd8f98dd8f769eb\n        ### IV for this record\n        $ hexiv=6162636465666768696a6b6c6d6e6f70\n        ### encrypted data\n        $ echo '97 83 48 8a f5 fa 20 bf 7a 2e f6 9d eb b5 34 db'  > /tmp/msg1\n        $ echo '9f b0 7a 8c 27 21 de e5 40 9f 77 af 0c 3d de 56' >> /tmp/msg1\n        $ xxd -r -p /tmp/msg1 \\\n        | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n    \n        0000000 70 6f 6e 67 5a c7 99 dc cf dc 0f af 95 2b dc 91\n        0000010 18 af 20 0e e3 1c 51 05 07 07 07 07 07 07 07 07\n    \n        The last 28 bytes contain a 20-byte MAC and padding to bring the data to a\n        multiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n    \n        ### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n        $ sequence='0000000000000001'\n        $ rechdr='17 03 03'\n        $ datalen='00 04'\n        $ data='70 6f 6e 67'\n        ### from \"Encryption Keys Calculation\"\n        $ mackey=2ad8bdd8c601a617126f63540eb20906f781fad2\n        $ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n        | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n    \n        5ac799dccfdc0faf952bdc9118af200ee31c5105\n        </code></pre>\n                    \n                </div>\n            </div>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Application Data</span>\n                <span class=\"bytes\">\n        70 6f 6e 67\n                </span>\n                <div class=\"explanation\">\n                    The bytes \"pong\".\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>\n    \n        <div class=\"rec-outer\">\n        <div class=\"record client\">\n        <div class=\"rec-label\">Client Close Notify</div>\n        <div class=\"rec-explanation\">\n            The client sends an alert that it is closing the connection.\n        </div>\n        <span class=\"record-data\">\n            <span class=\"string\">\n                <span class=\"label\">Record Header</span>\n                <span class=\"bytes\">\n        15 03 03 00 30\n                </span>\n                <div class=\"explanation\">\n                    TLS sessions are broken into the sending\n                    and receiving of \"records\", which are blocks\n                    of data with a type, a protocol version,\n                    and a length.\n                    <ul>\n                    <li> <p>15</p> - type is 0x15 (alert record)\n                    <li> <p>03 03</p> - protocol version is \"3,3\" (TLS 1.2)\n                    <li> <p>00 30</p> - 0x30 (48) bytes of alert data follows\n                    </ul>\n                </div>\n            </span>\n    \n            <span class=\"string\">\n                <span class=\"label\">Encryption IV</span>\n                <span class=\"bytes\">\n        10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n                </span>\n                <div class=\"explanation\">\n                    The client has sent an initialization vector for decrypting this block.\n                    Because we have overridden the rand function it\n                    is a predictable sequence.\n                </div>\n            </span>\n    \n            <span class=\"string encrypted\">\n                <span class=\"label\">Encrypted Data</span>\n                <span class=\"bytes\">\n        0d 83 f9 79 04 75 0d d8 fd 8a a1 30 21 86 32 63 4f d0 65 e4 62 83 79 b8 8b bf 9e fd 12 87 a6 2d\n                </span>\n                <div class=\"explanation\">\n                    This data is encrypted with the client write\n                    key.  Because it contains a message\n                    authentication code (MAC) and padding it\n                    is larger than the decrypted data.\n                    <br/><br/>\n                    See below for the decrypted data.\n                </div>\n            </span>\n    \n            <div class=\"decryption\">\n                <div class=\"label\">Decryption</div>\n                <div class=\"explanation\">\n                    This data can be decrypted using the encryption\n                    IV and the client write key that was generated\n                    in the step \"Client Encryption Keys\n                    Calculation\".\n                    \n        <pre><code>### client key\n        $ hexkey=f656d037b173ef3e11169f27231a84b6\n        ### IV for this record\n        $ hexiv=101112131415161718191a1b1c1d1e1f\n        ### encrypted data\n        $ echo '0d 83 f9 79 04 75 0d d8 fd 8a a1 30 21 86 32 63'  > /tmp/msg1\n        $ echo '4f d0 65 e4 62 83 79 b8 8b bf 9e fd 12 87 a6 2d' >> /tmp/msg1\n        $ xxd -r -p /tmp/msg1 \\\n        | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n    \n        0000000 01 00 92 79 9c ba 81 9f 31 07 44 c5 59 62 2b e4\n        0000010 2b ce 3d 6a 41 fb 09 09 09 09 09 09 09 09 09 09\n    \n        The last 30 bytes contain a 20-byte MAC and padding to bring the data to a\n        multiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n    \n        ### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n        $ sequence='0000000000000002'\n        $ rechdr='15 03 03'\n        $ datalen='00 02'\n        $ data='01 00'\n        ### from \"Encryption Keys Calculation\"\n        $ mackey=1b7d117c7d5f690bc263cae8ef60af0f1878acc2\n        $ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n        | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n    \n        92799cba819f310744c559622be42bce3d6a41fb\n        </code></pre>\n                    \n                </div>\n            </div>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Alert Level</span>\n                <span class=\"bytes\">\n        01\n                </span>\n                <div class=\"explanation\">\n                    <ul>\n                    <li> <p>01</p> - assigned value for \"Warning\"\n                    </ul>\n                    A \"Warning\" alert is informational.\n                </div>\n            </span>\n    \n            <span class=\"string decrypted\">\n                <span class=\"label\">Alert Type</span>\n                <span class=\"bytes\">\n        00\n                </span>\n                <div class=\"explanation\">\n                    <ul>\n                    <li> <p>00</p> - assigned value for \"Close Notify\"\n                    </ul>\n                    This message notifies the recipient that\n                    the sender will not send any more messages on this connection.\n                </div>\n            </span>\n        </span>\n        </div>\n        </div>    \n    </div>\n\n\n\n    <div id=\"templates\" style=\"display: none\">\n        <div id=\"closeBtnTmpl\">\n            <span class=\"close\" onclick=\"ill.unselectAllStrings()\">×</span>\n        </div>\n        <div id=\"showCodeTmpl\">\n            <button class=\"show-code\" onclick=\"ill.showCode(this, event)\">Show Code</button>\n        </div>\n        <button id=\"annotateTmpl\" class=\"annotate-toggle\"\n            onclick=\"ill.toggleAnnotate(this.parentElement, event)\">Annotations</button>\n    </div>\n    <a class=\"print-mode\" href=\"#print\" onclick=\"this.ill.printMode()\">\n        [print]\n    </a>\n\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport * as bigInt from 'big-integer';\n\n@Component({\n  selector: 'app-rsa',\n  templateUrl: './rsa.component.html',\n  styleUrls: ['./rsa.component.css']\n})\nexport class RsaComponent implements OnInit{\n  p: number = 3;\n  q: number = 7;\n  message: string = 'hello';\n  result: string = '';\n  memory: any[] = []\n\n  ngOnInit(){\n    this.generateKeys()\n  }\n\n  // Public key\n  e: bigInt.BigInteger = bigInt(0);\n  n: bigInt.BigInteger = bigInt(0);\n\n  // Private key\n  d: bigInt.BigInteger = bigInt(0);\n\n  // Generate keys\n  generateKeys() {\n    const p = bigInt(this.p);\n    const q = bigInt(this.q);\n    const phi = p.subtract(1).multiply(q.subtract(1)); // Euler's totient function\n    this.n = p.multiply(q); // Compute modulus\n    this.e = bigInt(this.choose(parseInt(phi.toString()))); // Choose public exponent\n    this.d = this.modeinv(this.e, phi); // Compute modular multiplicative inverse of e mod phi\n    console.log(phi.toString())\n    console.log(this.n.toString());\n    console.log(this.e.toString());\n    console.log(this.d.toString());\n  }\n\n  modeinv(e: any, phi: any){\n    let temp = e.modInv(phi)\n    let res = bigInt(0)\n    if(temp.toString() == e.toString()){\n      res = temp.add(phi)\n    }\n    return res\n  }\n\n  choose(phi: number){\n    for(let i = 2; i < phi ; i++){\n      if(this.gcd(i,phi) == 1){\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  gcd(a: number, b: number): number {\n    if (b === 0) {\n      return a;\n    }\n    return this.gcd(b, a % b);\n  }\n\n  // Encrypt message\n  encrypt() {\n    this.memory = []\n    let result = '';\n    for (let i = 0; i < this.message.length; i++) {\n      const m = bigInt(this.message.charCodeAt(i)-32); // Convert character to integer (subtract 32 to limit the range of characters)\n      console.log(m)\n      const c = m.modPow(this.e, this.n); // Encrypt character using public key\n      let mint = m.toJSNumber()\n      let nint = this.n.toJSNumber()\n      this.memory.push(Math.floor(mint/nint))\n      result += c.toString() + ' '; // Add encrypted character to result (separated by space)\n    }\n    this.result = result.trim(); // Trim the last space\n  }\n\n  // Decrypt message\n  decrypt() {\n    const ciphertextArray = this.result.trim().split(' ');\n    console.log(this.memory)\n    // Get array of ciphertext integers from input\n    let message = '';\n    for (let i = 0; i < ciphertextArray.length; i++) {\n      const c = bigInt(ciphertextArray[i]); // Get ciphertext integer\n      let m = c.modPow(this.d, this.n)\n      let temp = m.toJSNumber()\n      for(let j = 1; j <= this.memory[i]; j++){\n        temp += this.n.toJSNumber()\n      }\n      m = bigInt(temp)\n      console.log(m)\n      console.log(m.toJSNumber())\n      message += String.fromCharCode(m.toJSNumber()+32); // Convert decrypted integer to character (add 32 to undo the subtraction in encryption)\n    }\n    this.result = message.trim(); // Trim the decrypted message\n  }\n}\n","<img src=\"./assets/images/RSA.gif\" alt=\"\">\n\n<div>\n  <label for=\"p\">Enter prime number p: </label>\n  <input id=\"p\" [(ngModel)]=\"p\" /><br />\n  <label for=\"q\">Enter prime number q: </label>\n  <input id=\"q\" [(ngModel)]=\"q\" /><br />\n  <label for=\"message\">Enter message to encrypt: </label>\n  <input id=\"message\" [(ngModel)]=\"message\" /><br />\n  <button (click)=\"generateKeys()\">Generate Keys</button>\n  <div class=\"keypair\">\n    (Public Key) e = {{e}}\n    <br>\n    (Public Key) n = {{n}}\n    <br>\n    (Private Key) d = {{d}}\n  </div>\n  <button (click)=\"encrypt()\">Encrypt</button>\n  <button (click)=\"decrypt()\">Decrypt</button>\n\n  <div *ngIf=\"result\">\n    <p>Result: {{ result }}</p>\n  </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent {\n\n}\n","<div class=\"container\">\n    <h1>404: Page Not Found!</h1>\n    <p>The page you are looking for cannot be found or you do not have access to this page</p>\n</div>\n","import { Component, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent {\n  @HostBinding('class.sticky-footer') isSticky = false;\n\n  constructor() {\n    window.onscroll = () => {\n      this.isSticky = window.pageYOffset > 0;\n    };\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  showFooter = false;\n\n  @HostListener('window:scroll', ['$event'])\n  onWindowScroll() {\n    if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight+ 5) {\n      this.showFooter = true;\n    } else {\n      this.showFooter = false;\n    }\n  }\n}\n","<div class=\"container\" >\n\n    <div class=\"intro\">\n        <div class=\"header\">\n            <h3>Welcome to DePauw's Coding Playground!</h3>\n            \n        </div>\n        <div class=\"gif\">\n            <img src=\"./assets/aoma/aoma5.gif\" alt=\"sqlgif.gif\" width=\"600px\">\n        </div>\n    </div>\n    <p>Computer Science is for everyone<p>\n    \n    <div class=\"section\">\n        <div class=\"codegif\">\n            <img src=\"./assets/aoma/aoma3.gif\" alt=\"codegif\">\n        </div>\n        <div class=\"describe\">\n            <p> Computer science emphasizes problem-solving through software and hardware across different sectors. DePauw CS alumni find opportunities in various industries and higher education. This webpage provides data structure study resources with visuals for DePauw CS courses and comprehensive information about all CSC courses at DePauw University, covering a wide range of CS concepts.\n            </p> \n        </div>\n        \n    </div>\n\n    <div class=\"header2\">\n        <h1>Who Can Use DePauw's Playground?</h1>\n    </div>\n\n    <div class=\"user\">\n        <div class=\"u1\">\n            <div class=\"userimg\">\n                <img src=\"./assets/images/vsl.png\" alt=\"coderimg\">\n            </div>\n\n            <div class=\"role\">\n                Visualized Learning\n            </div>\n            <div class=\"describe\">\n                This website offers visualizations of various data structures used in Computer Science, providing students with a more intuitive understanding of complex concepts. \n            </div>\n        </div>\n\n        <div class=\"u1\">\n            <div class=\"userimg\">\n                <img src=\"./assets/images/apl.png\" alt=\"analystsimg\">\n            </div>\n\n            <div class=\"role\">\n                Applied Learning\n            </div>\n            <div class=\"describe\">\n                This website also offers coding practice problems transform theoretical concepts into practical skills, allowing students to actively engage with the subject matter and deepen their understanding.\n            </div>\n        </div>\n    </div>\n    \n    \n  </div>\n  \n  \n<app-footer>\n    <div class=\"footer-container\">\n        <div class=\"footer-left\">\n        <p>Copyright © 2023 DePauw University Computer Science Department</p>\n\n            <li><a href=\"#\">About Us</a></li>\n            <li><a href=\"#\">Contact Us</a></li>\n            <li><a href=\"#\">Privacy Policy</a></li>\n            <li><a href=\"#\">Terms of Service</a></li>\n        </div>\n    </div>\n</app-footer>","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["CoursesService","constructor","id","name","author","credit","code","image","description","getAllCourses","courseList","Promise","resolve","reject","setTimeout","courses","factory","providedIn","RouterModule","ContactComponent","CoursesComponent","Csc121Component","Csc122Component","Csc231Component","Csc232Component","Csc233Component","Csc240Component","Csc340Component","ErrorComponent","HomeComponent","CareerComponent","appRoute","path","redirectTo","pathMatch","component","children","AppRoutingModule","forRoot","enableTracing","imports","exports","AppComponent","login","logout","selectors","decls","vars","consts","template","i0","ctx","BrowserModule","FooterComponent","FormsModule","LinkedListComponent","BubbleSortComponent","BrowserAnimationsModule","InsertionSortComponent","SelectionSortComponent","HashmapComponent","RsaComponent","EccComponent","CaesarCipherComponent","ForloopComponent","DuplicateComponent","MissingComponent","WindowRefService","IllustratedComponent","AppModule","bootstrap","declarations","title","link","imageUrl","coursesService","route","ngOnInit","then","data","animate","state","style","transition","trigger","generateArray","console","log","items","i","push","value","Math","floor","random","color","x","width","bubbleSort","stopSor","length","j","temp","stopSort","checkInput","input1","input2","input3","checkres","practiceCode","clickpractice","backgroundColor","arrayelement","printArray","params","results","ele","stringele","toString","array","document","getElementById","createArray","onClose","onCreateArray","readInput","elements","split","newarray","elefloat","parseFloat","close","onPop","onPush","onModify","onLoop","clickpractice1","clickpractice2","clickpractice3","currentIndex","currentNum","nextNum","currSum","submitNewArray","arrayLength","addNewValue","newVal","submitPush","newval","popLastValue","pop","modifyValue","currVal","needmodify","index","onSubmitModify","RunLoopPanel","onStep","alert","practice1","practice2","practice3","restartLoop","resetResults","arr","k","ele1","ele2","result","idx","insertionSort","key","input4","selectionSort","minIndex","currRow","currCol","onCreate","onKeyValue","onValueKey","JSON","parse","arrayRows","arrayCols","modify","needModify","readInt","submitModify","getIndex","searchVal","submitGetIndex","idxRow","idxCol","onSubmitIndex","getValue","submitValue","onSubmitValue","top","right","bottom","left","logKeys","keys","Object","myHashTable","Onclose","addValueBtn","addKeyBtn","addValue","onSubmitAddvalue","hasKey","addKey","onSubmitAddKey","newkey","nodeValue","nodeIndex","onAdd","onInsert","onDelete","currValue","doneStop","currIndex","insertNode","nextNode","addHead","splice","position","deleteNode","nextDelete","getWindow","window","nativeWindow","encrypt","cipherText","shift","plainText","shiftValue","decrypt","text","alphabet","alphabetUpper","toUpperCase","char","charLower","toLowerCase","indexOf","shiftAlphabet","shiftedIndex","openrsa","rsa","Array","from","querySelectorAll","forEach","el","onclick","event","target","offsetY","ill","toggleRecord","selectRecord","parentNode","addToggleAnnotations","addShowCode","injectLabels","onkeyup","e","els","keyCode","rec","classList","remove","unselectAllRecords","elementIsVisible","rect","getBoundingClientRect","viewHeight","max","documentElement","clientHeight","innerHeight","ensureElementInView","scrollIntoView","behavior","records","record","element","selected","contains","add","closeAllCode","stopPropagation","showCode","codeSamples","codeSample","toggleAnnotate","toggle","cancel","showCodeTmplElement","showCodeTmpl","innerHTML","expl","querySelector","Element","annotateTmpl","cloneNode","insertAdjacentElement","label","labelText","textContent","h4","createElement","labelTextNode","createTextNode","appendChild","bigInt","generateKeys","p","q","phi","subtract","multiply","n","choose","parseInt","d","modeinv","modInv","res","gcd","a","b","memory","message","m","charCodeAt","c","modPow","mint","toJSNumber","nint","trim","ciphertextArray","String","fromCharCode","onscroll","isSticky","pageYOffset","hostVars","hostBindings","onWindowScroll","scrollY","body","offsetHeight","showFooter","__NgCli_bootstrap_1","bootstrapModule","catch","err","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}